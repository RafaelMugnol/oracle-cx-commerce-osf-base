/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {getCookieValue} = require('@oracle-cx-commerce/utils/node/get-cookie');

const {Client} = require('@oracle-cx-commerce/tools-util/rest-client');

const setAdditionalState = (res, state) => {
  if (!Array.isArray(res.locals.additionalState)) {
    res.locals.additionalState = [];
  }

  res.locals.additionalState.push(state);
};

/*
  Starts a session on the OCCS Admin server and provides the means to inject into requests the Authorization header containing the latest authorization token.
 */
module.exports = app => {
  const {options} = app.locals;

  const {appServerAdmin, appKey} = options;

  let adminServerClient;

  let loginResponse;

  if (appServerAdmin && appKey) {
    adminServerClient = new Client(appServerAdmin, appKey);
  }

  const getToken = req => {
    let token = getCookieValue(req.get('Cookie'), 'oauth_token_secret-adminUI');

    if (token) {
      token = token.replace(/^"/, '').replace(/"$/, '');
    }

    return token || (adminServerClient && adminServerClient.accessToken);
  };

  const setAuthorization = (req, res) => {
    const previewToken = getToken(req);

    if (previewToken) {
      if (!/^localhost/.test(req.hostname)) {
        setAdditionalState(res, {
          clientRepository: {
            context: {
              global: {
                previewToken,
                previewTokenType: 'Bearer'
              }
            }
          }
        });
      }

      if (!req.get('Authorization') && !res.locals.Authorization) {
        res.locals.Authorization = `Bearer ${previewToken}`;

        // Set raw header (for use by `http-proxy-middleware` forwarding to occ app server ONLY)
        req.headers.Authorization = `Bearer ${previewToken}`;
      }
    }
  };

  return {
    async preview(req, res, next) {
      try {
        if (adminServerClient) {
          if (!loginResponse && adminServerClient) {
            loginResponse = adminServerClient.login(true);
          }

          await loginResponse;
        }

        setAuthorization(req, res);

        next();
      } catch (error) {
        next(error);
      }
    }
  };
};
