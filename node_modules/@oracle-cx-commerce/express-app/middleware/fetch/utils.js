/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

const path = require('path');

/**
 * Reads the middleware-related configuration.
 *
 * Tries to get the configuration at the workspace level ('config/middleware.js').
 *
 * @return     {Object}  The middleware configuration, or `undefined` if the configuration file missing or an error occurred.
 */
function getMiddlewareConfiguration() {
  let configuration;
  const basePath = './';
  const configurationPath = path.resolve(basePath, 'config/middleware.js');

  try {
    configuration = require(configurationPath);
  } catch (reason) {
    // We gulp the 'file not found error' because the configuration file is optional.
    if (reason.code !== 'MODULE_NOT_FOUND') {
      // throw reason;
      console.warn(`Skipped reading the '${configurationPath}' configuration file. Reason: ${reason}`);
    }
  }

  return configuration;
}

/**
 * Retrieve the list of additional request headers that the fetch middleware should forward in requests to external services.
 *
 * Tries to get the configuration at the workspace level ('config/middleware.js').
 *
 * @return     {Object}  The list of additional request headers, or an empty array if the configuration file missing or an error occurred.
 */
function getAdditionalForwardingHeaders() {
  const middlewareConfiguration = getMiddlewareConfiguration();
  if (
    middlewareConfiguration &&
    middlewareConfiguration.fetch &&
    middlewareConfiguration.fetch.additionalForwardingHeaders
  ) {
    return middlewareConfiguration.fetch.additionalForwardingHeaders;
  }

  return [];
}

module.exports = {
  getMiddlewareConfiguration,
  getAdditionalForwardingHeaders
};
