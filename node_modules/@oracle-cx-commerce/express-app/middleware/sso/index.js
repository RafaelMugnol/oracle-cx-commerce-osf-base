/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const isSso = req => {
  if (req.body.RelayState && req.body.SAMLResponse) {
    return true;
  }

  return false;
};

const shouldRedirect = req => {
  const {
    body: {RelayState}
  } = req;
  const redirectPath = RelayState.startsWith('/') ? RelayState.toLowerCase() : `/${req.body.RelayState.toLowerCase()}`;
  const currentPath = req.originalUrl ? req.originalUrl.toLowerCase() : req.path.toLowerCase();

  if (redirectPath !== currentPath) {
    return true;
  }

  return false;
};

const createSsoSessionState = req => {
  return {
    clientRepository: {
      context: {
        session: {
          samlResponse: req.body.SAMLResponse,
          relayState: req.body.RelayState
        }
      }
    }
  };
};

module.exports = () => {
  return {
    /*
      A response from the SSO Idp will be a POST to our server with two properties: SAMLResponse and RelayState. The SAMLResponse is the required SAML information and the RelayState is the path that the client (OSF) requested the Idp return the user to post successful authentication. If the current url doesn't equal the RelayState value then we need to redirect to the correct path before continuing the SSO login process.

      Sample flow:
      * OSF login page
      * Idp
      * OSF home page (POST has RelayState value of cart)
      * OSF redirects to cart page
      * OSF renders cart
    */
    sso(req, res, next) {
      if (isSso(req)) {
        if (shouldRedirect(req)) {
          res.redirect(307, req.body.RelayState);

          return;
        }

        // Ensure `additionalState` is an array
        if (!Array.isArray(res.locals.additionalState)) {
          res.locals.additionalState = [];
        }

        const ssoSessionState = createSsoSessionState(req);

        res.locals.additionalState.push(ssoSessionState);
      }

      next();
    }
  };
};
