/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {URL, URLSearchParams} = require('url');
const fetch = require('@oracle-cx-commerce/http-client');
const {getCookieValue} = require('@oracle-cx-commerce/utils/node/get-cookie');
const {createOccRestRequest} = require('../../utils');

const DUMMY_DOMAIN = 'http://domain';

const getRedirectUrl = req => {
  const url = new URL(req.originalUrl, DUMMY_DOMAIN);

  url.searchParams.delete('dynBasicChallenge');

  return url.pathname + url.search;
};

const getCookie = response => {
  return response.headers.raw()['set-cookie'];
};

const isAuthenticated = response => {
  if (response.status === 405) {
    return true;
  }

  return false;
};

const authenticate = (req, res) => {
  const {
    options: {appName, appServerURL}
  } = req.app.locals;

  const options = {
    method: 'POST',
    headers: {
      'Content-Type': req.get('Content-Type')
    },
    body: new URLSearchParams(req.body)
  };

  options.headers.Host = new URL(appServerURL).host;

  const url = new URL(`/ccstore/v1/clientApplications/${appName}/page${req.originalUrl}`, appServerURL);

  const request = createOccRestRequest(req, res)(url.href, options);

  return fetch(request);
};

const isDynBasicAuthentication = req => {
  if (req.method === 'POST' && req.query.dynBasicChallenge) {
    return true;
  }

  return false;
};

const setAdditionalState = (res, state) => {
  if (!Array.isArray(res.locals.additionalState)) {
    res.locals.additionalState = [];
  }

  res.locals.additionalState.push(state);
};

module.exports = () => {
  return {
    setAuthorization(req, res, next) {
      const authorization = req.get('Authorization');

      if (!authorization || authorization.includes('Basic ')) {
        const token = getCookieValue(req.get('Cookie'), 'access_token');

        if (token) {
          setAdditionalState(res, {
            clientRepository: {
              context: {
                session: {
                  token,
                  tokenType: 'Bearer'
                }
              }
            }
          });

          res.locals.Authorization = `Bearer ${token}`;

          // Set raw header (for use by `http-proxy-middleware` forwarding to occ app server ONLY)
          req.headers.Authorization = `Bearer ${token}`;
        }
      }

      next();
    },

    async dynBasicAuthentication(req, res, next) {
      try {
        if (isDynBasicAuthentication(req)) {
          const response = await authenticate(req, res);

          if (isAuthenticated(response)) {
            // Set `dynBasicChallenge` authentication cookie (to authenticate future requests)
            const cookie = getCookie(response);

            res.append('Set-Cookie', cookie);

            // Refresh current url (should now load successfully because of `dynBasicChallenge` cookie)
            const url = getRedirectUrl(req);

            // Cannot return 303 redirection because of the Safari bug
            // [303 See Other does not perform redirection with GET after PUT|https://bugs.webkit.org/show_bug.cgi?id=106469]
            res.status(200).send(`<html><head><meta http-equiv="refresh" content="0; URL=${url}" /></head></html>`);

            return;
          }
        }

        next();
      } catch (error) {
        next(error);
      }
    }
  };
};
