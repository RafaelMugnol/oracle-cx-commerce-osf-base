/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const isPunchout = req => {
  const reqData = req.body;
  if (reqData) {
    const punchoutAccessToken = reqData['oAuthToken'];
    if (punchoutAccessToken) {
      return true;
    }
  }

  return false;
};

const createPunchoutSessionState = req => {
  const {oAuthToken, ...additionalData} = req.body;
  const additionalPunchoutData = {...additionalData, ...req.headers};

  return {
    clientRepository: {
      context: {
        session: {
          ...(oAuthToken && {additionalPunchoutData}),
          token: oAuthToken,
          currentPunchoutOrderId: ''
        }
      }
    }
  };
};

const populateHeaderData = (req, res) => {
  const reqData = req.body;
  const punchoutAccessToken = reqData['oAuthToken'];
  res.locals.Authorization = `Bearer ${punchoutAccessToken}`;

  // Set raw header (for use by `http-proxy-middleware` forwarding to occ app server ONLY)
  req.headers.Authorization = `Bearer ${punchoutAccessToken}`;
};

module.exports = () => {
  return {
    /*
      The punch out users info is stored in session state
    */
    punchout(req, res, next) {
      if (isPunchout(req)) {
        // Ensure `additionalState` is an array
        if (!Array.isArray(res.locals.additionalState)) {
          res.locals.additionalState = [];
        }

        const punchoutSessionState = createPunchoutSessionState(req);

        res.locals.additionalState.push(punchoutSessionState);

        populateHeaderData(req, res);
      }

      next();
    }
  };
};
