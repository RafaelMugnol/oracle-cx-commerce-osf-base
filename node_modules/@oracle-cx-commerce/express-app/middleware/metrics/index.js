/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const promBundle = require('express-prom-bundle');
const net = require('net');
const {getMetricsConfiguration, validateBuckets} = require('@oracle-cx-commerce/express-app/middleware/metrics/utils');

function installOsfMetricsInGlobal() {
  global.osfMetrics = {
    client: promBundle.promClient,
    options: {
      prefix: 'osf_',
      defaultLabels: {deploymentId: process.env.IPC_ID || 'local', clusterId: process.env.CLUSTER_ID || 'local'},
      requestsBuckets: [0.006, 0.01, 0.03, 0.06, 0.1, 0.3, 0.6, 1.0, 3.0, 6.0, 10.0]
    }
  };

  const metrics = global.osfMetrics;
  metrics.client.register.setDefaultLabels(metrics.options.defaultLabels);
  metrics.addPrefix = function (name) {
    return `${this.options.prefix ? this.options.prefix.trim() : ''}${name}`;
  }.bind(metrics);

  metrics.bagOfMetrics = {};
}

/**
 * Install histogram to track external request timing
 */
function installExternalRequestMetrics(app) {
  const configuration = getMetricsConfiguration(app);
  const metrics = global.osfMetrics;

  const options = {
    name: metrics.addPrefix('external_request_duration_seconds'),
    help: 'Duration histogram of the request of external data',
    labelNames: ['method', 'url', 'status_code']
  };
  if (
    configuration &&
    configuration.performance &&
    configuration.performance.outboundRequests &&
    configuration.performance.outboundRequests.buckets &&
    validateBuckets(configuration.performance.outboundRequests.buckets)
  ) {
    options.buckets = configuration.performance.outboundRequests.buckets;
  } else if (metrics && metrics.options.requestsBuckets) {
    options.buckets = metrics.options.requestsBuckets;
  }
  metrics.bagOfMetrics.externalRequestDurationInSeconds = new metrics.client.Histogram(options);
}

/**
 * Add network related metrics, We currently collect the following metrics
 *  openSockets which keep track of all the sockets in open state
 *  totalSockets which is cumulative number of sockets opened so far
 */
function installNetworkMetrics() {
  const metrics = global.osfMetrics;
  const totalSockets = new metrics.client.Counter({
    name: metrics.addPrefix('total_sockets'),
    help: 'Number of sockets opened so far, this is cumulative',
    labelNames: ['host']
  });
  const openSockets = new metrics.client.Gauge({
    name: metrics.addPrefix('open_sockets'),
    help: 'Number of open sockets as of now',
    labelNames: ['host']
  });
  const original = net.connect;
  net.connect = (...args) => {
    const sock = original(...args);
    if (sock._host) {
      sock.on('connect', () => {
        totalSockets.inc({host: sock._host});
        openSockets.inc({host: sock._host});
      });
      sock.on('close', () => {
        openSockets.dec({host: sock._host});
      });
    }

    return sock;
  };
}

/**
 * Installs the Prometheus-based performance metrics in the `global` object.
 *
 * The metrics object can be accessed as
 *     global.osfMetrics
 * Its properties are:
 * - `client`
 *   The Prometheus client for Node.js
 * - `bagOfMetrics`
 *   A collection of metric collectors to register events
 * - `requestsBuckets`
 *   The default histogram buckets
 */
function installPerformanceMetrics(app) {
  installOsfMetricsInGlobal();

  //External request time tracking histogram
  installExternalRequestMetrics(app);

  //Network socket related metrics
  installNetworkMetrics();
}

/**
 * Configure express-prom-bundle
 */
function configurePromBundle(app) {
  const metrics = global.osfMetrics;
  const promBundleOptions = {
    includeMethod: true,
    includePath: false,
    promClient: {
      collectDefaultMetrics: {}
    },
    httpDurationMetricName: metrics.addPrefix('http_request_duration_seconds')
  };
  if (metrics && metrics.options.prefix) {
    promBundleOptions.promClient.collectDefaultMetrics.prefix = metrics.options.prefix;
  }
  const configuration = getMetricsConfiguration(app);
  if (
    configuration &&
    configuration.performance &&
    configuration.performance.inboundRequests &&
    configuration.performance.inboundRequests.buckets &&
    validateBuckets(configuration.performance.inboundRequests.buckets)
  ) {
    promBundleOptions.buckets = configuration.performance.inboundRequests.buckets;
  } else if (metrics && metrics.options.requestsBuckets) {
    promBundleOptions.buckets = metrics.options.requestsBuckets;
  }

  return {
    metrics: promBundle(promBundleOptions)
  };
}

/**
 * Express middleware to collect process metrics and request processing time.
 *
 * The process metrics list is defined by the 'prom-client' module.
 *
 * The request processing time metrics are labeled with the method, path and status code.
 *
 * @return     {Object}  Middleware that captures request and process metrics.
 */
module.exports = app => {
  // Add the `global.osfMetrics` object along with some metrics.
  installPerformanceMetrics(app);

  return configurePromBundle(app);
};
