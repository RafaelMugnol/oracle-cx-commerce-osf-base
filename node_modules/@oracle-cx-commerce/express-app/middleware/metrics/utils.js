/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

const path = require('path');

/**
 * Validates the histogram buckets used to measure latency.
 *
 * Buckets must be a list of two or more monotonically increasing numbers,
 * which first element is greater than zero.
 *
 * @param      {[number]}   buckets  The buckets list.
 * @return     {boolean}  `true` if the checks pass.
 * @throws     Unexpected conditions.
 */
function validateBuckets(buckets) {
  if (!Array.isArray(buckets)) {
    throw new Error(`Expected 'buckets' to be an array, but got '${JSON.stringify(buckets)}'`);
  }
  if (buckets.length <= 1) {
    throw new Error(`Expected two or more 'buckets', but got '${JSON.stringify(buckets)}'`);
  }
  if (buckets.findIndex(item => typeof item !== 'number') !== -1) {
    throw new Error(`Expected all 'buckets' elements to be number, but got '${JSON.stringify(buckets)}'`);
  }

  if (buckets[0] <= 0) {
    throw new Error(`Expected first bucket to be greater than zero, but got '${JSON.stringify(buckets)}'`);
  }
  for (let ii = 1; ii < buckets.length; ii++) {
    if (buckets[ii - 1] >= buckets[ii]) {
      throw new Error(`Expected bucket elements to be monotonically increasing, but got '${JSON.stringify(buckets)}'`);
    }
  }

  return true;
}

/**
 * Reads metrics configuration.
 *
 * Tries to get the configuration at the application level ('packages/apps/{appName}/config/metrics.js') if an argument is provided.
 * Otherwise, it tries to read the configuration from the workspace level ('config/metrics.js').
 *
 * @param      {string}  [appName]  The application name.
 * @return     {Object}  The metrics configuration.
 */
function getMetricsConfiguration(appName) {
  let configuration;
  const basePath = appName ? `packages/apps/${appName}` : './';
  const configurationPath = path.resolve(basePath, 'config/metrics.js');

  try {
    configuration = require(configurationPath);
  } catch (reason) {
    // We gulp the file not found error because it means no metrics configuration have been defined
    // and we will use the default values.
    if (reason.code !== 'MODULE_NOT_FOUND') {
      throw reason;
    }
  }

  return configuration;
}

module.exports = {
  getMetricsConfiguration,
  validateBuckets
};
