/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const logger = require('@oracle-cx-commerce/logger/server');

// If production mode then return the minified bundle otherwise return the non-minified bundle
const minified = process.env.NODE_ENV === 'production' ? true : false;

const loadApp = (appDir, options = {}) => {
  appDir = path.resolve(appDir);
  const {publicBaseUrl = ''} = options;
  const app = require(`${appDir}/dist/cjs/${minified ? 'min/' : ''}server.js`);

  const manifests = {};
  try {
    manifests.modern = {
      base: app.default ? `${publicBaseUrl}` : `${publicBaseUrl}/esm${minified ? '/min' : ''}`,
      ...require(`${appDir}/dist/esm/${minified ? 'min/' : ''}manifest.json`)
    };
  } catch (error) {
    logger.warn('Failed to find "modern" build assets');
  }

  try {
    manifests.legacy = {
      base: app.default ? `${publicBaseUrl}` : `${publicBaseUrl}/amd${minified ? '/min' : ''}`,
      ...require(`${appDir}/dist/amd/${minified ? 'min/' : ''}manifest.json`)
    };
  } catch (error) {
    logger.warn('Failed to find "legacy" build assets');
  }

  // Load app package json (as it contains some relevant config)
  const packageJson = require(`${appDir}/package.json`);

  const {occ: {aliases = {}} = {}} = packageJson;

  for (const [ootbModule, customerModule] of Object.entries(aliases)) {
    // Log the customer's application aliases
    logger.warn(`ALIAS - ${ootbModule} (${customerModule})`);
  }

  if (app.default) {
    logger.info('OSF_BUILER = esbuild');
  } else {
    logger.info('OSF_BUILER = rollup');
  }

  return {
    ...(app.default || app),
    manifests,
    packageJson
  };
};

module.exports = {loadApp};
