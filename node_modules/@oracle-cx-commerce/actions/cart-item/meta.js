/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

export const addItemsToCart = {
  packageId: '@oracle-cx-commerce/actions',
  description:
    "Add Items. Add commerce items to an order. Optionally takes the x-ccasset-language headers to get translated content in another language. It has an optional X-CCVisitorId header param which will be used in case of anonumous user. Also it can have optional X-CCOrganization header which is a JSON field to specify current Organization context of logged in user.This endpoint returns the order details irrespective of organization ID passed in request header. If user doesn't belong to order's organization, then the user has no access to order.",
  endpoints: ['addItemsToCart'],
  input: '@oracle-cx-commerce/actions/cart-item/schema/add-items-to-cart/input.json'
};

export const deleteItemFromCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['deleteItemFromCart'],
  description:
    "Delte Item. Delete commerce item from an order. Optionally takes the x-ccasset-language headers to get translated content in another language. It has an optional X-CCVisitorId header param which will be used in case of anonumous user. Also it can have optional X-CCOrganization header which is a JSON field to specify current Organization context of logged in user.This endpoint returns the order details irrespective of organization ID passed in request header. If user doesn't belong to order's organization, then the user has no access to delete items from order.",
  input: '@oracle-cx-commerce/actions/cart-item/schema/delete-item-from-cart/input.json'
};

export const deleteItemsFromCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['deleteItemsFromCart'],
  description: 'Delte Commerce Items. Delete commerce items from an order.',
  input: '@oracle-cx-commerce/actions/cart-item/schema/delete-items-from-cart/input.json'
};

export const getCartItem = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['getCartItem'],
  description: 'Get Cart Item. Get the given cart item of an order.',
  input: '@oracle-cx-commerce/actions/cart-item/schema/get-cart-item/input.json'
};

export const getCartItems = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['getCartItems'],
  description: 'Get Cart Items. Get the cart items of an order.',
  input: '@oracle-cx-commerce/actions/cart-item/schema/get-cart-items/input.json'
};

export const updateCartItem = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['updateCartItem'],
  description:
    'Update Commerce Item. Updates commerce item properties to an order like quantity, shopperInput, dynamic propeties etc. Dynamic Properties of line item can be added in the the request using the key value pair structure ("dynamicPropertyKey":"dynamicPropertyValue"). These property values can take the types of boolean, date, float, string, timestamp, enumerated, big string.',
  input: '@oracle-cx-commerce/actions/cart-item/schema/update-cart-item/input.json'
};

export const updateCartItems = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['updateCartItems'],
  description:
    'Currently this action accept list of items as input payload. This might change in future to Map.]Update Commerce Items. This action updates more than one commerce items to an order. The input requires all the ids in the payload to retain the items in the cart even if there is no update to item. If any commerce id(s) are not present in the input, those item(s) will be removed from the cart. Dynamic Properties of line item can be added in the the request using the key value pair structure ("dynamicPropertyKey":"dynamicPropertyValue"). These property values can take the types of boolean, date, float, string, timestamp, enumerated, big string.',
  input: '@oracle-cx-commerce/actions/cart-item/schema/update-cart-items/input.json'
};
