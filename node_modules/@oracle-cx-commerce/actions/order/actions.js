/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {endpointSaga, takeEvery, takeLatest, takeLeading} from '@oracle-cx-commerce/store/utils';

import {all} from 'redux-saga/effects';

/**
 * This saga invokes the submit cancel order endpoint (submits cancel order created, after initiating
 * cancel on the order in-flight). The state of the original and cancel orders change after
 * successful submission. This saga invoke getOrder actions to update the state of both
 * the orders.
 * @param {Object} action holds the type and orderId that has to be submitted for cancellation.
 */
function* submitCancelOrderSaga(action) {
  const response = yield endpointSaga(action);
  if (response.ok === true) {
    const originalOrderAction = {type: 'getOrder', payload: {orderId: response.json.orderId}};
    const cancelOrderAction = {type: 'getOrder', payload: {orderId: action.payload.orderId}};

    yield all([endpointSaga(originalOrderAction), endpointSaga(cancelOrderAction)]);
  }

  return response;
}

export default {
  *saga() {
    yield all([
      takeEvery('getAllOrdersForProfile', endpointSaga),
      takeEvery('getOrder', endpointSaga),
      takeEvery('getOrderConfirmation', endpointSaga),
      takeLeading('cancelOrder', endpointSaga),
      takeLatest('getValidActionsForOrder', endpointSaga),
      takeLeading('initiateCancelOrder', endpointSaga),
      takeLeading('submitCancelOrder', submitCancelOrderSaga),
      takeLeading('copyOrder', endpointSaga)
    ]);
  }
};
