/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createReducer, endpointSaga, takeEvery, takeLeading} from '@oracle-cx-commerce/store/utils';
import {all} from 'redux-saga/effects';
import {getShareSettings, getEmailConfigs} from '@oracle-cx-commerce/commerce-utils/selector';

/**
 * Removes share settings of purchase list from the state structure
 *
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deleteShareSettingResolvedReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.shareSettingId)) {
    return state;
  }

  if (response.ok) {
    const {shareSettingId} = originalAction.payload;

    const shareSettings = {...getShareSettings(state)};
    const emailConfigs = {...getEmailConfigs(state)};

    if (shareSettings[shareSettingId]) {
      const emailConfigsToDelete = shareSettings[shareSettingId].sharedEmailConfigs;

      if (emailConfigsToDelete) {
        emailConfigsToDelete.forEach(configId => {
          delete emailConfigs[configId];
        });
      }

      delete shareSettings[shareSettingId];
    }

    return {
      ...state,
      purchaseListRepository: {
        ...state.purchaseListRepository,
        shareSettings,
        emailConfigs
      }
    };
  }

  return state;
};

/**
 * Removes email config of share setting from the state structure
 *
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deleteEmailConfigsResolvedReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.shareSettingId)) {
    return state;
  }

  if (response.ok) {
    const {shareSettingId, emailConfigs: emailConfigsToDelete} = originalAction.payload;
    const emailConfigIdsToDelete = emailConfigsToDelete.map(item => item.id);

    const shareSettings = {...getShareSettings(state)};
    const emailConfigs = {...getEmailConfigs(state)};

    const shareSetting = shareSettings[shareSettingId];
    if (shareSetting) {
      const {sharedEmailConfigs} = shareSetting;
      shareSetting.sharedEmailConfigs = sharedEmailConfigs.filter(item => !emailConfigIdsToDelete.includes(item));
    }

    emailConfigIdsToDelete.forEach(id => {
      delete emailConfigs[id];
    });

    if (shareSetting) {
      return {
        ...state,
        purchaseListRepository: {
          ...state.purchaseListRepository,
          shareSettings: {
            ...shareSettings,
            [shareSettingId]: shareSetting
          },
          emailConfigs
        }
      };
    }

    return {
      ...state,
      purchaseListRepository: {
        ...state.purchaseListRepository,
        emailConfigs
      }
    };
  }

  return state;
};

export default {
  reducer: createReducer({
    deleteShareSettingResolved: deleteShareSettingResolvedReducer,
    deleteEmailConfigsResolved: deleteEmailConfigsResolvedReducer
  }),

  *saga() {
    yield all([
      takeLeading('createShareSetting', endpointSaga),
      takeEvery('listShareSettings', endpointSaga),
      takeEvery('getShareSetting', endpointSaga),
      takeLeading('updateShareSetting', endpointSaga),
      takeLeading('deleteShareSetting', endpointSaga),
      takeLeading('createEmailConfigs', endpointSaga),
      takeLeading('updateEmailConfigs', endpointSaga),
      takeLeading('deleteEmailConfigs', endpointSaga)
    ]);
  }
};
