/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {endpointSaga, takeEvery} from '@oracle-cx-commerce/store/utils';
import {all, select} from 'redux-saga/effects';
import {getCurrentCatalogId, getCurrentPriceListGroup} from '@oracle-cx-commerce/commerce-utils/selector';

let transformResponse = {};
let noItemsAdded = false;

const buildResponse = (listSkusResponse, originalPayload) => {
  const {deletedSkus = [], items: listingItems = []} = listSkusResponse.json || {};
  const nonExistingSkus = deletedSkus.reduce((target, sku) => {
    target[sku] = 'invalid';

    return target;
  }, {});
  const inactiveSkus = listingItems.reduce((target, item) => {
    if (!item.parentProducts[0].active) {
      target[item.repositoryId] = 'inactive';
    }

    return target;
  }, {});
  const invalidSkus = {...nonExistingSkus, ...inactiveSkus};
  const {items: originalPayloadItems = []} = originalPayload;
  const originalSkuQuantities = originalPayloadItems.reduce((target, item) => {
    target[item.catRefId] = item.quantity;

    return target;
  }, {});

  return stockStatusResponse => {
    const {items: stockStatusResponseItems = []} = stockStatusResponse.json || {};
    const skus = stockStatusResponseItems.reduce((target, item) => {
      if (originalSkuQuantities[item.catRefId] > item.orderableQuantity) {
        target[item.catRefId] = 'inSufficientStock';
      } else if (item.stockStatus === 'OUT_OF_STOCK') {
        target[item.catRefId] = 'outOfStock';
      } else {
        target[item.catRefId] = 'valid';
      }

      return target;
    }, {});

    return {skus: {...skus, ...invalidSkus}};
  };
};

const getSkusPayload = (state, payload) => {
  const {items = []} = payload;
  const skuIds = items
    .reduce((target, item) => {
      target.push(item.catRefId);

      return target;
    }, [])
    .join(',');

  const catalogId = getCurrentCatalogId(state);
  const storePriceListGroupId = getCurrentPriceListGroup(state).id;

  return {skuIds, catalogId, storePriceListGroupId, state: true};
};

const getStockStatusPayload = response => {
  const {items = []} = response.json || {};

  const products = items.reduce((target, item) => {
    target.push(`${item.parentProducts[0].id}:${item.repositoryId}`);

    return target;
  }, []);

  return {products};
};

const getAddToCartPayload = (response, originalPayload) => {
  const {items: originalItems = []} = originalPayload;
  const items = originalItems.filter(item => response.skus[item.catRefId] && response.skus[item.catRefId] === 'valid');

  return {items};
};

function* listSkusSaga(action) {
  const state = yield select();
  const listSkusPayload = getSkusPayload(state, action.payload);
  const response = yield endpointSaga({type: 'listSkus', payload: listSkusPayload});

  return response;
}

function* getStockStatusSaga(action) {
  let response = yield listSkusSaga(action);

  if (response.ok === true) {
    transformResponse = buildResponse(response, action.payload);
    const stockStatusPayload = getStockStatusPayload(response);
    if (stockStatusPayload.products.length > 0) {
      response = yield endpointSaga({type: 'getStockStatus', payload: stockStatusPayload});
    }
  }

  return response;
}

function* addItemsToCartSaga(action) {
  let response = yield getStockStatusSaga(action);

  if (response.ok === true) {
    transformResponse = transformResponse ? transformResponse(response) : {};
    const addToCartPayload = getAddToCartPayload(transformResponse, action.payload);
    if (addToCartPayload.items.length > 0) {
      response = yield endpointSaga({type: 'addItemsToCart', payload: addToCartPayload});
    } else {
      noItemsAdded = true;
    }
  }

  return response;
}

function* quickOrderSaga(action) {
  const response = yield addItemsToCartSaga(action);
  const {json: responseJson = {}} = response;
  const json = {};
  json.skus = transformResponse.skus;
  json.noItemsAdded = noItemsAdded;
  response.json = {...responseJson, ...json};

  return response;
}

export default {
  *saga() {
    yield all([takeEvery('addQuickOrderItemsToCart', quickOrderSaga)]);
  }
};
