/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

export const applyCouponsToCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['applyCouponsToCart'],
  description: 'Apply Coupons. Applies coupon to the order if the coupon code is valid',
  input: '@oracle-cx-commerce/actions/cart/schema/apply-coupons-to-cart/input.json'
};

export const getCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['getCart'],
  description: 'Get default cart. Gets current incomplete order',
  input: '@oracle-cx-commerce/actions/cart/schema/get-cart/input.json'
};

export const priceCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['priceCart'],
  description: 'Price the current order with specified pricing operation',
  input: '@oracle-cx-commerce/actions/cart/schema/price-cart/input.json'
};

export const removeCouponsFromCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['removeCouponsFromCart'],
  description: 'Remove Coupons. Removes coupon(s) applied to the order',
  input: '@oracle-cx-commerce/actions/cart/schema/remove-coupons-from-cart/input.json'
};

export const updateCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['updateCart'],
  description:
    "Updates Cart. Action to be used only if existing individual subresource api's are not suitable for the given use case. Use commerceItem and shippingGroup API's for individual updates ***\nCart will be updated with the given payload. Only properties that will be writeable will be able to update. Schema is incomplete.",
  input: '@oracle-cx-commerce/actions/cart/schema/update-cart/input.json'
};

export const checkoutCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['checkoutCart'],
  description: 'Checkout current cart.',
  input: '@oracle-cx-commerce/actions/cart/schema/checkout-cart/input.json'
};

export const getUpsellMessages = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['getUpsellMessages'],
  description: 'Gets promotion upsell messages for empty cart.',
  input: '@oracle-cx-commerce/actions/cart/schema/get-upsell-messages/input.json'
};

export const listShippingMethodsForCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['listShippingMethodsForCart'],
  description:
    'Lists all the shipping methods for each shipping group in query param or for all the shipping groups in current incomplete order if no shipping group id is passed',
  input: '@oracle-cx-commerce/actions/cart/schema/list-shipping-methods-for-cart/input.json'
};

export const deleteCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['deleteCart'],
  description: 'Deletes incomplete order by ID',
  input: '@oracle-cx-commerce/actions/cart/schema/delete-cart/input.json',
  actions: ['deleteCartSuccess']
};

export const listCarts = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['listCarts'],
  description:
    'Get All Incomplete Orders For Profile. Retrieves all incomplete orders associated with the logged in user.',
  input: '@oracle-cx-commerce/actions/cart/schema/list-carts/input.json'
};

export const saveCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['saveCart'],
  description: 'Saves current incomplete order with the provided cart name.',
  input: '@oracle-cx-commerce/actions/cart/schema/save-cart/input.json'
};

export const switchCart = {
  packageId: '@oracle-cx-commerce/actions',
  endpoints: ['switchCart'],
  description:
    'Provides the ability to switch the current order context to a given incomplete order from the list of saved orders for a logged in shopper. It also supports switching the current order context with a new empty cart order for a registered shopper when no orderId is provided for the switchCart call.',
  input: '@oracle-cx-commerce/actions/cart/schema/switch-cart/input.json'
};
