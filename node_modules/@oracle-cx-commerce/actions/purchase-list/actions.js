/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createReducer, endpointSaga, takeEvery, takeLeading} from '@oracle-cx-commerce/store/utils';
import {getEmailConfigs, getPurchaseLists, getShareSettings} from '@oracle-cx-commerce/commerce-utils/selector';

import {all} from 'redux-saga/effects';

/**
 * Removes Share Settings and associated Email Config from the state for a given Purchase List Id
 *
 * @param {Object} state state of the application
 * @param {string} action purchase list id
 * @returns {Object} Object containing updated share Settings and email Config objects
 */

const deleteShareSettingsAndEmailConfigs = (state, purchaseListId) => {
  const shareSettings = {...getShareSettings(state)};
  const emailConfigs = {...getEmailConfigs(state)};

  Object.values(shareSettings).forEach(item => {
    if (item.relativeTo === purchaseListId) {
      const {sharedEmailConfigs} = item;
      sharedEmailConfigs.forEach(emailConfigId => {
        delete emailConfigs[emailConfigId];
      });
      delete shareSettings[item.id];
    }
  });

  return {
    shareSettings,
    emailConfigs
  };
};

/**
 * Removes purchase list in the payload from the state structure
 *
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deletePurchaseListResolvedReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.purchaseListId)) {
    return state;
  }

  if (response.ok) {
    const {purchaseListId} = originalAction.payload;
    const updatedShareAndEmailDescriptors = deleteShareSettingsAndEmailConfigs(state, purchaseListId);
    const purchaseLists = {...getPurchaseLists(state)};
    delete purchaseLists[purchaseListId];

    return {
      ...state,
      purchaseListRepository: {
        ...state.purchaseListRepository,
        purchaseLists,
        ...updatedShareAndEmailDescriptors
      }
    };
  }

  return state;
};

/**
 * Makes a getPurchaseList call if updatePurchaseListItems does not return expanded response.
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the response
 */
function* updatePurchaseListItemsSaga(action) {
  const response = yield endpointSaga({...action, endpointId: 'updatePurchaseListItems'});
  if (response.ok && Object.keys(response.delta).length === 0) {
    const {purchaseListId} = action.payload;

    return yield endpointSaga({...action, payload: {purchaseListId}, endpointId: 'getPurchaseList'});
  }

  return response;
}

export default {
  reducer: createReducer({deletePurchaseListResolved: deletePurchaseListResolvedReducer}),

  *saga() {
    yield all([
      takeLeading('createPurchaseList', endpointSaga),
      takeEvery('listPurchaseLists', endpointSaga),
      takeEvery('getPurchaseList', endpointSaga),
      takeLeading('updatePurchaseList', endpointSaga),
      takeLeading('deletePurchaseList', endpointSaga),
      takeLeading('updatePurchaseListItems', updatePurchaseListItemsSaga),
      takeEvery('checkPurchaseListEditAccess', endpointSaga)
    ]);
  }
};
