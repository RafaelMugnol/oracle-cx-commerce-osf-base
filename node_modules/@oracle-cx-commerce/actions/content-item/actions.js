/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {endpointSaga, takeLatest} from '@oracle-cx-commerce/store/utils';
import {getContentSettings} from '@oracle-cx-commerce/commerce-utils/selector';
import {all, select} from 'redux-saga/effects';
import {STARTING_CEC_TAG, ENDING_CEC_TAG} from '@oracle-cx-commerce/react-widgets/oce/utils';

// TODO add comment
export function* getItemsSaga(action) {
  const response = yield endpointSaga(action);

  if (response.ok === true && response.delta.contentRepository && response.delta.contentRepository.contentItems) {
    // manipulate data here
    const items = Object.keys(response.delta.contentRepository.contentItems);
    const contentSettings = yield select(getContentSettings);
    yield all(
      items.map(item =>
        endpointSaga({
          type: 'oceGetItem',
          payload: {
            id: item,
            channelToken: contentSettings.accessToken,
            widgetId: action.payload.widgetId,
            pageId: action.payload.pageId
          }
        })
      )
    );
  }

  return response;
}

export function* richTextSaga(item, payload) {
  const contentFields = item.fields;
  for (const [key, value] of Object.entries(contentFields)) {
    if (typeof value === 'string' && value.indexOf(STARTING_CEC_TAG) > -1) {
      const seenAssets = {},
        assetIds = [];
      let pos = 0;

      // get all the asset ids by tracking the position of the next starting tag in pos.
      // If pos != -1 process that asset id and move to the end of that tag and check again.
      while ((pos = value.indexOf(STARTING_CEC_TAG, pos)) !== -1) {
        const assetId = value.substring(pos + STARTING_CEC_TAG.length, value.indexOf(ENDING_CEC_TAG, pos));

        // if it is an asset id we haven't seen, track the asset id, build the HREF and track the promise to get the data
        if (!seenAssets[assetId]) {
          assetIds.push(assetId); // track the asset id
          seenAssets[assetId] = 1; // remember we have seen this asset
        }
        // move to the end of the current tag
        pos = value.indexOf(ENDING_CEC_TAG, pos) + ENDING_CEC_TAG.length;
      }
      if (assetIds.length > 0) {
        // Changes need to be made in endpoint to be stored in state
        yield all(
          assetIds.map(id =>
            endpointSaga({
              type: 'oceGetItem',
              payload: {
                id,
                richText: true,
                fieldName: key,
                contentItemId: item.id,
                widgetId: payload.widgetId,
                pageId: payload.pageId
              }
            })
          )
        );
      }
    }
  }
}

export function* getItemSaga(action) {
  const response = yield endpointSaga(action);

  if (response.ok === true && response.delta.contentRepository && response.delta.contentRepository.contentItems) {
    let itemId;
    if (action.payload.productAware) {
      const {widgetId} = action.payload;
      const widgetName = `contentWidget-${widgetId}`;
      const page = response.delta.pageRepository.pages[action.payload.pageId];
      const contentWidgetIds = page[widgetName];
      itemId = Object.keys(contentWidgetIds)[0] || {};
      action.payload.id = itemId;
      delete action.payload.query;
      delete action.payload.productAware;
      yield endpointSaga(action);
    } else {
      itemId = action.payload.id;
    }
    const item = response.delta.contentRepository.contentItems[itemId];

    const richTextPayload = {
      widgetId: action.payload.widgetId,
      pageId: action.payload.pageId
    };
    yield richTextSaga(item, richTextPayload);
  }

  return response;
}

export function* getItemBySlugSaga(action) {
  const response = yield endpointSaga(action);
  if (response.ok === true && response.delta.contentRepository && response.delta.contentRepository.contentItems) {
    let contentItem = {};
    for (const value of Object.values(response.delta.contentRepository.contentItems)) {
      if (value.slug === action.payload.slug) {
        contentItem = value;
        break;
      }
    }

    const richTextPayload = {
      widgetId: action.payload.widgetId,
      pageId: action.payload.pageId
    };
    yield richTextSaga(contentItem, richTextPayload);
  }

  return response;
}

export default {
  *saga() {
    yield all([
      takeLatest('oceGetItemsForDelivery', getItemsSaga),
      takeLatest('oceGetItemBySlug', getItemBySlugSaga),
      takeLatest('oceGetItem', getItemSaga)
    ]);
  }
};
