/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createReducer, endpointSaga, takeEvery, takeLatest, takeLeading} from '@oracle-cx-commerce/store/utils';
import {all} from 'redux-saga/effects';
import {getAddresses} from '@oracle-cx-commerce/commerce-utils/selector';

/**
 * Removes the address in the payload from the state structure
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deleteAddressReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.addressId)) {
    return state;
  }

  if (response.ok) {
    const {addressId} = originalAction.payload;
    const contactInfos = getAddresses(state);

    delete contactInfos[addressId];

    return {
      ...state,
      profileRepository: {
        ...state.profileRepository,
        contactInfos: {
          ...contactInfos
        }
      }
    };
  }

  return state;
};

export default {
  reducer: createReducer({deleteOrganizationAddressResolved: deleteAddressReducer}),

  *saga() {
    yield all([
      takeEvery('getOrganizationDefaultAddresses', endpointSaga),
      takeLatest('getOrganizationAddress', endpointSaga),
      takeLeading('updateOrganizationAddress', endpointSaga),
      takeLeading('addOrganizationAddress', endpointSaga),
      takeLeading('deleteOrganizationAddress', endpointSaga),
      takeEvery('listOrganizationAddresses', endpointSaga)
    ]);
  }
};
