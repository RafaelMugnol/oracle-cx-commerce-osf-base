/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {all, select} from 'redux-saga/effects';
import {chain, createReducer, endpointSaga, takeEvery, takeLatest, takeLeading} from '@oracle-cx-commerce/store/utils';
import {getContactInfos, getSites, isMultiSite} from '@oracle-cx-commerce/commerce-utils/selector';

import {valueIsTrue} from '@oracle-cx-commerce/utils/generic';

/**
 * Generate a site properties array for each site in the siteRepository
 * @param {Object} state the state containing the siteRepository
 * @param {Boolean} receiveEmailGlobal whether to set the receiveEmail flag for each site
 * @param {Boolean} GDPRProfileP13nConsentGrantedGlobal whether to set the GDPRProfileP13nConsentGranted flag for each site
 */
const generateSiteProperties = (state, receiveEmailGlobal, GDPRProfileP13nConsentGrantedGlobal) => {
  // we need to get the list of sites and add an entry for each, since a user won't have
  // site properties for anything but the default site initially
  const siteKeys = Object.keys(getSites(state));

  return siteKeys.map(siteId => {
    const site = {
      site: {id: siteId},
      properties: {}
    };

    if (receiveEmailGlobal) {
      site.properties.receiveEmail = 'yes';
    }

    if (GDPRProfileP13nConsentGrantedGlobal) {
      site.properties.GDPRProfileP13nConsentGranted = true;
    }

    return site;
  });
};

/**
 * Update Profile saga
 * Call update profile and if if multi-site then update site properties if passed in
 *
 * @param {*} action the action used by the saga
 */
function* updateProfileSaga(action) {
  // call the updateProfile endpoint
  let response = yield endpointSaga(action);

  const state = yield select();

  // if multi-site then check if the site properties need updated
  if (response.ok === true && isMultiSite(state)) {
    const {payload = {}} = action;
    const {receiveEmailGlobal = null, GDPRProfileP13nConsentGrantedGlobal = null} = payload;

    // if receiveEmailGlobal or GDPRProfileP13nConsentGrantedGlobal
    // is passed in and then call update site properties action
    if (receiveEmailGlobal || GDPRProfileP13nConsentGrantedGlobal) {
      // convert values to boolean in case passed in string form
      action.payload = generateSiteProperties(
        state,
        valueIsTrue(receiveEmailGlobal),
        valueIsTrue(GDPRProfileP13nConsentGrantedGlobal)
      );

      response = yield endpointSaga({...action, endpointId: 'updateSiteProperties'});
    }
  }

  return response;
}

function* createProfileSaga(action) {
  // add the incoming action for creating a profile
  let response = yield endpointSaga(action);

  // if the response is OK then the profile was created
  // call the login action
  if (response.ok === true) {
    // get the autoLogin flag if it exists plus the username and password from the payload
    const {
      payload: {autoLogin = false, email, login, password}
    } = action;

    if (autoLogin) {
      response = yield chain({type: 'login', payload: {username: login || email, password}});
    }
  }

  return response;
}

function* createOrUpdateProfileAddressSaga(action) {
  // add the incoming action for creating a profile address
  const response = yield endpointSaga(action);

  // if the response is OK then the profile address was created
  // call the getCurrentProfile action
  if (response.ok === true) {
    yield chain({type: 'getCurrentProfile'});
  }

  return response;
}

/**
 * Removes the address in the payload from the state structure
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deleteAddressReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.addressId)) {
    return state;
  }

  if (response.ok) {
    const {addressId} = originalAction.payload;
    const contactInfos = getContactInfos(state);

    delete contactInfos[addressId];

    return {
      ...state,
      profileRepository: {
        ...state.profileRepository,
        contactInfos: {
          ...contactInfos
        }
      }
    };
  }

  return state;
};

export default {
  reducer: createReducer({deleteProfileAddressResolved: deleteAddressReducer}),

  *saga() {
    yield all([
      takeLeading('createProfile', createProfileSaga),
      takeLeading('createProfileAddress', createOrUpdateProfileAddressSaga),
      takeLeading('deleteProfileAddress', endpointSaga),
      takeLeading('getCurrentProfile', endpointSaga),
      takeLatest('getProfileSavedCard', endpointSaga),
      takeEvery('getProfileAddress', endpointSaga),
      takeLeading('getShopperSettings', endpointSaga),
      takeEvery('listProfileAddresses', endpointSaga),
      takeLatest('listProfileSavedCards', endpointSaga),
      takeLatest('listProfileSavedCardsForCurrentSite', endpointSaga),
      takeEvery('listSiteProperties', endpointSaga),
      takeLeading('removeSavedCardFromProfile', endpointSaga),
      takeLeading('resetPassword', endpointSaga),
      takeLeading('saveCardToProfile', endpointSaga),
      takeLeading('updateDefaultProfileAddress', endpointSaga),
      takeLeading('updateExpiredPassword', endpointSaga),
      takeLeading('updateProfile', updateProfileSaga),
      takeLeading('updateProfileAddress', createOrUpdateProfileAddressSaga),
      takeLeading('updateProfileSavedCard', endpointSaga),
      takeLeading('updateSiteProperties', endpointSaga)
    ]);
  }
};
