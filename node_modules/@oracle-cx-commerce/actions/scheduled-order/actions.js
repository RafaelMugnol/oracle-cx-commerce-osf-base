/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  endpointSaga,
  takeOnce,
  takeEvery,
  takeLatest,
  takeLeading,
  createReducer
} from '@oracle-cx-commerce/store/utils';
import {all} from 'redux-saga/effects';

/**
 * Removes the scheduled order from the state
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const deleteScheduledOrderReducer = (state, action) => {
  const {payload: response, originalAction} = action;
  const {orderRepository, ...restState} = state;

  if (!(originalAction && originalAction.payload && originalAction.payload.scheduledOrderId)) {
    return state;
  }

  if (response.ok) {
    const {scheduledOrderId} = originalAction.payload;
    const {executionStatusList} = orderRepository.scheduledOrders[scheduledOrderId];
    const {executionStatus} = orderRepository;
    if (Array.isArray(executionStatusList) && executionStatusList.length > 0) {
      for (const executionStatusId in executionStatus) {
        if (executionStatus[executionStatusId].scheduledOrderId === scheduledOrderId) {
          delete orderRepository.executionStatus[executionStatusId];
        }
      }
    }
    delete orderRepository.scheduledOrders[scheduledOrderId];

    return {
      ...restState,
      orderRepository: {
        ...orderRepository
      }
    };
  }

  return state;
};

export default {
  reducer: createReducer({
    deleteScheduledOrderResolved: deleteScheduledOrderReducer
  }),

  *saga() {
    yield all([
      takeLeading('convertCartToScheduledOrder', endpointSaga),
      takeLeading('createScheduledOrder', endpointSaga),
      takeOnce('deleteScheduledOrder', endpointSaga),
      takeLatest('getScheduledOrder', endpointSaga),
      takeEvery('listExecutionStatusForScheduledOrder', endpointSaga),
      takeEvery('listScheduledOrders', endpointSaga),
      takeLeading('updateScheduledOrder', endpointSaga)
    ]);
  }
};
