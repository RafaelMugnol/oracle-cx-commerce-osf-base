/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {all, put} from 'redux-saga/effects';
import {createReducer, endpointSaga, takeEvery, takeLatest, takeLeading} from '@oracle-cx-commerce/store/utils';
import {getProfiles} from '@oracle-cx-commerce/commerce-utils/selector';

export function* addOrganizationMemberRolesSaga(action) {
  const response = yield endpointSaga(action);
  if (response.ok) {
    yield put({...action, type: 'addOrganizationMemberRolesResolved'});
  }

  return response;
}

export function* removeOrganizationMemberRolesSaga(action) {
  const response = yield endpointSaga(action);
  if (response.ok) {
    yield put({...action, type: 'removeOrganizationMemberRolesResolved'});
  }

  return response;
}

/**
 * Removes all the profiles in the payload from the state structure
 * @param {Object} state state of the application
 * @param {Object} action the details of the dispatched action, including the payload
 * @returns {Object} the updated state
 */
const removeMembersResolvedReducer = (state, action) => {
  const {payload: response, originalAction} = action;

  if (!(originalAction && originalAction.payload && originalAction.payload.memberIds)) {
    return state;
  }

  if (response.ok) {
    const {memberIds} = originalAction.payload;
    const profiles = getProfiles(state);

    memberIds.forEach(memberId => {
      delete profiles[memberId];
    });

    return {
      ...state,
      profileRepository: {
        ...state.profileRepository,
        profiles: {
          ...profiles
        }
      }
    };
  }

  return state;
};

const removeOrganizationMemberRolesResolvedReducer = (state, action) => {
  const {payload: response, originalAction} = action;
  if (!(originalAction && originalAction.payload && originalAction.payload.memberId)) {
    return state;
  }
  if (response.ok) {
    const {memberId, roles = []} = originalAction.payload;
    const removedRoles = roles.map(role => role.id);
    const profiles = getProfiles(state, memberId);
    if (profiles[memberId]) {
      const profile = profiles.memberId;
      const profileRoles = profiles[memberId].roles || [];
      profileRoles.filter(profileRole => removedRoles.indexOf(profileRole) === -1);
      profile['roles'] = profileRoles;
      profiles[memberId] = profile;
    }

    return {
      ...state,
      profileRepository: {
        ...state.profileRepository,
        profiles: {
          ...profiles
        }
      }
    };
  }
};

const addOrganizationMemberRolesReducer = (state, action) => {
  const {payload: response, originalAction} = action;
  if (!(originalAction && originalAction.payload && originalAction.payload.memberId)) {
    return state;
  }
  if (response.ok) {
    const {memberId, roles = []} = originalAction.payload;
    const addedRoles = roles.map(role => role.id);
    const profiles = getProfiles(state, memberId);
    if (profiles[memberId]) {
      const profile = profiles.memberId;
      const profileRoles = profiles[memberId].roles || [];
      addedRoles.forEach(role => {
        if (profileRoles.indexOf(role) === -1) {
          profileRoles.push(role);
        }
      });
      profile['roles'] = profileRoles;
      profiles[memberId] = profile;
    }

    return {
      ...state,
      profileRepository: {
        ...state.profileRepository,
        profiles: {
          ...profiles
        }
      }
    };
  }
};
//added addOrganizationMemberRoles and removeOrganizationMemberRoles action as part of accessRole stories changes.
export default {
  reducer: createReducer({
    removeOrganizationMembersResolved: removeMembersResolvedReducer,
    removeOrganizationMemberRolesResolved: removeOrganizationMemberRolesResolvedReducer,
    addOrganizationMemberRolesResolved: addOrganizationMemberRolesReducer
  }),

  *saga() {
    yield all([
      takeEvery('listOrganizationMembers', endpointSaga),
      takeLatest('getOrganizationMember', endpointSaga),
      takeLeading('updateOrganizationMember', endpointSaga),
      takeLeading('removeOrganizationMembers', endpointSaga),
      takeLeading('createOrganizationMember', endpointSaga),
      takeLeading('addOrganizationMemberRoles', addOrganizationMemberRolesSaga),
      takeLeading('removeOrganizationMemberRoles', removeOrganizationMemberRolesSaga)
    ]);
  }
};
