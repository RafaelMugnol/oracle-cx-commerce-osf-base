/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createCommaSeparatedStringFromArray} from '@oracle-cx-commerce/endpoints/utils';
import {endpointSaga, takeEvery, takeLeading} from '@oracle-cx-commerce/store/utils';
import {all} from 'redux-saga/effects';

/**
 * This function updates the error object such that response has updated errorMessage and also appends json -> invalidSkuIds in response.
 * @param {*} response response object to be updated
 * @param {*} errorMessages list of errorMessages that has to be put in the error object.
 * @param {*} invalidSkuIds list of all invalidSku Ids present in payload.
 * @returns update response object.
 */
const addPropertiesToResponseObject = (response, errorMessages, invalidSkuIds) => {
  if (!response.error) {
    response.error = {};
  }
  if (!response.json) {
    response.json = {};
  }
  //placing the error message response inside the error object.
  response.error['message'] = errorMessages;
  //placing the invalidSkuIds back in the json part which will not update the state and can be accessed by components to display it on UI.
  response.json['invalidSkuIds'] = invalidSkuIds;

  return response;
};
/**
 * This Saga will make listSku endpoint call. If the gatherErrorsForAllSkus flag is true, listSku calls will be made on repetitive basis until the response of it comes out to true(in case of invalid skuId in payload).
 * Response will contain list of all invalid skuIds in payload if 'gatherErrorsForAllSkus' is true, if false will only give details of first invalid sku in the list.
 * Default value of gatherErrorsForAllSkus is false which means default behavior will be returning the first invalid SkuId.
 * Once the response comes out to be true of listSku calls and gatherErrorsForAllSkus is true, then all invalidSku will be added under response.json
 * Also the errorMessage object will be populated with list of error message encountered.
 * @payload action : object which will have payload with list of all skuIds.
 * @return response : object which will return the error object else the transformed response having sku details of list passed in payload.
 * TO-DO :: Remove this code once the backend fix is available.
 */

function* listSkusSaga(action) {
  const {payload} = action;
  //gatherErrorsForAllSkus is the flag used to check whether list of Skus has to be returned from API. Default value is false.
  const {skuIds = [], gatherErrorsForAllSkus = false} = payload;
  //skuIds has to be comma separated string which is delimited to get list of skuIds.
  let skuList = typeof skuIds === 'string' ? skuIds.split(',') : skuIds;
  let exitLoopOnValidSkuLeft = false;
  let response;
  /**
   * check for the gatherErrorsForAllSkus flag to execute code. This will make repetitive calls filtering out invalidSkuIds once at a time from payload.
   * Once the response is true, will check the errorMessages array length and will append it in the error object under response.
   */
  if (gatherErrorsForAllSkus && skuList.length > 0) {
    //stores all error messages.
    const errorMessages = [];
    //stores all invalid skuIds.
    const invalidSkuIds = [];
    //looping the listSku calls until the response comes out to be success or the there is no SkuId left in payload.
    // once the payload only contains valid sku then the exitLoopOnValidSkuLeft is put back as true which breaks the iteration.
    while (!exitLoopOnValidSkuLeft) {
      if (skuList.length > 0) {
        //fetching endpoint to get response from which we check for error.
        response = yield endpointSaga({
          ...action,
          payload: {skuIds: createCommaSeparatedStringFromArray(skuList), gatherErrorsForAllSkus},
          endpointId: 'listSkus'
        });
        //checking the response with errorCode and status (errorCode is unique as status is 500 which is common for other errors as well)
        if (
          response.error &&
          response.error.errorCode &&
          response.error.status &&
          response.error.errorCode === '26060' &&
          response.error.status === 500
        ) {
          const {message} = response.error;
          errorMessages.push(message);
          const messagePart = message.split(':');
          //delimiting message to fetch the invalid sku from the message.
          const invalidSkuId = messagePart.length === 2 ? messagePart[1].trim() : '';
          if (skuList.indexOf(invalidSkuId) >= 0) {
            invalidSkuIds.push(invalidSkuId);
            skuList = skuList.filter(sku => sku !== invalidSkuId);
          }
        } else {
          /**
           * checking the message length and error which means that if there were earlier invalid SKUIds,
           * which has been filtered out and this list has to be added in the error object and under json.
           */
          if (errorMessages.length > 0 && !response.error) {
            //changing the response back to false in the final response returned as this is a error scenario where we see the invalid Sku.
            response.ok = false;
            response = addPropertiesToResponseObject(response, errorMessages, invalidSkuIds);
            //exitLoopOnValidSkuLeft = false will break the loop.
            exitLoopOnValidSkuLeft = true;
          }

          return response;
        }
      } else {
        /**
         * Handling cases where skuIds passed in payload are all invalid, which after filtering leaves an empty array.
         */
        if (errorMessages.length > 0) {
          response = addPropertiesToResponseObject(response, errorMessages, invalidSkuIds);

          return response;
        }

        return response;
      }
    }
  } else {
    response = yield endpointSaga({...action, endpointId: 'listSkus'});
  }

  return response;
}

export default {
  *saga() {
    yield all([
      takeLeading('addProductNotification', endpointSaga),
      takeEvery('getProduct', endpointSaga),
      takeEvery('getProductType', endpointSaga),
      takeEvery('getProductsPrices', endpointSaga),
      takeEvery('getSkusPrices', endpointSaga),
      takeEvery('getStockStatus', endpointSaga),
      takeEvery('listProductTypes', endpointSaga),
      takeEvery('listSkus', listSkusSaga),
      takeEvery('listProducts', endpointSaga),
      takeLeading('moreProducts', endpointSaga)
    ]);
  }
};
