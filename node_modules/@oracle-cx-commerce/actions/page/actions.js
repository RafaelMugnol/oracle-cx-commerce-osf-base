/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {select} from 'redux-saga/effects';
import {createReducer, endpointSaga, takeLatest} from '@oracle-cx-commerce/store/utils';
import {getCurrentPageId, getPage, getPages, getGlobalContext} from '@oracle-cx-commerce/commerce-utils/selector';
import {getPageId} from '@oracle-cx-commerce/utils/isomorphic';

/**
 *
 * @param {*} state
 * @param {*} action
 */
export function showApplicationPageReducer(state, action) {
  const {baseURI} = getGlobalContext(state);

  const pageId = getPageId(action.payload.url, baseURI);

  const pages = getPages(state);

  if (Object.prototype.hasOwnProperty.call(pages, pageId)) {
    const cachedPage = pages[pageId];

    if (cachedPage.isCacheable) {
      const {clientRepository = {}} = state;

      const {context = {}} = clientRepository;

      return {
        ...state,
        clientRepository: {
          ...clientRepository,
          context: {
            ...context,
            request: {
              ...context.request,
              page: pageId,
              productId: cachedPage.contextId,
              search:
                // Clear (stale) search context when not search/category page
                cachedPage.pageType !== 'category' && cachedPage.pageType !== 'search' ? null : context.request.search
            }
          }
        }
      };
    }
  }

  return state;
}

/**
 *
 * @param {*} action
 */
export function* getApplicationPageSaga(action) {
  const {payload} = action;

  const {baseURI} = yield select(getGlobalContext);

  const currentPageId = yield select(getCurrentPageId);

  const currentPage = yield select(getPage);

  const newPageId = getPageId(payload.url, baseURI);

  const isPageAlreadyLoaded = currentPageId === newPageId;

  if (!isPageAlreadyLoaded || !currentPage.isCacheable) {
    return yield endpointSaga({...action});
  }
}

/**
 * Load the next page layout into the Store.
 *
 * NB: The Actions don't handle page navigation link clicks or `popstate` events, that
 * is the responsiblity of the UI layer.
 */
export default {
  /**
   * Display a page if it has already loaded into the state and is `cacheable`.
   *
   * NB: An example of a non-cacheable page would be, a secured page such `profile`,
   * or an error page such as `404`.
   */
  reducer: createReducer({
    getApplicationPage: showApplicationPageReducer
  }),

  /**
   */
  *saga() {
    yield takeLatest('getApplicationPage', getApplicationPageSaga);
  }
};
