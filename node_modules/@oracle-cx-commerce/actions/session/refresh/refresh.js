/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {all, put} from 'redux-saga/effects';
import {combineReducers, createReducer, endpointSaga, takeLeading} from '@oracle-cx-commerce/store/utils';
import {
  expireOrderReducer,
  expireProfileReducer,
  expirePurchaseListReducer,
  expireReturnReducer,
  unauthorizedReducer
} from '@oracle-cx-commerce/actions/session/actions';

const UNAUTHORIZED = '401';

/*
  Sagas
 */
export function* refreshSaga(action) {
  const response = yield endpointSaga({...action, endpointId: 'refresh'});

  if (!response.ok) {
    yield put({type: UNAUTHORIZED});
  }

  return response;
}

export default {
  reducer: combineReducers({
    orderRepository: createReducer({[UNAUTHORIZED]: expireOrderReducer}),
    profileRepository: createReducer({[UNAUTHORIZED]: expireProfileReducer}),
    purchaseListRepository: createReducer({[UNAUTHORIZED]: expirePurchaseListReducer}),
    clientRepository: combineReducers({
      context: combineReducers({
        session: createReducer({
          [UNAUTHORIZED]: unauthorizedReducer
        })
      })
    }),
    csrRepository: createReducer({[UNAUTHORIZED]: expireReturnReducer})
  }),

  *saga() {
    yield all([takeLeading('refresh', refreshSaga)]);
  }
};
