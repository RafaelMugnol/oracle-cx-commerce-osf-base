/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {all, put} from 'redux-saga/effects';
import {combineReducers, createReducer, endpointSaga, takeLeading} from '@oracle-cx-commerce/store/utils';

const UNAUTHORIZED = '401';

/*TODO : For Now these variables are in local, as session handling is the one use case that needs timestamp values.
         These variables might be moved to state, when the other use cases are in place. */

/*
  Reducers
 */

const unauthorizedReducer = ({rememberMe = null}) => ({rememberMe});

const expireOrderReducer = state => ({
  ...state,
  orders: {},
  shippingMethods: {}
});

const expireProfileReducer = (state, {profiles = {}}) => {
  let newState = {
    ...state,
    profiles: {anonymous: profiles.anonymous},
    secondaryAddresses: {},
    savedCards: {}
  };
  if (state.organizations) newState = {...newState, organizations: {}};
  if (state.roles) newState = {...newState, roles: {}};
  if (state.contactRequests) newState = {...newState, contactRequests: {}};
  if (state.contactInfos) newState = {...newState, contactInfos: {}};
  if (state.siteProperties) newState = {...newState, siteProperties: {}};

  return newState;
};

const expireReturnReducer = state => ({
  ...state,
  returns: {}
});
const expirePurchaseListReducer = state => {
  let newState = {...state};
  if (state.purchaseLists) newState = {...newState, purchaseLists: {}};

  return newState;
};
/*
  Sagas
 */
export function* refreshSaga(action) {
  const response = yield endpointSaga({...action, endpointId: 'refresh'});

  if (!response.ok) {
    yield put({type: UNAUTHORIZED});
  }

  return response;
}

export default {
  reducer: combineReducers({
    orderRepository: createReducer({[UNAUTHORIZED]: expireOrderReducer}),
    profileRepository: createReducer({[UNAUTHORIZED]: expireProfileReducer}),
    purchaseListRepository: createReducer({[UNAUTHORIZED]: expirePurchaseListReducer}),
    clientRepository: combineReducers({
      context: combineReducers({
        session: createReducer({
          [UNAUTHORIZED]: unauthorizedReducer
        })
      })
    }),
    csrRepository: createReducer({[UNAUTHORIZED]: expireReturnReducer})
  }),

  *saga() {
    yield all([takeLeading('refresh', refreshSaga)]);
  }
};
