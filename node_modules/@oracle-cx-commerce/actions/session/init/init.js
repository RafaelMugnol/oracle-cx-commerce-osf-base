/*
 ** Copyright (c) 2022 Oracle and/or its affiliates.
 */

import {select, spawn} from 'redux-saga/effects';
import {chain, endpointSaga, takeOnce} from '@oracle-cx-commerce/store/utils';
import {
  getRelayState,
  getSessionContext,
  hasSAMLResponse,
  isAuthenticated
} from '@oracle-cx-commerce/commerce-utils/selector';
import {loginSaga, registerEndpointsInvokedTime} from '../login/login';

export function* initSaga(action) {
  yield spawn(registerEndpointsInvokedTime);

  const state = yield select();

  if (isAuthenticated(state)) {
    const response = yield chain({...action, type: 'refresh'});

    if (response.ok === true) {
      for (const response of yield chain({...action, type: 'initAuthenticated'})) {
        if (response.ok === false) {
          return response;
        }
      }
    }

    return response;
  }

  if (hasSAMLResponse(state)) {
    const relayState = getRelayState(state);

    const payload = {
      grantType: 'saml_credentials',
      samlResponse: getSessionContext(state).samlResponse,
      relayState
    };

    return yield loginSaga({...action, endpointId: 'login', payload});
  }

  yield endpointSaga({...action, endpointId: 'getCart'});
}

export default {
  *saga() {
    yield takeOnce('init', initSaga);
  }
};
