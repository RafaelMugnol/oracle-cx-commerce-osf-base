/*
 ** Copyright (c) 2022 Oracle and/or its affiliates.
 */

import * as internalResourceBundle from '@oracle-cx-commerce/resources';
import {buildResources, buildConfigResources} from '../utils';

const enResources = {
  specificLocaleExample: 'some english text',
  nonUsedLocale: 'some random text'
};

const deResources = {
  specificLocaleExample: '[de]some english text[de]',
  nonUsedLocale: '[de]some random text[de]'
};

const ptBrResources = {
  specificLocaleExample: '[pt-BR]some english text[pt-BR]',
  nonUsedLocale: '[pt-BR]some random text[pt-BR]'
};

describe('buildResources:all', () => {
  test('buildResources:providing-internal-resources - passing existing resources to build resources', async () => {
    const resourceKeys = ['alertLoginSuccessful'];
    const expectedBuiltResources = {
      en: {
        alertLoginSuccessful: 'Log In Successful'
      },
      'pt-BR': {
        alertLoginSuccessful: 'Log-in Bem-sucedido'
      }
    };

    const buildResourcesResult = buildResources(internalResourceBundle, resourceKeys);
    expect(buildResourcesResult).toMatchObject(expectedBuiltResources);
  });

  test('buildResources:providing-internal-resources - passing non-existing key to build resources', async () => {
    const resourceKeys = ['nonExistingLocaleKey'];
    const expectedBuiltResources = {
      en: {
        nonExistingLocaleKey: 'en-nonExistingLocaleKey'
      },
      'pt-BR': {
        nonExistingLocaleKey: 'pt_BR-nonExistingLocaleKey'
      }
    };

    const buildResourcesResult = buildResources(internalResourceBundle, resourceKeys);
    expect(buildResourcesResult).toMatchObject(expectedBuiltResources);
  });

  test('buildResources:providing-app-resources - passing existing resources to build resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      'pt-BR': ptBrResources
    };

    const resourceKeys = ['specificLocaleExample'];
    const buildResourcesResult = buildResources(combinedResources, resourceKeys);
    expect(buildResourcesResult).toMatchObject({
      en: {specificLocaleExample: 'some english text'},
      de: {specificLocaleExample: '[de]some english text[de]'},
      'pt-BR': {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}
    });

    expect(buildResourcesResult).toEqual({
      en: {specificLocaleExample: 'some english text'},
      de: {specificLocaleExample: '[de]some english text[de]'},
      'pt-BR': {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}
    });

    expect(buildResourcesResult).not.toEqual(combinedResources); // make sure non-specified locale keys are being removed
  });

  test('buildResources:providing-internal-resources - passing resource keys that are available in internal resources bundle and not in app resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      // eslint-disable-next-line camelcase
      pt_BR: ptBrResources
    };

    const resourceKeys = ['specificLocaleExample', 'alertLoginSuccessful'];

    const buildResourcesResult = buildResources(combinedResources, resourceKeys);
    expect(buildResourcesResult).toMatchObject({
      en: {specificLocaleExample: 'some english text'},
      de: {specificLocaleExample: '[de]some english text[de]'},
      'pt-BR': {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}
    });

    const expectedResourcesFromInternalBundle = {
      en: {
        alertLoginSuccessful: 'Log In Successful'
      },
      'pt-BR': {
        alertLoginSuccessful: 'Log-in Bem-sucedido'
      }
    };
    expect(buildResourcesResult).toMatchObject(expectedResourcesFromInternalBundle);

    const expectedCombinedResources = {
      en: {
        alertLoginSuccessful: 'Log In Successful',
        specificLocaleExample: 'some english text'
      },
      de: {
        alertLoginSuccessful: 'Anmeldung erfolgreich',
        specificLocaleExample: '[de]some english text[de]'
      },
      'pt-BR': {
        alertLoginSuccessful: 'Log-in Bem-sucedido',
        specificLocaleExample: '[pt-BR]some english text[pt-BR]'
      }
    };
    expect(buildResourcesResult).toEqual(expectedCombinedResources);
  });

  test('buildResources:providing-internal-resource - passing non-existing (both app-wide and interal resources) to build resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      // eslint-disable-next-line camelcase
      pt_BR: ptBrResources
    };

    const resourceKeys = ['nonExistingLocaleKey'];
    const buildResourcesResult = buildResources(combinedResources, resourceKeys);

    // test the non-specified resource keys are being filtered out
    expect(buildResourcesResult).not.toMatchObject({
      en: {specificLocaleExample: 'some english text'}
    });

    expect(buildResourcesResult).toMatchObject({
      en: {nonExistingLocaleKey: 'en-nonExistingLocaleKey'}
    });

    expect(buildResourcesResult).toEqual({
      en: {nonExistingLocaleKey: 'en-nonExistingLocaleKey'},
      de: {nonExistingLocaleKey: 'de-nonExistingLocaleKey'},
      'pt-BR': {nonExistingLocaleKey: 'pt_BR-nonExistingLocaleKey'}
    });
  });
});

describe('buildConfigResources:all', () => {
  test('buildConfigResources:providing-internal-resources - passing existing resources to build resources', async () => {
    const resourceKeys = ['alertLoginSuccessful'];
    const expectedBuiltResources = {
      en: {
        resources: {
          alertLoginSuccessful: 'Log In Successful'
        }
      },
      'pt-BR': {
        resources: {
          alertLoginSuccessful: 'Log-in Bem-sucedido'
        }
      }
    };

    const buildConfigResourcesResult = buildConfigResources(internalResourceBundle, resourceKeys);
    expect(buildConfigResourcesResult).toMatchObject(expectedBuiltResources);
  });

  test('buildConfigResources:providing-internal-resources - passing non-existing key to build resources', async () => {
    const resourceKeys = ['nonExistingLocaleKey'];
    const expectedBuiltResources = {
      en: {
        resources: {
          nonExistingLocaleKey: 'en-nonExistingLocaleKey'
        }
      },
      'pt-BR': {
        resources: {
          nonExistingLocaleKey: 'pt_BR-nonExistingLocaleKey'
        }
      }
    };

    const buildConfigResourcesResult = buildConfigResources(internalResourceBundle, resourceKeys);
    expect(buildConfigResourcesResult).toMatchObject(expectedBuiltResources);
  });

  test('buildConfigResources:providing-app-resources - passing existing resources to build resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      'pt-BR': ptBrResources
    };

    const resourceKeys = ['specificLocaleExample'];
    const buildConfigResourcesResult = buildConfigResources(combinedResources, resourceKeys);
    expect(buildConfigResourcesResult).toMatchObject({
      en: {resources: {specificLocaleExample: 'some english text'}},
      de: {resources: {specificLocaleExample: '[de]some english text[de]'}},
      'pt-BR': {resources: {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}}
    });

    expect(buildConfigResourcesResult).toEqual({
      en: {resources: {specificLocaleExample: 'some english text'}},
      de: {resources: {specificLocaleExample: '[de]some english text[de]'}},
      'pt-BR': {resources: {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}}
    });

    const combinedConfigResources = {
      en: {resources: enResources},
      de: {resources: deResources},
      'pt-BR': {resources: ptBrResources}
    };
    expect(buildConfigResourcesResult).not.toEqual(combinedConfigResources); // make sure non-specified locale keys are being removed
  });

  test('buildConfigResources:providing-internal-resources - passing resource keys that are available in internal resources bundle and not in app resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      // eslint-disable-next-line camelcase
      pt_BR: ptBrResources
    };

    const resourceKeys = ['specificLocaleExample', 'alertLoginSuccessful'];

    const buildConfigResourcesResult = buildConfigResources(combinedResources, resourceKeys);
    expect(buildConfigResourcesResult).toMatchObject({
      en: {resources: {specificLocaleExample: 'some english text'}},
      de: {resources: {specificLocaleExample: '[de]some english text[de]'}},
      'pt-BR': {resources: {specificLocaleExample: '[pt-BR]some english text[pt-BR]'}}
    });

    const expectedResourcesFromInternalBundle = {
      en: {
        resources: {
          alertLoginSuccessful: 'Log In Successful'
        }
      },
      'pt-BR': {
        resources: {
          alertLoginSuccessful: 'Log-in Bem-sucedido'
        }
      }
    };
    expect(buildConfigResourcesResult).toMatchObject(expectedResourcesFromInternalBundle);

    const expectedCombinedResources = {
      en: {
        resources: {
          alertLoginSuccessful: 'Log In Successful',
          specificLocaleExample: 'some english text'
        }
      },
      de: {
        resources: {
          alertLoginSuccessful: 'Anmeldung erfolgreich',
          specificLocaleExample: '[de]some english text[de]'
        }
      },
      'pt-BR': {
        resources: {
          alertLoginSuccessful: 'Log-in Bem-sucedido',
          specificLocaleExample: '[pt-BR]some english text[pt-BR]'
        }
      }
    };
    expect(buildConfigResourcesResult).toEqual(expectedCombinedResources);
  });

  test('buildConfigResources:providing-internal-resource - passing non-existing (both app-wide and interal resources) to build resources', async () => {
    const combinedResources = {
      en: enResources,
      de: deResources,
      // eslint-disable-next-line camelcase
      pt_BR: ptBrResources
    };

    const resourceKeys = ['nonExistingLocaleKey'];
    const buildConfigResourcesResult = buildConfigResources(combinedResources, resourceKeys);

    // test the non-specified resource keys are being filtered out
    expect(buildConfigResourcesResult).not.toMatchObject({
      en: {resources: {specificLocaleExample: 'some english text'}}
    });

    expect(buildConfigResourcesResult).toMatchObject({
      en: {resources: {nonExistingLocaleKey: 'en-nonExistingLocaleKey'}}
    });

    expect(buildConfigResourcesResult).toEqual({
      en: {resources: {nonExistingLocaleKey: 'en-nonExistingLocaleKey'}},
      de: {resources: {nonExistingLocaleKey: 'de-nonExistingLocaleKey'}},
      'pt-BR': {resources: {nonExistingLocaleKey: 'pt_BR-nonExistingLocaleKey'}}
    });
  });
});
