/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {PopStackError} = require('@oracle-cx-commerce/tools-util/errors');

/**
 * Mocks the `global.console` object so it does not produce an output to the terminal.
 *
 * Syntax:
 *     mockConsole();
 *     // e.g., mockConsole(); ... unmockConsole();
 *
 *     mockConsole(<list-of-console-functions-to-mock>);
 *     // e.g., mockConsole(['log', 'error', 'warn']);
 *
 *     mockConsole(
 *       <function-with-test-code>
 *     );
 *     // e.g., mockConsole(() => { expect(1).toBe(true); });
 *
 *     mockConsole(
 *       <list-of-console-functions-to-mock>,
 *       <function-with-test-code>
 *     );
 *     // e.g., mockConsole(['log', 'error', 'warn'], () => { expect(1).toBe(true); });
 *
 * Usage:
 * - As a wrapper
 *     test('something', async () => {
 *       await mockConsole(async () => {
 *         // Test code.
 *       });
 *     });
 *
 * - As start/stop markers
 *     test('something', async () => {
 *       mockConsole();
 *       // Test code.
 *       unmockConsole();
 *     });
 *
 * You can check the calls to `global.console` methods using the Jest's mock functions,
 * e.g., the `global.console.log.mock` object. For example,
 *     test('something', async () => {
 *       await mockConsole(async () => {
 *         // Test code.
 *
 *         expect(global.console.log).toHaveBeenCalled();
 *         expect(removeAnsiCsiSequenceCodes(global.console.log.mock.calls[0][0])).toBe(
 *           "[storeui] error: The basic auth failed, again. "
 *         );
 *       });
 *     });
 *
 * @param      {[string]}    [methods=['log']]  The list of methods to mock and silence ('log', 'error', 'debug', 'info', 'warn', ...).
 * @param      {function}    [code]             The code to execute for which the console output has been suppressed.
 * @return     {Promise}     An empty Promise.
 */
async function mockConsole(...parameters) {
  let methods = ['log'];
  let code;
  if (parameters.length === 2) {
    if (!Array.isArray(parameters[0])) {
      throw new PopStackError(`Type of first argument ('${typeof parameters[0]}') is not 'Array'`);
    }
    if (typeof parameters[1] !== 'function') {
      throw new PopStackError(`Type of second argument ('${typeof parameters[1]}') is not 'function'`);
    }
    [methods, code] = parameters;
  } else if (parameters.length === 1) {
    if (Array.isArray(parameters[0])) {
      [methods] = parameters;
    } else if (typeof parameters[0] === 'function') {
      [code] = parameters;
    } else {
      throw new PopStackError(`Invalid argument type '${typeof parameters[0]}'`);
    }
  } else if (parameters.length > 2) {
    throw new PopStackError('Unexpected number of arguments.');
  }
  if (methods.length === 0) {
    throw new PopStackError('List of methods to mock is empty.');
  }
  if (global.consoleBackup) {
    throw new PopStackError('Console is already mocked.');
  }

  global.consoleBackup = global.console;
  const mockedConsole = Object.assign({}, global.consoleBackup);
  // Remove 'stdout' and 'stderr', otherwise it won't work for some unknown reason.
  delete mockedConsole['_stdout'];
  delete mockedConsole['_stderr'];
  methods.forEach(method => {
    mockedConsole[method] = jest.fn();
  });

  global.console = mockedConsole;

  if (typeof code === 'function') {
    try {
      await code();
    } finally {
      global.console = global.consoleBackup;
      delete global.consoleBackup;
    }
  }
}

/**
 * Restores the `global.console` object if it was mocked before.
 */
function unmockConsole() {
  if (!global.consoleBackup) {
    throw new PopStackError('Console has not been mocked.');
  }

  global.console = global.consoleBackup;
  delete global.consoleBackup;
}

/**
 * Removes control elements from text generated by the command-line tools.
 *
 * These elements are known as ANSI Control Sequence Introducer (CSI) sequence codes.
 * E.g., the `ESC[31m` control character indicates the red color.
 *
 * @param      {string}  text    The text
 * @return     {string}          The text without control characters.
 */
function removeAnsiCsiSequenceCodes(text) {
  /* eslint-disable-next-line no-control-regex */
  return text.replace(/\x1B\[[0-9;]+[A-Za-z]/g, '');
}

export {mockConsole, removeAnsiCsiSequenceCodes, unmockConsole};
