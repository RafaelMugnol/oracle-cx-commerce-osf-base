/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

// TODO: should this be `createExpressMocks(frontendUrl, appServerUrl, options)` ??
export const createExpressMocks = (frontendPage, appServerUrl, options = {}) => {
  const {host} = new URL(appServerUrl);
  const dummy = new URL(frontendPage, appServerUrl);
  const {pathname} = dummy;
  const {baseUrl = ''} = options; // base path on with express routing is mounted

  const defaultHeaders = {
    // Generic Http(s) Headers
    Host: host,
    'Content-Type': 'application/json',
    Accept: 'text/html,application/xhtml+xml,application/xml,application/json,text/javascript,*/*;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    Connection: 'keep-alive',
    Pragma: 'no-cache',
    'Cache-Control': 'no-cache'
    // Oracle commerce Specific
    // 'x-occ-sf-layout-mode': 'remote'
  };

  const defaultApp = {
    locals: {}
  };

  const defaultNext = error => {
    if (error) {
      throw error;
    }
  };

  let requestHeaders = {...defaultHeaders};
  let responseHeaders = {};

  const defaultReq = {
    protocol: 'http',
    params: [pathname], //FIXME: path without query params
    originalUrl: frontendPage, //express specific, complete path for url including `/baseUrl/routePath?query=params#hash`
    baseUrl, // assumes app routing is mounted to root context
    path: pathname, // FIXME: path without query params
    url: frontendPage, // Should this be entire url?
    headers: requestHeaders,
    rawHeaders: ['Accept', 'text/html,application/xhtml+xml,application/xml,application/json,text/javascript,*/*'].push(
      'Host',
      host
    ),
    query: {} // fix in future?
  };

  const defaultRes = {
    locals: {
      browserCapabilities: new Set()
    },
    headers: responseHeaders,
    status: () => {},
    set: () => {},
    cookie: () => {},
    send: () => {},
    append: () => {}
  };

  const {
    mockApp = defaultApp, // default req.app and res.app placeholder
    // mockReq = {}, // TODO: should we just take the delta and merge others from defaults?
    // mockRes = {}, // TODO: should we just take the delta and merge others from defaults?
    mockNext = defaultNext, // custom next express next callback
    reqHeaders = {}, //extra headers to be merged to existing default request headers
    resHeaders = {} //extra headers to be merged to existing default response headers
  } = options;

  const mockReq = {
    ...defaultReq,
    ...(options.mockReq || {})
  };
  const mockRes = {
    ...defaultRes,
    ...(options.mockRes || {})
  };

  mockReq.app = mockApp;
  mockRes.app = mockApp;

  requestHeaders = {...defaultHeaders, ...reqHeaders};
  responseHeaders = {...resHeaders};

  const mockResGet = key => responseHeaders[key];
  mockRes.get = mockResGet;

  // below version for Marcus since they might not use `Wiremock` and specific Cookies?
  // const mockReqGet = key => requestHeaders[key];

  // FIXME: this does not seem correct for Marcus OOTB how could we deal with this?
  const mockReqGet = key => {
    if (key.toLowerCase() === 'cookie') {
      const [apiCookieKey = '', apiCookieValue = ''] =
        window.document.cookie &&
        window.document.cookie.length > 0 &&
        window.document.cookie.split(';').find(cookie => cookie.trim().startsWith('xd5dbd2e4a_siteUS'))
          ? window.document.cookie
              .split(';')
              .find(cookie => cookie.trim().startsWith('xd5dbd2e4a_siteUS'))
              .split('=')
          : ['', ''];

      return apiCookieKey
        ? `${apiCookieKey}=${apiCookieValue.split('%3A')[0]}`
        : requestHeaders[requestHeaders[key] ? key : key.toLowerCase()];
    }

    return requestHeaders[key];
  };
  mockReq.get = mockReqGet;
  mockReq.headers = requestHeaders;

  return {
    app: mockApp,
    req: mockReq,
    res: mockRes,
    next: mockNext
  };
};
