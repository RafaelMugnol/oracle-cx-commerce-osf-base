/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {log} from '@oracle-cx-commerce/test/api';
import appMiddleware from '@oracle-cx-commerce/react-app/server/middleware/app';

export default async function initialState(storeOptions = {}, wsOptions = {}) {
  try {
    log.verbose(`Fetching initial State.... ${storeOptions.appName}`);
    const {app, req, res, next} = storeOptions;
    Object.assign(app.locals, {
      components: {...storeOptions.plugins.components},
      endpoints: storeOptions.plugins.endpoints,
      meta: storeOptions.pluginsMeta,
      options: wsOptions
    });

    try {
      const {serveApp} = await appMiddleware(app);
      await serveApp(req, res, next);
      const {state} = res.locals;
      state.global = {};

      return state;
    } catch (err) {
      // FIXME: Not a cleaner way to get initial State, can we do something about this
      log.verbose(`swallowing error from app middleware temporarily.`);
      const {state} = res.locals;
      state.global = {};

      return state;
    }
  } catch (error) {
    log.error(`Failed to load state information from backend server. ${JSON.stringify(error)}`);

    throw error;
  }
}
