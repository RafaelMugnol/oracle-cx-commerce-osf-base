/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {log} from '@oracle-cx-commerce/test/api';

const callerCallsite = require('caller-callsite');
const fs = require('fs');
const path = require('path');

/**
 * checks if the file exists in provided path, requires the file and returns the module
 *
 * @param absFilePath
 * @returns {*}
 */
const readTestData = absFilePath => {
  if (fs.existsSync(absFilePath)) {
    log.verbose('testdata path %s', absFilePath);
    try {
      const data = require(absFilePath);

      return data;
    } catch (e) {
      log.error('failed to require module', e);
      throw new Error('failed to read test data module');
    }
  } else {
    console.error('Missing Data file for test case at location', absFilePath);
    throw new Error(`Test Data file does not exist ${absFilePath}`);
  }
};

/**
 * reads test Data file under <WORKSPACE_ROOT>/qa/testdata/<catalog>/{filePath}.js and provides as an object
 *
 * @param filePath - relative path from <catalog>/ to read the file,
 *                 - if not provided/undefined, will make best effort to find test data in parallel structure with similar naming convention
 * @returns {*}
 */
export default function (filePath) {
  // Read the Workspace root under which 'qa' folder is available
  let root = process.env.WORKSPACE_ROOT || process.cwd();
  const catalog = process.env.CATALOG || 'cloudlake';

  if (root === undefined) {
    console.error('WORKSPACE_ROOT env variable not set, set it to the root of FF WORKSPACE...');
    log.verbose('trying to fall back to process.cwd : %s', process.cwd());
    root = process.cwd();
    // Check for presence qa folder in root directory
    if (!fs.existsSync(path.join(root, 'qa', 'testdata', catalog))) {
      console.error(
        'Can not check for presence of qa/testdata/`{catalog}` folder structure presence in root dir, Check your project setup'
      );
      throw new Error('Aborting, Invalid test configuration... ');
    }
  }

  const testFilePath = callerCallsite().getFileName();
  const testFileObj = path.parse(testFilePath);
  let testDatafile;
  if (filePath) {
    // user knows relative path of the file he is trying to read
    // file mentioned by user does not have extension
    if (!filePath.endsWith('.js')) {
      filePath = `${filePath}.js`; // append js file extension to the file path passed
    }
    testDatafile = path.join(root, 'qa', 'testdata', catalog, filePath);

    return readTestData(testDatafile);
  }

  // user has not passed any specific file name to read
  // try to compute the file name from test case name.
  const testFileName = testFileObj.base; // Get test file Name
  // assume <subfeature>.data.js as file naming conventions
  const testDataFileName = testFileName.replace('.spec.', '.data.');

  // Get the relative path structure to find the test data file
  // assumption is file will have similar source folder structure as tests
  const dirs = testFileObj.dir.split(path.sep);
  let relPath = '';
  if (dirs.lastIndexOf('test') !== -1) {
    relPath = dirs.slice(dirs.lastIndexOf('test') + 1, dirs.length).reduce((accumulator, currenVal) => {
      return accumulator + currenVal + path.sep;
    }, '');
  }
  const testDataFolder = path.join(root, 'qa', 'testdata', catalog, relPath);
  testDatafile = path.join(testDataFolder, testDataFileName);

  return readTestData(testDatafile);
}
