/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import * as store from '@oracle-cx-commerce/store';
import * as wapi from '@oracle-cx-commerce/wapi';

import {createBasicAuthFetch, createTerminalLogger, initialState, log, readConfig} from '@oracle-cx-commerce/test/api';

import {createExpressMocks} from '@oracle-cx-commerce/test/api/express-mocks';
import {isObject} from '@oracle-cx-commerce/utils/generic';
import {updateState} from '@oracle-cx-commerce/utils/store';

const fs = require('fs');
const path = require('path');
const {resolveBoolean} = require('@oracle-cx-commerce/tools-util');

console.warn = (...args) => log.warn.call(log, ...args);
console.error = (...args) => log.error.call(log, ...args);
console.debug = (...args) => log.debug.call(log, ...args);

const defaultOpts = {
  appName: process.env.OCC_APP_NAME || 'jsapi-test',
  frontendPage: '/'
};

/**
 *
 * @param {Object} opts Options to initialize Redux store
 * @param {string} opts.appName appName used to initialize the store on, Defaults to `process.env.OCC_APP_NAME || 'jsapi-test'`
 * @param {string} opts.frontendPage page to load from server/local layouts to trigger the fetchers and form initial State for the store. defaults to '/'
 * @param {Object} opts.basicAuth basic authentication credentials to connect to store server to fetch layout and other data.
 * @param {string} opts.basicAuth.username defaults to admin if Initial page call throws a 401 unauthorized
 * @param {string} opts.basicAuth.password defaults to admin if Initial page call throws a 401 unauthorized
 * @param {Object} opts.headers custom headers to inject to requests sent by the underlying fetch implementation defaults to {}
 * @param {Object} opts.additionalState additional State used to start the store creation and Initial state would be merged to this, defaults to {}.
 *
 * @example
 * ```
 * import {configureStore} from '@oracle-cx-commerce/test/api';
 * const store = await configureStore({
 *       appName: 'core-commerce-referece-store',
 *       frontendPage: '/',
 *       basicAuth: {username: 'admin', password: 'admin'},
 *       headers: {'X-osf-testcaseid': 'loginVisitorId'}
 *     });
 * ```
 */
export default async (opts = {}) => {
  const appName = opts.appName || defaultOpts.appName;
  const frontendPage = opts.frontendPage || defaultOpts.frontendPage;

  const wsOptions = readConfig(appName, {});
  if (!wsOptions.live) {
    console.error(
      `JS API tests can be run against live server only. \n\t1. Set 'live:true' in your config\n\t2. set/export OCC_LIVE=true in terminal\n`
    );
    // sleep for a second to process logs and console.
    await new Promise(resolve => setTimeout(resolve, 1000));
    process.exit(1);
  }
  wsOptions.appServerURL = wsOptions.live ? wsOptions.appServer : wsOptions.appServerAdmin;

  const storeOptions = {...opts, ...createExpressMocks(frontendPage, wsOptions.appServerURL, {...opts})};
  const verbose = resolveBoolean(process.env.OCC_VERBOSE) || wsOptions.verbose || false;

  log.verbose('Started store creation');
  let {__dirname} = wsOptions;

  if (!__dirname) {
    let __appDir = wsOptions.appDir;
    if (__appDir) {
      __dirname = `${process.cwd()}/${__appDir}`;
    }
    // prefer env var over ws options?
    __appDir = process.env.OCC_APP_DIR;
    if (__appDir) {
      __dirname = `${process.cwd()}/${__appDir}`;
    }
  }

  if (!__dirname && !fs.existsSync(__dirname) && !fs.statSync(__dirname).isDirectory()) {
    throw new Error(`Check your environment/workspace configuration. Can not find ${__dirname}`);
  }

  const pkg = require(`${__dirname}/package.json`);
  // use this standard convention to tell the list of exports from app
  // till https://nodejs.org/api/esm.html#esm_package_exports is formalized and released
  const {
    occ: {plugins: appPlugins}
  } = pkg;
  log.verbose(`appPlugins ${JSON.stringify(appPlugins)}`);
  if (
    !appPlugins ||
    !appPlugins.actions ||
    !appPlugins.components ||
    !appPlugins.endpoints ||
    !appPlugins.subscribers
  ) {
    throw new Error(`can not find exports properly configured in ${__dirname}/package.json`);
  }

  //  FIXME: not standard package.json module exports key :(
  // Changed required from jest side too - https://github.com/facebook/jest/issues/9430
  const actions = await import(path.join(__dirname, appPlugins.actions, 'index.js'));
  const actionsMeta = await import(path.join(__dirname, appPlugins.actions, 'meta.js'));
  const components = await import(path.join(__dirname, appPlugins.components, 'index.js'));
  const componentsMeta = await import(path.join(__dirname, appPlugins.components, 'meta.js'));
  const endpoints = await import(path.join(__dirname, appPlugins.endpoints, 'index.js'));
  const endpointsMeta = await import(path.join(__dirname, appPlugins.endpoints, 'meta.js'));
  const subscribers = await import(path.join(__dirname, appPlugins.subscribers, 'index.js'));
  const subscribersMeta = await import(path.join(__dirname, appPlugins.subscribers, 'meta.js'));

  storeOptions.plugins = {
    actions,
    components,
    endpoints,
    subscribers
  };
  storeOptions.pluginsMeta = {
    actions: actionsMeta,
    components: componentsMeta,
    endpoints: endpointsMeta,
    subscribers: subscribersMeta
  };
  const fetch = createBasicAuthFetch(opts.basicAuth, opts.headers); // opts.basicAuth ? createApiFetch(opts.basicAuth) : require('@oracle-cx-commerce/http-client');
  global.fetch = fetch; // createApiFetch('admin', 'admin');
  storeOptions.app.locals.fetch = fetch; // createApiFetch('admin', 'admin'); // createCachingFetch(storeOptions.app) ?
  storeOptions.app.locals.options = wsOptions;
  storeOptions.app.locals.location = new URL(wsOptions.appServer);
  storeOptions.app.locals.packageJson = pkg;
  storeOptions.app.isApiTest = true;

  let initState = await initialState(storeOptions, wsOptions);
  //this is needed for sso tests where samlResponse needs to be populated to initial state.
  if (isObject(opts.additionalState) && Object.keys(opts.additionalState).length > 0) {
    initState = updateState(initState, opts.additionalState);
  }

  const reduxStore = store.createStore({
    actions,
    state: initState,
    wapi: wapi.createWapi({endpoints, state: initState}),
    middleware: verbose ? [createTerminalLogger(appName)] : []
  });

  log.verbose('store creation successful');

  return reduxStore;
};
