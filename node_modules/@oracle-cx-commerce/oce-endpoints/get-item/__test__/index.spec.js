/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {createDummyErrorResponse} from '@oracle-cx-commerce/test/unit';
import {getCurrentPageId} from '@oracle-cx-commerce/commerce-utils/selector';
import {processInput, processOutput} from '../index';

describe('OCE get-item test', () => {
  const mockAccessToken = 'mockAccessToken';
  const mockItemId = 'mockContentItemId';
  const mockState = {
    clientRepository: {
      context: {
        global: {
          locale: 'en',
          site: 'siteUS'
        },
        request: {
          page: 'test'
        }
      }
    },
    configRepository: {
      endpoints: {}
    },
    siteRepository: {
      sites: {
        siteUS: {
          id: 'siteUS',
          siteSettings: {
            ContentSettings: {
              content: {
                accessToken: mockAccessToken,
                cecCredentials: {
                  password: 'password',
                  username: 'username'
                }
              }
            },
            ContentSettingsURL: {
              url: 'https://ocead2v17srvc10-cecqalondonglobalacc.cec.ocp.oc-test.com/'
            }
          }
        }
      }
    }
  };
  const mockRichTextItem = require('@oracle-cx-commerce/oce-endpoints/get-item/__test__/mockRichtextItem.json');

  const mockRichTextState = {
    ...mockState,
    contentRepository: {
      contentItems: {
        mockItemId: mockRichTextItem
      }
    },
    pageRepository: {
      pages: {
        test: {
          'contentWidget-12345678': {
            mockItemId: 0
          }
        }
      }
    }
  };

  const mockRichTextAsset = require('@oracle-cx-commerce/oce-endpoints/get-item/__test__/mockRichTextAsset.json');

  const mockRichTextResponse = {
    ok: true,
    redirected: false,
    status: 200,
    statusText: 'OK',
    type: 'GET',
    json: () => mockRichTextAsset
  };

  const mockPayload = {
    pageId: getCurrentPageId(mockState),
    widgetId: 12345678
  };
  const mockProductAwarePayload = {
    productAware: true,
    query: `?q=(type eq "testAssetType" AND fields.title eq "testProductId" AND language co "en")`,
    ...mockPayload
  };
  const mockContentItem = require('@oracle-cx-commerce/oce-endpoints/get-item/__test__/mockContentItem.json');
  const mockValidItemResponse = {
    ok: true,
    redirected: false,
    status: 200,
    statusText: 'OK',
    type: 'GET',
    json: () => mockContentItem
  };
  const mockProdAwareContentItem = require('@oracle-cx-commerce/oce-endpoints/get-item/__test__/mockProdAwareContentItem.json');
  test('processInput creates valid payload with valid input', () => {
    const payload = {
      id: mockItemId,
      channelToken: mockAccessToken,
      ...mockPayload
    };

    const response = processInput(payload, mockState);
    expect(response).toMatchSnapshot();
  });

  test('processOutput creates valid response with valid input', async () => {
    const response = await processOutput(mockValidItemResponse, mockState, mockPayload);
    expect(response).toMatchSnapshot();
  });

  test('processOutput with not ok response but status of 200 responds with error', async () => {
    const errorResponse = {ok: false, status: 200, json: () => createDummyErrorResponse('oceGetItem')};
    const response = await processOutput(errorResponse, mockState, mockPayload);
    const expectedResponse = {
      error: {
        status: 200
      }
    };
    expect(response).toMatchObject(expectedResponse);
  });

  test('processInput with productAware input gives valid output', async () => {
    const response = await processInput(mockProductAwarePayload, mockState);
    expect(response).toMatchSnapshot();
  });

  test('valid productAware response creates valid output', async () => {
    const mockValidProdAwareContentItem = {
      ok: true,
      redirected: false,
      status: 200,
      statusText: 'OK',
      type: 'GET',
      json: () => mockProdAwareContentItem
    };
    const response = await processOutput(mockValidProdAwareContentItem, mockState, mockProductAwarePayload);
    expect(response).toMatchSnapshot();
  });

  test('Rich text processOutput with valid input produces valid output', async () => {
    const richTextPayload = {
      id: 'CONTA3ECE165D25C4097B5EACC289B691B5F',
      richText: `<!DOCTYPE html>
                   <p>
                    <span style=\\"color:#ffffff;\\">
                        <span style=\\"background-color:#8e44ad;\\">hello there&nbsp;&nbsp;</span>
                    </span>
                   </p>
                   <div style=\\"text-align:center\\">
                    <figure class=\\"image\\" style=\\"display:inline-block\\">
                        <img alt=\\"hey TC!\\" height=\\"1200\\" src=\\"[!--$CEC_DIGITAL_ASSET--]CONTA3ECE165D25C4097B5EACC289B691B5F[/!--$CEC_DIGITAL_ASSET--]\\" width=\\"1200\\" />
                        <figcaption>Caption</figcaption>
                    </figure>
                   </div>
                   <p>&nbsp;</p>`,
      fieldName: 'rich_text',
      contentItemId: 'mockItemId',
      ...mockPayload
    };
    const response = await processOutput(mockRichTextResponse, mockRichTextState, richTextPayload);
    expect(response).toMatchSnapshot();
  });
});
