/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {createDummyErrorResponse} from '@oracle-cx-commerce/test/unit';
import {getCurrentPageId} from '@oracle-cx-commerce/commerce-utils/selector';
import {processInput, processOutput} from '../index';

describe('OCE get-item-by-slug test', () => {
  const mockAccessToken = 'mockAccessToken';
  const mockState = {
    clientRepository: {
      context: {
        global: {
          locale: 'en',
          site: 'siteUS'
        },
        request: {
          page: 'test'
        }
      }
    },
    configRepository: {
      endpoints: {}
    },
    siteRepository: {
      sites: {
        siteUS: {
          id: 'siteUS',
          siteSettings: {
            ContentSettings: {
              content: {
                accessToken: mockAccessToken,
                cecCredentials: {
                  password: 'password',
                  username: 'username'
                }
              }
            },
            ContentSettingsURL: {
              url: 'https://ocead2v17srvc10-cecqalondonglobalacc.cec.ocp.oc-test.com/'
            }
          }
        }
      }
    }
  };
  const mockContentItem = require('@oracle-cx-commerce/oce-endpoints/get-item/__test__/mockContentItem.json');
  const mockValidItemResponse = {
    ok: true,
    redirected: false,
    status: 200,
    statusText: 'OK',
    type: 'GET',
    json: () => mockContentItem
  };
  const mockSlug = '1481786558288-land_rover_discovery';
  const mockPayload = {
    pageId: getCurrentPageId(mockState),
    widgetId: 12345678,
    slug: mockSlug,
    channelToken: mockAccessToken
  };

  test('processInput creates valid payload with valid input', () => {
    const response = processInput(mockPayload, mockState);
    expect(response).toMatchSnapshot();
  });

  test('processOutput creates valid response with valid input', async () => {
    const response = await processOutput(mockValidItemResponse, mockState, mockPayload);
    expect(response).toMatchSnapshot();
  });

  test('processOutput with not ok response but status of 200 responds with error', async () => {
    const errorResponse = {ok: false, status: 200, json: () => createDummyErrorResponse('oceGetItem')};
    const response = await processOutput(errorResponse, mockState, mockPayload);
    const expectedResponse = {
      error: {
        status: 200
      }
    };
    expect(response).toMatchObject(expectedResponse);
  });
});
