/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {populateError, getBodyAsJson} from '@oracle-cx-commerce/endpoints/utils';
import {getContentSettings, getContentWidgetItemIds} from '@oracle-cx-commerce/commerce-utils/selector';
import {createOceEndpoint} from '../factory';

export const processInput = (payload, state) => {
  const paramId = payload.slug;

  const contentSetting = getContentSettings(state);

  return {
    params: [paramId],
    query: {
      expand: 'all',
      channelToken: contentSetting.accessToken
    }
  };
};

/* if there is fields.native.links[0] and it is an image asset
 * then return the href of the image
 * check if there is an href and the mimeType starts with 'image'
 */
const getImageHref = function (fields) {
  const firstLink = (((fields || {}).native || {}).links || [])[0];
  if (firstLink && firstLink.href && /^image/i.test(fields.mimeType || '')) {
    return firstLink.href;
  }
};

export const processOutput = async (response, state, payload) => {
  const json = await getBodyAsJson(response);

  if (response.ok && json && json.fields) {
    const contentFields = json.fields;
    let value;

    Object.keys(contentFields).map(key => {
      // if the key has more than 10 characters check if it's an item description
      if (key.length > 10 && key.substring(key.length - 11, key.length) === 'description') {
        const description = contentFields[key];
        if (description) {
          json.description = description;
        }
      } else {
        value = contentFields[key];
        if (value) {
          if (typeof value == 'object') {
            if (Array.isArray(value) && value.length > 0) {
              // there are multiple assets for this content type field
              // use the 1st image (if any)
              for (const val of value) {
                json.imageUrl = json.imageUrl || getImageHref(val.fields);
              }
            } else {
              json.imageUrl = getImageHref(value.fields);
            }
          }
        }
      }

      return json;
    });

    const {widgetId} = payload;
    const widgetName = `contentWidget-${payload.widgetId}`;

    return response.ok
      ? {
          contentRepository: {
            contentItems: {
              [json.id]: json
            }
          },
          pageRepository: {
            pages: {
              [payload.pageId]: {
                // List of ids specific to the content widget
                [widgetName]: {
                  ...getContentWidgetItemIds(state, {widgetId}),
                  // The right-most property of the
                  [json.id]: 0
                }
              }
            }
          }
        }
      : {...populateError(response, json)};
  }

  return populateError(response, json);
};

export default createOceEndpoint('getItemBySlug', {
  processInput,
  processOutput
});
