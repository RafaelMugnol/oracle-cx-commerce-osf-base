/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {getCurrentPageId} from '@oracle-cx-commerce/commerce-utils/selector';
import {processInput, processOutput} from '../index';

const accessToken = 'mockAccessToken';
const mockState = {
  clientRepository: {
    context: {
      global: {
        locale: 'en',
        site: 'siteUS'
      },
      request: {
        page: 'test'
      }
    }
  },
  configRepository: {
    endpoints: {}
  },
  siteRepository: {
    sites: {
      siteUS: {
        id: 'siteUS',
        siteSettings: {
          ContentSettings: {
            content: {
              accessToken,
              cecCredentials: {
                password: 'password',
                username: 'username'
              }
            }
          },
          ContentSettingsURL: {
            url: 'https://ocead2v17srvc10-cecqalondonglobalacc.cec.ocp.oc-test.com/'
          }
        }
      }
    }
  }
};

const mockListData = () => import('./mockListData.json');

const mockPayload = {
  query: '(type eq "Car" AND language co "en-US")',
  limit: 2,
  pageId: getCurrentPageId(mockState),
  widgetId: 12345678
};

describe('OCE get-items tests', () => {
  test('processInput creates valid request', async () => {
    const response = processInput(mockPayload, mockState);
    const expectedResponse = {
      query: {
        channelToken: 'mockAccessToken',
        expand: 'all',
        limit: 2,
        offset: 0,
        q: '(type eq "Car" AND language co "en-US")'
      }
    };
    expect(response).toEqual(expectedResponse);
  });

  test('processOutput returns error response with 200 status when items is undefined', async () => {
    const noItemsList = {hasMore: false, offset: 0, count: 0, limit: 34};
    const noItemResponse = {
      ok: true,
      redirected: false,
      status: 200,
      statusText: 'OK',
      type: 'GET',
      json: () => noItemsList
    };
    const expectedResponse = {
      error: {
        ...noItemsList,
        status: 200
      }
    };
    const response = await processOutput(noItemResponse, mockState, mockPayload);
    expect(response).toStrictEqual(expectedResponse);
  });

  test('processOutput with empty item response list returns without error', async () => {
    const emptyListResponsePayload = {
      hasMore: false,
      offset: 0,
      count: 0,
      limit: 34,
      items: []
    };
    const emptyItemListResponse = {
      ok: true,
      redirected: false,
      status: 200,
      statusText: 'OK',
      type: 'GET',
      json: () => emptyListResponsePayload
    };
    const response = await processOutput(emptyItemListResponse, mockState, mockPayload);
    expect(response).toMatchSnapshot();
  });

  test('processOutput with valid payload returns valid response', async () => {
    const listResponse = {
      ok: true,
      redirected: false,
      status: 200,
      statusText: 'OK',
      type: 'GET',
      json: mockListData
    };
    const response = await processOutput(listResponse, mockState, mockPayload);
    expect(response).toMatchSnapshot();
  });
});
