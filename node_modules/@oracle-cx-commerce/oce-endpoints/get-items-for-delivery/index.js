/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {getContentSettings, getContentWidgetItemIds, getPage} from '@oracle-cx-commerce/commerce-utils/selector';
import {populateError, getBodyAsJson} from '@oracle-cx-commerce/endpoints/utils';
import {createOceEndpoint} from '@oracle-cx-commerce/oce-endpoints/factory';

export const processInput = (payload, state) => {
  const {listOffset} = getPage(state, payload.pageId);
  payload.offset = listOffset || 0;

  const contentSetting = getContentSettings(state);

  return {
    query: {
      expand: 'all',
      q: payload.query,
      channelToken: contentSetting.accessToken,
      limit: payload.limit,
      offset: payload.offset
    }
  };
};

export const processOutput = async (response, state, payload) => {
  const json = await getBodyAsJson(response);
  const {items} = json;
  if (items) {
    const {listOffset} = getPage(state, payload.pageId);

    // payload.limit is the blockSize of the expected response
    // the 'limit' returned from OCE is the total number of entries available
    const offset = (listOffset || 0) + payload.limit;
    const resultMap = {};
    // This is a widget specific list of the content items each widget uses
    const widgetIdList = getContentWidgetItemIds(state, payload);
    for (const item of items) {
      resultMap[item.id] = item;
      widgetIdList[item.id] = 1;
    }

    const hasMore = json.hasMore || false;

    const widgetName = `contentWidget-${payload.widgetId}`;

    return response.ok
      ? {
          contentRepository: {
            contentItems: resultMap
          },
          pageRepository: {
            pages: {
              [payload.pageId]: {
                listOffset: offset,
                hasMoreContent: hasMore,
                [widgetName]: widgetIdList
              }
            }
          }
        }
      : {...populateError(response, json)};
  }

  return {...populateError(response, json)};
};

export default createOceEndpoint('getItemsForDelivery', {
  processInput,
  processOutput
});
