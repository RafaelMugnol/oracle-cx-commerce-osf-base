/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext} from 'react';
import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/delete-wish-list-dialog/styles.css';
import {access} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import PropTypes from 'prop-types';
import {noop} from '@oracle-cx-commerce/utils/generic';

/**
 * Provides delete action on Wish List
 * @param {*} props
 */
const DeleteWishListDialog = props => {
  const {
    id = '',
    actionConfirm,
    actionCancel,
    textDeleteList,
    textConfirmWishListDeletionMessage,
    showDeleteModal = false,
    toggleDeleteWishListModal,
    cssOverride,
    closeLinkAltText,
    alertWishListDeleted,
    currentWishListId,
    setFetchingData,
    onDeleteWishListSuccess = noop
  } = props;

  const {action} = useContext(StoreContext);
  const {siteId} = useSelector(access);

  /**
   * Failure call back for the deleteWishlist action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      toggleDeleteWishListModal();
      action('notify', {level: 'error', message});
    },
    [action, toggleDeleteWishListModal]
  );

  /**
   * Success call back for the deleteWishlist action
   */
  const onOk = useCallback(() => {
    // To reload the wishLists in the UI
    if (setFetchingData !== undefined) {
      toggleDeleteWishListModal();
      setFetchingData(true);
    } else {
      onDeleteWishListSuccess();
    }
    action('notify', {level: 'success', message: alertWishListDeleted});
  }, [setFetchingData, action, alertWishListDeleted, toggleDeleteWishListModal, onDeleteWishListSuccess]);

  /**
   * Handler for deleteWishlist action invoked on confirm of Delete Wish List
   * @param {*} event
   */
  const handleDeleteWishList = () => {
    action('notifyClearAll');
    const payload = {
      wishlistId: currentWishListId,
      siteId
    };
    action('deleteWishlist', payload)
      .then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .catch(error => {
        onNotOk({error});
      });
  };

  return (
    <Styled id="DeleteWishListDialog" css={css}>
      <ConfirmationDialog
        id={id}
        cssOverride={cssOverride}
        title={textDeleteList}
        closeAriaLabel={closeLinkAltText}
        closeIconTitle={closeLinkAltText}
        alertMessage={textConfirmWishListDeletionMessage}
        confirmMessage={''}
        labelConfirm={actionConfirm}
        labelCancel={actionCancel}
        confirmCallback={handleDeleteWishList}
        cancelCallback={toggleDeleteWishListModal}
        closeCallback={toggleDeleteWishListModal}
        show={showDeleteModal}
      />
    </Styled>
  );
};

DeleteWishListDialog.propTypes = {
  /** Callback function to be invoked to reset the value of wish lists data */
  setFetchingData: PropTypes.func,
  /** The flag to indicate whether to show the modal or not*/
  showDeleteModal: PropTypes.bool,
  /** The id of the current wishlist of the modal in the UI */
  currentWishListId: PropTypes.string.isRequired,
  /** The id of the current delete modal in the UI */
  id: PropTypes.string,
  /** Callback function to be invoked when delete wish list modal needs to be opened or closed */
  toggleDeleteWishListModal: PropTypes.func.isRequired,
  /** css class name to override styles (pass this only if you want to override default css style)*/
  cssOverride: PropTypes.string
};

DeleteWishListDialog.defaultProps = {
  showDeleteModal: false,
  id: '',
  cssOverride: undefined,
  setFetchingData: undefined
};

export default React.memo(DeleteWishListDialog);
