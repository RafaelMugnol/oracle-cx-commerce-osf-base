/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext} from 'react';
import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/leave-wish-list-dialog/styles.css';
import {access} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import PropTypes from 'prop-types';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Provides Leave Wish List action
 * @param {*} props
 */
const LeaveWishListDialog = props => {
  const {
    id,
    actionConfirm,
    actionCancel,
    textLeaveList,
    textConfirmLeaveWishListMessage,
    showLeaveModal = false,
    toggleLeaveWishListModal,
    cssOverride,
    closeLinkAltText,
    alertLeaveWishList,
    currentWishListId,
    setFetchingData
  } = props;

  const {action} = useContext(StoreContext);
  const {userId} = useSelector(access);

  /**
   * Failure call back for the leaveWishlist action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      toggleLeaveWishListModal();
      action('notify', {level: 'error', message});
    },
    [action, toggleLeaveWishListModal]
  );

  /**
   * Success call back for the leaveWishlist action
   */
  const onOk = useCallback(() => {
    toggleLeaveWishListModal();
    action('notify', {level: 'success', message: alertLeaveWishList});
    setFetchingData(true);
  }, [toggleLeaveWishListModal, action, alertLeaveWishList, setFetchingData]);

  /**
   * Handler for leaveWishlist action invoked on confirm of Leave Wish List
   * @param {*} event
   */
  const handleLeaveWishList = () => {
    action('notifyClearAll');
    const payload = {
      wishlistId: currentWishListId,
      memberId: userId
    };
    action('deleteWishlistMember', payload).then(response => {
      if (response.ok === false) {
        onNotOk(response);
      } else {
        onOk();
      }
    });
  };

  return (
    <Styled id="LeaveWishListDialog" css={css}>
      <ConfirmationDialog
        id={id}
        cssOverride={cssOverride}
        title={textLeaveList}
        closeAriaLabel={closeLinkAltText}
        closeIconTitle={closeLinkAltText}
        alertMessage={textConfirmLeaveWishListMessage}
        confirmMessage={''}
        labelConfirm={actionConfirm}
        labelCancel={actionCancel}
        confirmCallback={handleLeaveWishList}
        cancelCallback={toggleLeaveWishListModal}
        closeCallback={toggleLeaveWishListModal}
        show={showLeaveModal}
      />
    </Styled>
  );
};

LeaveWishListDialog.propTypes = {
  /** Callback function to be invoked to reset the value of wish lists data */
  setFetchingData: PropTypes.func.isRequired,
  /** The flag to indicate whether to show the modal or not*/
  showLeaveModal: PropTypes.bool,
  /** The id of the current wishlist of the modal in the UI */
  currentWishListId: PropTypes.string.isRequired,
  /** The id of the current leave wish list modal in the UI */
  id: PropTypes.string,
  /** Callback function to be invoked when leave wish list modal needs to be opened or closed */
  toggleLeaveWishListModal: PropTypes.func.isRequired,
  /** css class name to override styles (pass this only if you want to override default css style)*/
  cssOverride: PropTypes.string
};

LeaveWishListDialog.defaultProps = {
  showLeaveModal: false,
  id: '',
  cssOverride: undefined
};

export default React.memo(LeaveWishListDialog);
