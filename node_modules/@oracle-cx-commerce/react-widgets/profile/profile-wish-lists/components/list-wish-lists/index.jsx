/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useState} from 'react';

import IterateListItems from '@oracle-cx-commerce/react-components/load-more/list-items';
import PropTypes from 'prop-types';
import WishListSummary from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/wish-list-summary';

const DeleteWishListDialog = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/delete-wish-list-dialog')
);

const LeaveWishListDialog = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/leave-wish-list-dialog')
);

/**
 * A widget whose responsibility is to show a list of wish lists. This includes the pagination
 * logic as well.
 */
const ListWishLists = props => {
  const {wishListIds, setFetchingData, isSharedWishList = false} = props;
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showLeaveModal, setShowLeaveModal] = useState(false);
  const [currentWishListId, setCurrentWishListId] = useState('');

  /**
   * Handler to open/close Delete Wish List modal
   */
  const toggleDeleteWishListModal = useCallback(() => {
    setShowDeleteModal(!showDeleteModal);
  }, [showDeleteModal]);

  /**
   * Handler to open/close Leave Wish List modal
   */
  const toggleLeaveWishListModal = useCallback(() => {
    setShowLeaveModal(!showLeaveModal);
  }, [showLeaveModal]);

  return (
    <div className="ListWishLists">
      {typeof window !== 'undefined' && (
        <Suspense fallback={null}>
          <div className="ListWishLists__WishListItems">
            <IterateListItems
              child={WishListSummary}
              listOFItems={wishListIds}
              toggleDeleteWishListModal={toggleDeleteWishListModal}
              toggleLeaveWishListModal={toggleLeaveWishListModal}
              setCurrentWishListId={setCurrentWishListId}
              {...props}
            ></IterateListItems>
          </div>
          {isSharedWishList ? (
            <LeaveWishListDialog
              toggleLeaveWishListModal={toggleLeaveWishListModal}
              showLeaveModal={showLeaveModal}
              currentWishListId={currentWishListId}
              {...props}
            ></LeaveWishListDialog>
          ) : (
            <DeleteWishListDialog
              toggleDeleteWishListModal={toggleDeleteWishListModal}
              showDeleteModal={showDeleteModal}
              currentWishListId={currentWishListId}
              setFetchingData={setFetchingData}
              {...props}
            ></DeleteWishListDialog>
          )}
        </Suspense>
      )}
    </div>
  );
};

ListWishLists.propTypes = {
  /** Callback function to be invoked to reset the value of fetch data */
  setFetchingData: PropTypes.func.isRequired,
  /** The array of Wish list Ids to be displayed in the UI */
  wishListIds: PropTypes.arrayOf(PropTypes.string),
  /** The flag to indicate whether the current wish list or not*/
  isSharedWishList: PropTypes.bool
};

ListWishLists.defaultProps = {
  isSharedWishList: false,
  wishListIds: undefined
};

export default ListWishLists;
