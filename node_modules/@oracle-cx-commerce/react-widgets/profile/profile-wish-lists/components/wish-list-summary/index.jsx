/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useState, useEffect} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Link from '@oracle-cx-commerce/react-components/link';
import Img from '@oracle-cx-commerce/react-components/img';
import PasswordIcon from '@oracle-cx-commerce/react-components/icons/password';
import UsersIcon from '@oracle-cx-commerce/react-components/icons/users';
import UnlockIcon from '@oracle-cx-commerce/react-components/icons/unlock';
import {PAGE_WISH_LIST_DETAILS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import {t} from '@oracle-cx-commerce/utils/generic';
import {getWishList, getWishlistMembersForSpaceId} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/wish-list-summary/styles.css';
import PropTypes from 'prop-types';

/**
 * A sub component that loads the individual wish list item
 * from the list.
 */
const WishListSummary = props => {
  const {
    itemId,
    textPurchaseListItems,
    textWishListMember,
    textWishListOwnerDescription,
    textPrivate,
    textGroup,
    textShared,
    textImageNotAvailable,
    isSharedWishList = false,
    textDeleteList,
    textLeaveList,
    toggleDeleteWishListModal,
    toggleLeaveWishListModal,
    setCurrentWishListId,
    listOFItems
  } = props;

  const SITE_DEFAULT_NO_IMAGE_URL = '/img/no-image.jpg';
  const wishList = useSelector(getWishList, {id: itemId});
  const members = useSelector(getWishlistMembersForSpaceId, {id: itemId});
  const {action} = useContext(StoreContext);
  const items =
    wishList && wishList.products && Object.keys(wishList.products).length > 0
      ? Object.keys(wishList.products).length - 1
      : 0;

  const getImageUrl = () => {
    if (wishList && wishList.products && Object.keys(wishList.products).length > 1) {
      return wishList.products && wishList.products[Object.keys(wishList.products)[0]].productUrl;
    }

    return SITE_DEFAULT_NO_IMAGE_URL;
  };

  const getImageTitle = () => {
    if (wishList && wishList.products && Object.keys(wishList.products).length > 1) {
      return wishList.products && wishList.products[Object.keys(wishList.products)[0]].productTitle;
    }
  };

  /**
   * failure callback method for edit wish list details form submitted
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  const [fetchingWishListData, setFetchingWishListData] = useState(false);

  /**
   * Makes a getWishList call for every wish list, to get info about
   * the number of products and image to display.
   */
  const fetchProductDetails = useCallback(async () => {
    try {
      const payload = {wishlistId: itemId};
      action('getWishlist', payload)
        .then(response => {
          setFetchingWishListData(true);
          if (response.ok === false) {
            onNotOk(response);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    } catch (error) {
      onNotOk({error});
    }
  }, [action, setFetchingWishListData, itemId, onNotOk]);

  useEffect(() => {
    fetchProductDetails();
  }, [fetchProductDetails, listOFItems]);

  /**
   * Handler to trigger Delete list modal
   */

  const handleDeleteWishListModal = () => {
    setCurrentWishListId(itemId);
    toggleDeleteWishListModal();
  };

  /**
   * Handler to trigger Leave list modal
   */
  const handleLeaveWishListModal = () => {
    setCurrentWishListId(itemId);
    toggleLeaveWishListModal();
  };

  return (
    <Styled id="WishListSummary" css={css}>
      <div className="WishListSummary__WishListItem">
        <div className="WishListSummary__FlexElement">
          <div className="WishListSummary__FlexGrow">
            <div className="WishListSummary__WishListProductItemImage">
              {fetchingWishListData ? (
                <Img src={getImageUrl()} title={getImageTitle()} alt={getImageTitle() || textImageNotAvailable} />
              ) : (
                <div className="WishListSummary__WishListProductItemImagePlaceholder"></div>
              )}
            </div>
            <div className="WishListSummary__WishListItemDetails">
              <Link href={`${PAGE_WISH_LIST_DETAILS_LINK}/${itemId}`} className="WishListSummary__WishListItemName">
                {wishList.spaceName}
              </Link>
              {fetchingWishListData && (
                <div className="WishListSummary__WishListItemQuantity">
                  {t(textPurchaseListItems, {PURCHASELISTCOUNT: items})}
                </div>
              )}
              {/* Show Member count for shared wishlists */}
              {!isSharedWishList && members && members.items && wishList.accessLevel !== '0' && (
                <div className="WishListSummary__WishListMember">
                  {t(textWishListMember, {members: members.items.length - 1})}
                </div>
              )}
              {isSharedWishList && (
                <>
                  <div className="WishListSummary__WishListOwner">
                    {t(textWishListOwnerDescription, {
                      firstName: wishList.creatorFirstName,
                      lastName: wishList.creatorLastName
                    })}
                  </div>
                </>
              )}
            </div>
          </div>
          <div className="WishListSummary__AccessLevelDeleteListContainer">
            {/* Private */}
            {wishList.accessLevel === '0' && (
              <PasswordIcon className="WishListSummary__AccessLevelIcon" alt={textPrivate} title={textPrivate} />
            )}
            {/* Group */}
            {wishList.accessLevel === '2' && (
              <UsersIcon className="WishListSummary__AccessLevelIcon" alt={textGroup} title={textGroup} />
            )}
            {/* Shared */}
            {wishList.accessLevel === '1' && (
              <UnlockIcon className="WishListSummary__AccessLevelIcon" alt={textShared} title={textShared} />
            )}
            <button
              type="button"
              data-testid={`deleteWishList-${itemId}`}
              className="WishListSummary__DeleteList"
              onClick={isSharedWishList ? handleLeaveWishListModal : handleDeleteWishListModal}
            >
              {isSharedWishList ? textLeaveList : textDeleteList}
            </button>
          </div>
        </div>
      </div>
    </Styled>
  );
};

WishListSummary.propTypes = {
  /** The id of the current wishlist of the modal in the UI */
  itemId: PropTypes.string,
  /** The array of Wish list Ids to be displayed in the UI */
  listOFItems: PropTypes.arrayOf(PropTypes.string).isRequired,
  /** The flag to indicate whether the current wish list or not*/
  isSharedWishList: PropTypes.bool,
  /** Callback function to be invoked when leave wish list modal needs to be opened or closed */
  toggleLeaveWishListModal: PropTypes.func.isRequired,
  /** Callback function to be invoked when delete wish list modal needs to be opened or closed */
  toggleDeleteWishListModal: PropTypes.func.isRequired,
  /** Callback function to be invoked to set the current wishlist being displayed. */
  setCurrentWishListId: PropTypes.func.isRequired
};

WishListSummary.defaultProps = {
  isSharedWishList: false,
  itemId: undefined
};

export default WishListSummary;
