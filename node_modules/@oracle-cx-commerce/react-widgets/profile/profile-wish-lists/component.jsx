/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useContext, useEffect, useState} from 'react';
import {Tab, TabContainer} from '@oracle-cx-commerce/react-components/tabs';

import ListWishLists from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/list-wish-lists';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/styles.css';
import {getBaseURL} from '@oracle-cx-commerce/utils/generic';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/selectors';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

const CreateEditWishListModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/create-edit-wish-list-modal')
);

/**
 * A widget that show two lists of wish lists of users - their own wish lists
 * and the wish lists shared to them (individually or through their organization)
 */
const ProfileWishLists = props => {
  const {
    headingMyLists,
    headingWishLists,
    headingMyFriendsLists,
    actionCreateNewList,
    closeLinkAltText,
    actionWishLists,
    textRetrievingWishLists,
    siteId,
    userId,
    wishlists,
    textNoAvailableWishLists
  } = props;

  const {action} = useContext(StoreContext);
  const initalModalView = {
    show: false,
    title: ''
  };
  const [showCreateEditModalView, setCreateEditModalView] = useState(initalModalView);
  const [wishListIds, setWishListIds] = useState({});
  const [fetchingData, setFetchingData] = useState(true);

  const goToWishlistDetailsPage = useNavigator();

  const createWishlistMember = useCallback(
    async invitationToken => {
      const response = await action('createWishlistMember', {invitationToken});
      if (response.ok === true) {
        if (response.json) {
          const {spaceId} = response.json;
          goToWishlistDetailsPage(`${getBaseURL({window})}/wish-list-details/${spaceId}`);
        }
      }
    },
    [action, goToWishlistDetailsPage]
  );
  /**
   * Listens to the page url parameters change.
   * If the url parameters has invite, gets the value and decode the token.
   * Validates the token and add the user to the wish-list.
   */
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    let invitationToken;
    if (searchParams.has('invite')) {
      invitationToken = decodeURIComponent(searchParams.get('invite'));
    }
    if (invitationToken && siteId) {
      createWishlistMember(invitationToken);
    }
  }, [action, siteId, goToWishlistDetailsPage, createWishlistMember]);

  const onCancel = useCallback(() => {
    setCreateEditModalView(initalModalView);
  }, [initalModalView]);

  const onCreateWishListClick = () => {
    setCreateEditModalView({
      show: true,
      title: actionCreateNewList
    });
  };

  const handleWishListItems = useCallback(() => {
    const myWishLists = [];
    const friendsWishLists = [];
    Object.values(wishlists).forEach(item => {
      if (item.creatorId === userId) {
        myWishLists.push(item.spaceId);
      } else {
        /* Move to friends wishlist if creator id is different than userId */
        friendsWishLists.push(item.spaceId);
      }
    });

    setWishListIds({myWishLists, friendsWishLists});
  }, [userId, wishlists]);

  const getWishListSummary = () => {
    return (
      <React.Fragment>
        <>
          {fetchingData && (
            <div className="ProfileWishLists__FetchingDataText">
              <span>{textRetrievingWishLists}</span>
            </div>
          )}
          {!fetchingData &&
            wishListIds.length ===
            (
              <div className="ProfileWishLists__FetchingDataText">
                <span>{textNoAvailableWishLists}</span>
              </div>
            )}
        </>
      </React.Fragment>
    );
  };

  /**
   * Failure call back for the listWishlist action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  /**
   * Success call back for the listWishlist action
   */
  const onOk = useCallback(() => {
    handleWishListItems();
  }, [handleWishListItems]);

  useEffect(() => {
    if (fetchingData && siteId) {
      try {
        action('listWishlists', {siteId}).then(response => {
          setFetchingData(false);
          if (response.ok === false) {
            onNotOk(response);
          } else {
            onOk();
          }
        });
      } catch (error) {
        setFetchingData(false);
        console.error(error);
      }
    }
  }, [action, fetchingData, onNotOk, onOk, setFetchingData, siteId]);

  return (
    <Styled id="ProfileWishLists" css={css}>
      <div className="ProfileWishLists">
        <div className="ProfileWishLists__Headers">
          <h1 className="ProfileWishLists__Header">{headingWishLists}</h1>
          <button type="button" onClick={onCreateWishListClick} className="ProfileWishLists__Newlist">
            {actionCreateNewList}
          </button>
        </div>
        <TabContainer label={actionWishLists}>
          <Tab header={headingMyLists}>
            {getWishListSummary()}
            <ListWishLists
              wishListIds={wishListIds.myWishLists}
              showShareIcon={true}
              setFetchingData={setFetchingData}
              {...props}
            />
          </Tab>
          <Tab header={headingMyFriendsLists}>
            {getWishListSummary()}
            <ListWishLists
              wishListIds={wishListIds.friendsWishLists}
              isSharedWishList={true}
              setFetchingData={setFetchingData}
              {...props}
            />
          </Tab>
        </TabContainer>
        {typeof window !== 'undefined' && (
          <Suspense fallback={null}>
            <CreateEditWishListModal
              openModal={showCreateEditModalView.show}
              title={showCreateEditModalView.title}
              closeLinkAltText={closeLinkAltText}
              setFetchingData={setFetchingData}
              onCancel={onCancel}
              {...props}
            />
          </Suspense>
        )}
      </div>
    </Styled>
  );
};

ProfileWishLists.propTypes = {};

ProfileWishLists.defaultProps = {};

export default connect(getComponentData)(ProfileWishLists);
