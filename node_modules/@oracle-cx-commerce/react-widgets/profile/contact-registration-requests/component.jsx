/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useCallback, useContext, useMemo, useRef, useState} from 'react';
import {
  buildQuerySQLPram,
  defaultSortProperty
} from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/utils';

import ContactRequest from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/contact-request';
import IterateListItems from '@oracle-cx-commerce/react-components/load-more/list-items';
import LoadMore from '@oracle-cx-commerce/react-components/load-more';
import RegistrationRequestsSummaryInformation from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/registration-request-summary-information';
import RegistrationSort from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/registration-sort';
import RegistrationStatusSelect from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/registration-status-select';
import Search from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/search';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/selectors';
import PropTypes from 'prop-types';

/**
 * A component for listing contact registration Requests.
 * New contactRequests are loaded upon clicking Load More Button.
 *
 * Component can be used to filter the contactRequests based on the last name and status
 * of the request. The list of contact requests can be sorted based on sorting criteria.
 *
 * @param props
 */
const ContactRegistrationRequests = props => {
  const {
    numberOfRequestsToLoad,
    isUserLoggedIn,
    headingRegistrationRequests,
    textFilterByLastName,
    textRetrievingRegistrationRequests,
    textNoRegistrationRequest,
    actionShowMoreRegistrationRequests
  } = props;
  const {action} = useContext(StoreContext);
  const [registrationIds, setRegistrationIds] = useState([]);
  const [selectedRegistrationStatus, setSelectedRegistrationStatus] = useState();
  const [sortProperty, setSortProperty] = useState(defaultSortProperty);
  const [searchFilter, setSearchFilter] = useState('');
  const [processing, setProcessing] = useState(true);

  const resetPage = useRef(false);

  const actionName = 'listContactRegistrationRequests';

  /**
   * Used to load the contact-requests upon clicking
   * Load More button.
   * @param {*} newIds
   */
  const handleSetListItems = useCallback(
    newIds => {
      resetPage.current = false;
      setRegistrationIds(oldIds => [...oldIds, ...newIds]);
    },
    [setRegistrationIds]
  );

  /**
   * Used to create payload for the listRegistrationRequests endpoint
   * @param
   */
  const createPayload = useMemo(() => {
    const q = buildQuerySQLPram(searchFilter, selectedRegistrationStatus);
    const payload = {
      q,
      sort: sortProperty,
      limit: numberOfRequestsToLoad
    };

    return payload;
  }, [searchFilter, selectedRegistrationStatus, sortProperty, numberOfRequestsToLoad]);

  /**
   * callback to call the listRegistrationRequests endpoint
   * @param payloadOffset
   */
  const handleLoadMore = useCallback(
    async payloadOffset => {
      createPayload.offset = payloadOffset;
      setProcessing(true);
      try {
        const response = await action(actionName, createPayload);
        setProcessing(false);
        if (response.ok && response.json && response.json.items) {
          // setResetPage
          const recentListingItems = [];
          for (const item of response.json.items) {
            recentListingItems.push(item['id']);
          }
          handleSetListItems(recentListingItems);

          return {totalNumberOfItems: response.json.totalResults, currentItemsCount: recentListingItems.length};
        }
      } catch (error) {
        console.error(error);
      }
    },
    [action, createPayload, handleSetListItems]
  );

  /**
   * Listens to the change in the status drop-down change.
   *
   * @param {*} newName
   */
  const onChange = useCallback(
    newName => {
      setRegistrationIds([]);
      resetPage.current = true;
      setSelectedRegistrationStatus(newName);
    },
    [setRegistrationIds, setSelectedRegistrationStatus]
  );

  /**
   * Listens to the change in the input search field
   * @param {*} searchValue
   */
  const searchByLastName = useCallback(
    searchValue => {
      setRegistrationIds([]);
      resetPage.current = true;
      setSearchFilter(searchValue);
    },
    [setRegistrationIds, setSearchFilter]
  );

  /**
   * Listens to the change in any sort property
   * @param {*} sortCriteria
   */
  const onSortCriteriaChange = useCallback(
    event => {
      setSortProperty(event);
      resetPage.current = true;
      setRegistrationIds([]);
    },
    [setRegistrationIds]
  );

  return (
    <Styled id="ContactRegistrationRequests" css={css}>
      <div className="ContactRegistrationRequests">
        <h1>{headingRegistrationRequests}</h1>
        {isUserLoggedIn && (
          <>
            <Search
              searchInput={searchByLastName}
              placeholderLabel={textFilterByLastName}
              nameValue="contact-registration-request-search"
              {...props}
            />
            <div className="ContactRegistrationRequests__DropdownStatus">
              <RegistrationStatusSelect
                selectedRegistrationStatus={selectedRegistrationStatus}
                onSearchTermChange={onChange}
                {...props}
              />
              <RegistrationSort onSortCriteriaChange={onSortCriteriaChange} {...props} />
            </div>
            <RegistrationRequestsSummaryInformation
              searchFilter={searchFilter}
              selectedRegistrationStatus={selectedRegistrationStatus}
              {...props}
            />
            {(registrationIds.length > 0 && (
              <div className="ContactRegistrationRequests__RequestList">
                <IterateListItems child={ContactRequest} listOFItems={registrationIds} {...props}></IterateListItems>
              </div>
            )) || <div>{processing ? textRetrievingRegistrationRequests : textNoRegistrationRequest}</div>}

            {
              <div>
                <LoadMore
                  numberOfItemsToLoad={numberOfRequestsToLoad}
                  handleLoadMore={handleLoadMore}
                  loadMoreLabel={actionShowMoreRegistrationRequests}
                  loadMoreLoadingLabel={textRetrievingRegistrationRequests}
                  resetPage={resetPage.current}
                ></LoadMore>
              </div>
            }
          </>
        )}
      </div>
    </Styled>
  );
};

ContactRegistrationRequests.propTypes = {
  /**
   * The variable holds the number of requests to load
   */
  numberOfRequestsToLoad: PropTypes.number.isRequired,
  /**
   * This value is used to check if the user is logged in
   */
  isUserLoggedIn: PropTypes.string.isRequired,
  /**
   * The button label to indicate load more
   */
  actionShowMoreRegistrationRequests: PropTypes.string.isRequired
};

export default connect(getComponentData)(ContactRegistrationRequests);
