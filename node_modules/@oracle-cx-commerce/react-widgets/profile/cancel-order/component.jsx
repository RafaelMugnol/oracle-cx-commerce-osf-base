/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useState} from 'react';
import {isEmptyObject, t} from '@oracle-cx-commerce/utils/generic';

import Alert from '@oracle-cx-commerce/react-components/alert';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import Form from '@oracle-cx-commerce/react-components/form';
import OrderItemDetails from '@oracle-cx-commerce/react-widgets/profile/shipping-information/components/order-item-details';
import {PAGE_ORDER_DETAILS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/cancel-order/styles.css';
import {fetchCancelReasons} from '@oracle-cx-commerce/fetchers/merchant-settings';
import {getOrderDetails} from '@oracle-cx-commerce/react-widgets/profile/cancel-order/selectors';
import {useCancelReasonsFetcher} from '@oracle-cx-commerce/fetchers/merchant-settings/hooks';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/*
  Export [an array of] fetchers so that the server can use them to load state during 
  server-side rendering. If you want a fecther to run browser-side only then don't
  export it.
 */
export const fetchers = [fetchCancelReasons];

/*
 ** Cancel Order Widget
 * A widget which allows user to enter a cancellation reason and submit order cancellation request.
 */
const CancelOrder = props => {
  const {
    actionBackToOrder,
    actionDoNotCancelOrder,
    actionSubmitCancellation,
    alertCancelOrderFailureMessage,
    alertCancelOrderFufilledMessage,
    alertCancelOrderRemorsePeriodExpiredMessage,
    alertCancelOrderSuccessMessage,
    textCancellationReason,
    headingCancelOrder
  } = props;
  const {cancelReasons, commerceItems, orderId, orderState, shippingGroups} = props;
  const store = useContext(StoreContext);
  const {action} = store;
  const goToPage = useNavigator();
  const [inProgress, setInProgress] = useState(false);
  const [orderStatus, setOrderStatus] = useState({isOrderCancelled: false, cancelOrderFailed: false});
  const [cancelReason, setCancelReason] = useState('');

  useCancelReasonsFetcher(store);

  const onOk = useCallback(() => {
    setOrderStatus(orderStatus => {
      return {
        ...orderStatus,
        isOrderCancelled: true
      };
    });
  }, []);

  /**
   * Sets the orderStatus(cancelOrderFailed, cancelOrderErrorMessage) when cancel order fails
   */
  const onNotOk = useCallback(
    ({error = {}}) => {
      if (error.errorCode === '210109') {
        setOrderStatus(orderStatus => {
          return {
            ...orderStatus,
            cancelOrderFailed: true,
            cancelOrderErrorMessage: t(alertCancelOrderRemorsePeriodExpiredMessage)
          };
        });
      } else if (error.errorCode === '200101') {
        setOrderStatus(orderStatus => {
          return {
            ...orderStatus,
            cancelOrderFailed: true,
            cancelOrderErrorMessage: t(alertCancelOrderFufilledMessage)
          };
        });
      } else if (error.errorCode === '200139') {
        setOrderStatus(orderStatus => {
          return {
            ...orderStatus,
            cancelOrderFailed: true,
            cancelOrderErrorMessage: t(alertCancelOrderFailureMessage)
          };
        });
      }
    },
    [alertCancelOrderFailureMessage, alertCancelOrderRemorsePeriodExpiredMessage, alertCancelOrderFufilledMessage]
  );

  // triggers an action to get Order details
  useEffect(() => {
    const payload = {orderId};
    action('getOrder', payload);
  }, [action, orderId]);

  // redirect to order details page when the order is already canceled(order state='REMOVED')
  useEffect(() => {
    if (!cancelReason && orderState === 'REMOVED') {
      goToPage(`${PAGE_ORDER_DETAILS_LINK}/${orderId}`);
    }
  }, [goToPage, orderId, cancelReason, orderState]);

  // decides whether the submit cancellation button can be enabled
  const isDisabled = () => {
    return inProgress || !cancelReason;
  };

  /*
   ** Display the order details only if the commerceItems is not empty and orderState not removed,
   *  or the success message if order cancellation request is submitted,
   *  or the error message if order cancellation request failed
   */
  return (
    <Styled id="CancelOrder" css={css}>
      <React.Fragment>
        <div className="CancelOrder">
          <h1>{t(headingCancelOrder)}</h1>
          {!(
            isEmptyObject(shippingGroups) ||
            orderStatus.isOrderCancelled ||
            orderStatus.cancelOrderFailed ||
            orderState === 'REMOVED'
          ) && (
            <div>
              {(Object.keys(shippingGroups || {}) || []).map(shippingGroupId => (
                <div key={shippingGroupId}>
                  <OrderItemDetails
                    shippingGroup={shippingGroups[shippingGroupId]}
                    commerceItems={commerceItems}
                    shippingGroupId={shippingGroupId}
                    {...props}
                  />
                </div>
              ))}
              <Form action="cancelOrder" onOk={onOk} onNotOk={onNotOk} setInProgress={setInProgress}>
                <input type="hidden" name="orderId" value={orderId} />
                <Dropdown
                  id="cancelation-reason"
                  name={'reason'}
                  aria-label={t(textCancellationReason)}
                  onChange={e => setCancelReason(e.currentTarget.value)}
                  data-testid="cancelation-reason"
                  value={cancelReason}
                  required
                >
                  <option value="">{t(textCancellationReason)}</option>
                  {!isEmptyObject(cancelReasons) &&
                    cancelReasons.map(cancelReason => (
                      <option key={cancelReason.key} value={cancelReason.key}>
                        {cancelReason.displayValue}
                      </option>
                    ))}
                </Dropdown>
                <div className="CancelOrder__FormButtons">
                  <button className="CancelOrder__SubmitCancelButton" type="submit" disabled={isDisabled()}>
                    {t(actionSubmitCancellation)}
                  </button>
                  <button
                    className="CancelOrder__DoNotCancelButton secondary"
                    type="button"
                    onClick={() => goToPage(`${PAGE_ORDER_DETAILS_LINK}/${orderId}`)}
                  >
                    {t(actionDoNotCancelOrder)}
                  </button>
                </div>
              </Form>
            </div>
          )}
          {orderStatus.isOrderCancelled && (
            <Alert id="CancelOrder__Success" type="success" message={t(alertCancelOrderSuccessMessage)} />
          )}
          {orderStatus.cancelOrderFailed && (
            <Alert id="CancelOrder__Error" type="error" message={orderStatus.cancelOrderErrorMessage} />
          )}
          {(orderStatus.isOrderCancelled || orderStatus.cancelOrderFailed) && (
            <div className="CancelOrder__FormButtons">
              <button
                className="CancelOrder__BackToOrderButton secondary"
                type="button"
                onClick={() => goToPage(`${PAGE_ORDER_DETAILS_LINK}/${orderId}`)}
              >
                {t(actionBackToOrder)}
              </button>
            </div>
          )}
        </div>
      </React.Fragment>
    </Styled>
  );
};

CancelOrder.propTypes = {
  /** Order id */
  orderId: PropTypes.string.isRequired,
  /** Order status */
  orderState: PropTypes.string.isRequired,
  /** Cancel Reasons for the select drop-down */
  cancelReasons: PropTypes.arrayOf(PropTypes.object).isRequired,
  /** Commerce Items */
  commerceItems: PropTypes.objectOf(PropTypes.object).isRequired,
  /** Shipping Groups */
  shippingGroups: PropTypes.objectOf(PropTypes.object).isRequired
};

export default connect(getOrderDetails)(CancelOrder);
