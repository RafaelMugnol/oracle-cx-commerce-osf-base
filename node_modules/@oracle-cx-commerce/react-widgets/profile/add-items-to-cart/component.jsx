/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ProductSelectionContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useCallback, useContext, useState} from 'react';

import MergeCartItemsModal from '@oracle-cx-commerce/react-widgets/profile/add-items-to-cart/components/merge-cart-items';
import {PAGE_CART_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/add-items-to-cart/styles.css';
import {getCurrentOrder} from '@oracle-cx-commerce/commerce-utils/selector';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Widget that shows a "Add Selected Items To Cart" button
 * depending on a selection of products (a combination of product id,sku ids   * and quantity)
 * provided through `ProductSelectionContext`.
 */
const AddItemsToCart = props => {
  const goToPage = useNavigator();

  //contexts
  const {getState, action} = useContext(StoreContext);
  const {productSelection} = useContext(ProductSelectionContext);

  // local states
  const [modalView, setModalView] = useState(false);

  // texts
  const {labelAddSelectedItemsToCart} = props;

  //local utility
  const fetchItemProperties = item => {
    const {commerceItem} = item;
    const {productId, catRefId, quantity} = commerceItem;

    return {
      productId,
      catRefId,
      quantity
    };
  };

  //callbacks

  const closeModal = useCallback(() => {
    setModalView(false);
  }, []);

  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      closeModal();
      action('notify', {level: 'error', message});
    },
    [action, closeModal]
  );

  const onOk = useCallback(() => {
    goToPage(PAGE_CART_LINK);
  }, [goToPage]);

  const addSelectedItemsToCart = useCallback(async () => {
    try {
      const response = await action('addItemsToCart', {
        combineLineItems: 'yes',
        items: productSelection.map(item => fetchItemProperties(item))
      });
      if (response.ok === false) {
        onNotOk(response);
      } else {
        onOk(response);
      }
    } catch (error) {
      onNotOk(error);
    }
  }, [action, onNotOk, onOk, productSelection]);

  //event handlers
  const onAddItemsClick = useCallback(() => {
    const isCartNonEmpty = getCurrentOrder(getState()).numberOfItems;
    if (isCartNonEmpty) {
      setModalView(true);
    } else {
      addSelectedItemsToCart();
    }
  }, [getState, addSelectedItemsToCart]);

  return (
    <Styled id="AddItemsToCart" css={css}>
      <div className="AddItemsToCart">
        {productSelection && Array.isArray(productSelection) && (
          <button
            disabled={productSelection.length === 0}
            type="button"
            className="AddItemsToCart__Button secondary"
            onClick={onAddItemsClick}
            aria-label={labelAddSelectedItemsToCart}
          >
            <span>{labelAddSelectedItemsToCart}</span>
          </button>
        )}

        {typeof window !== 'undefined' && (
          <MergeCartItemsModal
            showMergeCartItemsModal={modalView}
            closeMergeCartItemsModal={closeModal}
            addSelectedItemsToCartHandler={addSelectedItemsToCart}
            {...props}
          ></MergeCartItemsModal>
        )}
      </div>
    </Styled>
  );
};
export default AddItemsToCart;
