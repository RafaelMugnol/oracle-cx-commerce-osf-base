/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {PAGE_CANCEL_ORDER_LINK, PAGE_CREATE_RETURN_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import React, {useContext, useEffect, useState} from 'react';

import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-order-actions/styles.css';
import {getOrderId} from '@oracle-cx-commerce/react-widgets/profile/profile-order-actions/selectors';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/* Profile Order Actions
 ** Allows user to return or cancel the order.
 ** When clicked on this button, navigates to either return or cancel order page.
 */
const ProfileOrderActions = props => {
  const {actionCancelThisOrder, actionReturnItems} = props;
  const {action} = useContext(StoreContext);
  const goToPage = useNavigator();
  const {orderId} = props;
  const [actionDetails, setActionDetails] = useState({isActionAllowed: false});

  /*
    Get Valid Actions for given Order and set actionDetails object
  */
  useEffect(() => {
    action('getValidActionsForOrder', {orderId}).then(response => {
      if (response.ok === true) {
        const {cancel, returns} = response.json;
        if (typeof cancel != 'undefined' && typeof returns != 'undefined') {
          if (cancel.isCancelAllowed) {
            setActionDetails(actionDetails => {
              return {
                ...actionDetails,
                isActionAllowed: true,
                label: t(actionCancelThisOrder),
                url: PAGE_CANCEL_ORDER_LINK
              };
            });
          } else if (returns.isReturnAllowed) {
            setActionDetails(actionDetails => {
              return {
                ...actionDetails,
                isActionAllowed: true,
                label: t(actionReturnItems),
                url: PAGE_CREATE_RETURN_LINK
              };
            });
          }
        }
      }
    });
  }, [action, orderId, actionCancelThisOrder, actionReturnItems]);

  //Shows profile order actions widget only when return or cancel action is allowed on the order.
  return (
    <Styled id="ProfileOrderActions" css={css}>
      <div className="ProfileOrderActions">
        {actionDetails.isActionAllowed && (
          <button className="secondary" type="button" onClick={() => goToPage(`${actionDetails.url}/${orderId}`)}>
            {actionDetails.label}
          </button>
        )}
      </div>
    </Styled>
  );
};

ProfileOrderActions.propTypes = {
  /** Order id */
  orderId: PropTypes.string.isRequired
};

export default connect(getOrderId)(ProfileOrderActions);
