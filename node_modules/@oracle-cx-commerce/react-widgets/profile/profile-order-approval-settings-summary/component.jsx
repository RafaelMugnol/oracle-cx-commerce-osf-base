/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {Suspense, useContext, useEffect, useMemo, useRef} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-order-approval-settings-summary/selectors';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getAddressManagerRoles} from '@oracle-cx-commerce/react-components/utils/address';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-order-approval-settings-summary/styles.css';
import PropTypes from 'prop-types';

const OrderApprovalSettingsDetails = React.lazy(() =>
  import(
    '@oracle-cx-commerce/react-widgets/profile/profile-order-approval-settings-summary/components/order-approval-settings-details'
  )
);

/**
 * Widget to display the orders approval settings summary at profile page.
 * @param {Object} props the properties object
 */
const ProfileOrderApprovalSettingsSummary = props => {
  const {action} = useContext(StoreContext);
  const {headingOrderApprovalSettings} = props;
  const {currentOrganizationId, roles} = props;
  const actionInvokeRef = useRef(true);
  const profileRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  /* Pulls organization data to show purchase limit and approval required */
  useEffect(() => {
    if (profileRoles && profileRoles.isAdmin && actionInvokeRef.current) {
      actionInvokeRef.current = false;
      action('getOrganization', {organizationId: currentOrganizationId});
    }
  }, [action, currentOrganizationId, profileRoles]);

  return (
    profileRoles &&
    profileRoles.isAdmin && (
      <Styled id="ProfileOrderApprovalSettingsSummary" css={css}>
        <div className="ProfileOrderApprovalSettingsSummary">
          <h2>{headingOrderApprovalSettings}</h2>
          <Suspense fallback={null}>
            <OrderApprovalSettingsDetails {...props} />
          </Suspense>
        </div>
      </Styled>
    )
  );
};

ProfileOrderApprovalSettingsSummary.propTypes = {
  /** Current organization id */
  currentOrganizationId: PropTypes.string.isRequired,

  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired
};

export default connect(getComponentData)(ProfileOrderApprovalSettingsSummary);
