/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';

import Badge from '@oracle-cx-commerce/react-components/badge';
import Card from '@oracle-cx-commerce/react-components/card';
import Link from '@oracle-cx-commerce/react-components/link';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-saved-cards/components/profile-saved-card/styles.css';
import {formatCardNumber} from '@oracle-cx-commerce/react-components/utils/payment';
import {getCardTypes} from '@oracle-cx-commerce/commerce-utils/selector';
import {t} from '@oracle-cx-commerce/utils/generic';

//constants
const CONFIRM_DELETE_SAVED_CARD = 'confirm-delete-saved-card/',
  SUCCESS = 'success',
  ERROR = 'error',
  TRUE = 'true';

/**
 * UI component for a card.
 * It show basic detail of card like mask car number, name on card expiry date etc.
 * @param {*} props the required properties
 */
const ProfileSavedCard = props => {
  const {action, getState} = useContext(StoreContext);
  const {
    actionDeleteCard,
    actionMakeDefault,
    alertMarkedDefaultCard,
    id,
    labelDeleteCardLink,
    labelMakeDefaultCardLink,
    labelSavedCard,
    textDefaultCard,
    textExpiryDate
  } = props;

  const {savedCardId, isDefault, nameOnCard, expiryMonth, expiryYear, cardType, cardNumber} = props.cardDetails;

  /**
   * This method returns card type object for given card type id
   * @param {string} cardType - the card type id
   */
  const getCard = cardType => {
    const cardTypes = getCardTypes(getState());

    return cardTypes[cardType];
  };

  //set alt text and src image icon for the card
  const card = getCard(cardType);
  let imgSrc = null;
  let cardImageAltText = cardType;
  if (card) {
    cardImageAltText = card.name;
    if (card.img) {
      imgSrc = card.img.url;
    }
  }

  /**
   * This method will trigger update action to make given card as default card
   * @param {String} savedCardId - the saved card id of the card which is going to be default card
   * @param {String} cardNumber - the saved card number
   */
  const onMarkDefaultCard = async (savedCardId, cardNumber) => {
    props.setInProgress(true);
    const response = await action('updateProfileSavedCard', {savedCardId, setAsDefault: TRUE});
    if (response.ok) {
      const cardNum = cardNumber.substr(cardNumber.length - 4);
      props.setActionResponse({type: SUCCESS, message: t(alertMarkedDefaultCard, {cardNumber: cardNum})});
      props.setInProgress(false);
    } else {
      props.setActionResponse({type: ERROR, message: response.error.message});
      props.setInProgress(false);
    }
  };

  return (
    <Styled id="ProfileSavedCard" css={css}>
      <Card className="ProfileSavedCard">
        <div className="ProfileSavedCard__ImageContainer">
          <img className="ProfileSavedCard__CardImage" src={imgSrc} alt={cardImageAltText} />
        </div>
        <div className="ProfileSavedCard__CardDetails">
          <span className="ProfileSavedCard__CardText">{nameOnCard}</span>
          <span className="ProfileSavedCard__CardText">{formatCardNumber(cardNumber, cardType)}</span>
          <span className="ProfileSavedCard__CardText">
            {t(textExpiryDate, {month: expiryMonth, year: expiryYear})}
          </span>
          <div className="ProfileSavedCard__CardActionsContainer">
            <div className="ProfileSavedCard__MakeDefaultContainer">
              {isDefault ? (
                <Badge badgeText={textDefaultCard} ariaLabel={textDefaultCard} />
              ) : (
                <>
                  <button
                    type="button"
                    className="ProfileSavedCard__MakeDefault"
                    onClick={() => onMarkDefaultCard(savedCardId, cardNumber)}
                    aria-describedby={`makeDefault-${id}${savedCardId}`}
                    disabled={props.inProgress}
                  >
                    {actionMakeDefault}
                  </button>
                  <span
                    className="ProfileSavedCard__MakeDefault__HelpText"
                    id={`makeDefault-${id}${savedCardId}`}
                  >{`${t(labelSavedCard, {
                    cardNumber: cardNumber.substr(cardNumber.length - 4),
                    cardType,
                    nameOnCard,
                    expiryDate: `${expiryMonth}/${expiryYear}`
                  })}${labelMakeDefaultCardLink}`}</span>
                </>
              )}
            </div>
            <div className="ProfileSavedCard__DeleteLinkContainer">
              <span
                aria-label={`${t(labelSavedCard, {
                  cardNumber: cardNumber.substr(cardNumber.length - 4),
                  cardType,
                  nameOnCard,
                  expiryDate: `${expiryMonth}/${expiryYear}`
                })}${isDefault ? ` ${textDefaultCard} ` : ' '}${labelDeleteCardLink}`}
              >
                <Link href={`${CONFIRM_DELETE_SAVED_CARD}${savedCardId}`}>{actionDeleteCard}</Link>
              </span>
            </div>
          </div>
        </div>
      </Card>
    </Styled>
  );
};

export default ProfileSavedCard;
