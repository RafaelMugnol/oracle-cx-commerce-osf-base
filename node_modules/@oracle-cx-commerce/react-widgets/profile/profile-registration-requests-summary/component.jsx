/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {Suspense, useContext, useEffect, useMemo, useRef, useState} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-registration-requests-summary/styles.css';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getAddressManagerRoles} from '@oracle-cx-commerce/react-components/utils/address';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-registration-requests-summary/selectors';
import PropTypes from 'prop-types';

const RegistrationRequestsDetails = React.lazy(() =>
  import(
    '@oracle-cx-commerce/react-widgets/profile/profile-registration-requests-summary/components/registration-requests-details'
  )
);

/**
 * Widget to display the registration requests summary at profile page.
 * @param {Object} props the properties object
 */
const ProfileRegistrationRequestsSummary = props => {
  const {action} = useContext(StoreContext);
  const {headingRegistrationRequests} = props;
  const {currentOrganizationId, roles} = props;
  const [newRegistrationRequests, setNewRegistrationRequests] = useState();
  const [registrationRequestsInReview, setRegistrationRequestsInReview] = useState();
  const [registrationRequestsRequireMoreInfo, setRegistrationRequestsRequireMoreInfo] = useState();

  const actionInvokeRef = useRef(true);

  const profileRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  /* Pulls the contact registration requests in different state */
  useEffect(() => {
    if (currentOrganizationId && profileRoles && profileRoles.isAdmin && actionInvokeRef.current) {
      actionInvokeRef.current = false;
      action('listContactRegistrationRequests', {
        q: `status ne "approved" and organization eq "${currentOrganizationId}" and status eq "new"`
      }).then(response => {
        if (response.ok && response.json && response.json.items) {
          setNewRegistrationRequests(response.json.totalResults);
        }
      });

      action('listContactRegistrationRequests', {
        q: `status ne "approved" and organization eq "${currentOrganizationId}" and status eq "moreInfoNeeded"`
      }).then(response => {
        if (response.ok && response.json && response.json.items) {
          setRegistrationRequestsRequireMoreInfo(response.json.totalResults);
        }
      });

      action('listContactRegistrationRequests', {
        q: `status ne "approved" and organization eq "${currentOrganizationId}" and status eq "review"`
      }).then(response => {
        if (response.ok && response.json && response.json.items) {
          setRegistrationRequestsInReview(response.json.totalResults);
        }
      });
    }
  }, [
    action,
    currentOrganizationId,
    setNewRegistrationRequests,
    setRegistrationRequestsInReview,
    setRegistrationRequestsRequireMoreInfo,
    profileRoles
  ]);

  return (
    profileRoles &&
    profileRoles.isAdmin && (
      <Styled id="ProfileRegistrationRequestsSummary" css={css}>
        <div className="ProfileRegistrationRequestsSummary">
          <h2>{headingRegistrationRequests}</h2>
          <Suspense fallback={null}>
            <RegistrationRequestsDetails
              {...props}
              newRegistrationRequests={newRegistrationRequests}
              registrationRequestsInReview={registrationRequestsInReview}
              registrationRequestsRequireMoreInfo={registrationRequestsRequireMoreInfo}
            />
          </Suspense>
        </div>
      </Styled>
    )
  );
};

ProfileRegistrationRequestsSummary.propTypes = {
  /** Current organization id */
  currentOrganizationId: PropTypes.string.isRequired,

  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired
};

export default connect(getComponentData)(ProfileRegistrationRequestsSummary);
