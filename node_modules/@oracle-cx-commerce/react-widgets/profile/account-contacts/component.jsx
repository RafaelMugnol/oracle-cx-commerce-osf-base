/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useMemo, useState} from 'react';
import {
  allRoles,
  convertRolesToDisplayableOptions,
  defaultRole,
  getSortOptions,
  populateItemsPerPage
} from '@oracle-cx-commerce/react-widgets/profile/account-contacts/utils';

import ContactInfo from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/contact-info';
import ItemsPerPageSelect from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/items-page-select';
import IterateListItems from '@oracle-cx-commerce/react-components/load-more/list-items';
import Link from '@oracle-cx-commerce/react-components/link';
import LoadMore from '@oracle-cx-commerce/react-components/load-more';
import {PAGE_ADD_ACCOUNT_CONTACT_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Plus from '@oracle-cx-commerce/react-components/icons/plus';
import PropTypes from 'prop-types';
import RoleSelect from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/role-select';
import Search from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/search';
import SortSelect from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/sort-select';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/account-contacts/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/account-contacts/selectors';
import {getRoles} from '@oracle-cx-commerce/commerce-utils/selector';

const AccountContacts = props => {
  const {
    isDelegatedAdmin,
    currentOrganizationId,
    labelNewContact,
    headingAccountContacts,
    textFilterByNameOrEmail,
    textItemsPerPage,
    itemsPerPageList,
    labelAriaSelectRole,
    labelAriaSortBy,
    labelAriaListOf,
    labelAriaSelectItemsPerPage,
    labelLoadMore,
    textSearchResult,
    textAllRoles,
    textRetrievingAccountContacts,
    textNoAccountContactsAvailable,
    labelLoadingAccountContacts,
    searchIconAltText
  } = props;

  const [roleLocaleTranslationMap] = useState(() => {
    return allRoles.reduce((newMap, role) => {
      newMap[role] = props[role];

      return newMap;
    }, {});
  });

  const [itemsPerPage] = useState(populateItemsPerPage(itemsPerPageList, textItemsPerPage));
  const [contactIds, setContactIds] = useState([]);
  const {action, getState} = useContext(StoreContext);
  const [roleFilter, setRoleFilter] = useState([{...defaultRole, display: textAllRoles}]);
  const [selectedRole, setSelectedRole] = useState(defaultRole.repositoryId);
  const [selectedLimit, setSelectedLimit] = useState(itemsPerPage[0].value);
  const [sortOptions] = useState(getSortOptions(props));
  const defaultSort = `${sortOptions[0].sortTerm}:${sortOptions[0].order}`;
  const [selectedSort, setSelectedSort] = useState(defaultSort);
  const [searchQuery, setSearchQuery] = useState('');
  const [fetchingData, setFetchingData] = useState(false);
  const [resetPage, setResetPage] = useState(false);

  const createQueryAndFetch = useMemo(() => {
    setFetchingData(true);
    setResetPage(true);
    const payload = {
      includeSecondaryOrganizationsCount: true,
      limit: selectedLimit,
      sort: selectedSort
    };
    let q = `parentOrganization eq "${currentOrganizationId}" OR secondaryOrganizations co "${currentOrganizationId}"`;
    if (selectedRole !== defaultRole.repositoryId) {
      q = `roles.id eq "${selectedRole}"`;
      payload.includeSecondaryOrganizationsCount = false;
    }
    if (searchQuery !== '') {
      q = `(firstName co "${searchQuery}" OR lastName co "${searchQuery}" OR email co "${searchQuery}") AND (${q})`;
      payload.includeSecondaryOrganizationsCount = false;
    }
    payload.q = q;

    return payload;
  }, [selectedRole, searchQuery, currentOrganizationId, selectedLimit, selectedSort, setFetchingData]);

  const updateContactIds = useCallback(
    newIds => {
      setResetPage(false);
      setContactIds(oldIds => [...oldIds, ...newIds]);
    },
    [setContactIds]
  );

  useEffect(() => {
    action('getOrganization', {organizationId: currentOrganizationId}).then(response => {
      if (response.ok) {
        const roles = getRoles(getState());
        let rolesForCurOrg = Object.values(roles).filter(roleInfo => {
          return roleInfo.relativeTo === currentOrganizationId && roleInfo.function !== 'buyer';
        });
        rolesForCurOrg = convertRolesToDisplayableOptions(rolesForCurOrg, roleLocaleTranslationMap);
        setRoleFilter(oldState => {
          return [...oldState, ...rolesForCurOrg];
        });
      } else if (response.error) {
        action('notify', {level: 'error', message: response.error.message});
      }
    });
  }, [action, currentOrganizationId, getState, roleLocaleTranslationMap]);

  const handleLoadMore = useCallback(
    async payloadOffset => {
      createQueryAndFetch.offset = payloadOffset;
      const response = await action('listOrganizationMembers', createQueryAndFetch);
      setFetchingData(false);
      if (response.ok && response.json && response.json.items) {
        const recentListingItems = [];
        for (const item of response.json.items) {
          recentListingItems.push(item['id']);
        }
        updateContactIds(recentListingItems);

        return {totalNumberOfItems: response.json.totalResults, currentItemsCount: recentListingItems.length};
      }
      if (response.error) {
        action('notify', {level: 'error', message: response.error.message});
      }
    },
    [action, createQueryAndFetch, updateContactIds]
  );

  const onSearchSubmit = value => {
    setContactIds([]);
    setSearchQuery(value);
  };

  const onRoleChange = useCallback(
    value => {
      setContactIds([]);
      setSelectedRole(value);
    },
    [setSelectedRole]
  );

  const onSortChange = useCallback(
    value => {
      setContactIds([]);
      setSelectedSort(value);
    },
    [setSelectedSort]
  );

  const onItemsPerPageChange = useCallback(
    value => {
      setContactIds([]);
      setSelectedLimit(value);
    },
    [setSelectedLimit]
  );

  return (
    <Styled id="AccountContacts" css={css}>
      {isDelegatedAdmin && (
        <div className="AccountContacts">
          <h1>{headingAccountContacts}</h1>
          <div className="AccountContacts__FilterOptions">
            <div className="AccountContacts__NewContactContainer">
              <Link className="NewContactContainer__Link" href={PAGE_ADD_ACCOUNT_CONTACT_LINK} tabIndex="0">
                <Plus className="NewContactsContainer__AddIcon"></Plus>
                <span className="NewContactsContainer__label">{labelNewContact}</span>
              </Link>
            </div>
            <div className="AccountContacts__RoleSelect">
              <RoleSelect
                defaultRole={defaultRole.repositoryId}
                onRoleChange={onRoleChange}
                roleFilter={roleFilter}
                labelAriaSelectRole={labelAriaSelectRole}
              ></RoleSelect>
            </div>
            <div className="AccountContacts__SortSelect">
              <SortSelect
                onSortChange={onSortChange}
                selectedSort={selectedSort}
                sortOptions={sortOptions}
                labelAriaSelectSortOption={labelAriaSortBy}
              ></SortSelect>
            </div>
            <div className="AccountContacts__SearchBar">
              <Search
                searchInput={onSearchSubmit}
                placeholderLabel={textFilterByNameOrEmail}
                searchIconAltText={searchIconAltText}
              ></Search>
            </div>
            <div id="account-contacts-itemsPerPage" className="AccountContacts__ItemsPerPageSelect">
              <ItemsPerPageSelect
                itemsPerPage={itemsPerPage}
                selectedItemsPerPage={selectedLimit}
                labelAriaSelectItemsPerPage={labelAriaSelectItemsPerPage}
                onItemsPerPageChange={onItemsPerPageChange}
              ></ItemsPerPageSelect>
            </div>
            {/* end of filter options div */}
          </div>
          {fetchingData && (
            <div className="AccountContacts__FetchingDataText">
              <span>{textRetrievingAccountContacts}</span>
            </div>
          )}
          {!fetchingData && searchQuery && (
            <div className="AccountContacts__SearchSummaryContainer">
              <span>{textSearchResult}</span>
              <span className="SearchSummaryContainer__SearchText">{`"${searchQuery}"`}</span>
            </div>
          )}
          <div className="AccountContacts__ContactList" role="status" aria-label={`${labelAriaListOf} ${headingAccountContacts}`}>
            {!fetchingData && contactIds.length < 1 && (
              <span className="AccountContacts__SearchResults--empty">{textNoAccountContactsAvailable}</span>
            )}
            <div className="AccountContacts__CardGrid">
              <IterateListItems
                child={ContactInfo}
                listOFItems={contactIds}
                roleLocaleTranslationMap={roleLocaleTranslationMap}
                {...props}
              ></IterateListItems>
            </div>
          </div>

          <div className="AccountConatcts__LoadMore">
            <LoadMore
              numberOfItemsToLoad={selectedLimit}
              handleLoadMore={handleLoadMore}
              loadMoreLabel={labelLoadMore}
              loadMoreLoadingLabel={labelLoadingAccountContacts}
              resetPage={resetPage}
            ></LoadMore>
          </div>
        </div>
      )}
    </Styled>
  );
};

AccountContacts.propTypes = {
  /** Boolean to show whether delegated admin user or not evaluated based on redux state */
  isDelegatedAdmin: PropTypes.bool.isRequired,

  /**
   * Current organization id of this user from redux
   * state(ClientRepository->context->global->currentOrganization)
   */
  currentOrganizationId: PropTypes.string.isRequired,

  /**
   * Comma separated string of numbers used for populating Items Per Page drop-down box on the widget.
   */
  itemsPerPageList: PropTypes.string.isRequired
};

export default connect(getComponentData)(AccountContacts);
