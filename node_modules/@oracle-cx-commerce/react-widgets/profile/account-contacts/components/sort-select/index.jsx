/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import DropdownArrowIcon from '@oracle-cx-commerce/react-components/icons/dropdown-arrow';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/sort-select/styles.css';
import PropTypes from 'prop-types';

const {useCallback} = React;
const SortSelect = props => {
  const {onSortChange, sortOptions, labelAriaSelectSortOption, selectedSort} = props;
  const sortChange = useCallback(
    event => {
      onSortChange(event.target.value);
    },
    [onSortChange]
  );

  return (
    <Styled id="SortSelect" css={css}>
      <Dropdown
        className={'SortSelect__DropDown'}
        onChange={sortChange}
        value={selectedSort}
        aria-label={labelAriaSelectSortOption}
        icon={
          <div>
            <DropdownArrowIcon className="RoleSelect__DownArrowIcon"></DropdownArrowIcon>
          </div>
        }
      >
        {sortOptions.map(sortOption => (
          <option key={sortOption.display} value={`${sortOption.sortTerm}:${sortOption.order}`}>
            {sortOption.display}
          </option>
        ))}
      </Dropdown>
    </Styled>
  );
};

SortSelect.propTypes = {
  /**
   * Different sort options
   */
  sortOptions: PropTypes.objectOf(
    PropTypes.shape({
      display: PropTypes.string.isRequired,
      sortTerm: PropTypes.string.isRequired,
      order: PropTypes.string.isRequired
    })
  ).isRequired,

  /** Function to be invoked on selecting different sort option */
  onSortChange: PropTypes.func.isRequired,

  /**
   * Selected sort option
   */
  selectedSort: PropTypes.string.isRequired
};

export default React.memo(SortSelect);
