/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import Contact from '@oracle-cx-commerce/react-components/icons/contact';
import Link from '@oracle-cx-commerce/react-components/link';
import {PAGE_EDIT_ACCOUNT_CONTACT_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {convertRolesToDisplayableOptions} from '@oracle-cx-commerce/react-widgets/profile/account-contacts/utils';
import css from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/contact-info/styles.css';

const ContactInfo = props => {
  const {profiles, roles, itemId: contactId, textActive, textInactive, roleLocaleTranslationMap} = props;
  const curProfile = profiles[contactId];
  let roleString;
  if (curProfile) {
    const rolesForCurUser = convertRolesToDisplayableOptions(
      curProfile.roles.reduce((acc, roleId) => {
        if (roles[roleId]) {
          acc.push(roles[roleId]);
        }

        return acc;
      }, []),
      roleLocaleTranslationMap
    );

    roleString = Object.keys(rolesForCurUser).reduce((acc, roleId) => {
      return acc.concat(
        `${
          rolesForCurUser[roleId].function && rolesForCurUser[roleId].function === 'custom'
            ? rolesForCurUser[roleId].name
            : rolesForCurUser[roleId].display
        }, `
      );
    }, '');
    roleString = roleString.length > 0 ? roleString.substring(0, roleString.length - 2) : roleString;
  }

  return (
    <Styled id="ContactInfo" css={css}>
      <Link
        href={`${PAGE_EDIT_ACCOUNT_CONTACT_LINK}/${contactId}`}
        className="ContactInfo__EditContactLink"
        key={contactId}
      >
        {curProfile && (
          <div className="ContactInfo" id={`contact-info-${curProfile.id}`}>
            <div className="ContactInfo__PersonalDetailsContainer">
              <div className="ContactInfo__Icon">
                {curProfile.active === true ? (
                  <Contact className="ContactIcon"></Contact>
                ) : (
                  <Contact className="Contact__Icon--Inactive"></Contact>
                )}
              </div>
              <div className="ContactInfo__BasicInfo">
                <span className="ContactInfo__NameSpan">{curProfile.firstName}</span>
                <span className="ContactInfo__NameSpan">{` ${curProfile.lastName}`}</span>
                <div className="ContactInfo__Email">{curProfile.email}</div>
              </div>
              <div>{curProfile.active ? textActive : textInactive}</div>
            </div>
            <div className="ContactInfo__OrgDetailsContainer">
              <div>{roleString}</div>
            </div>
          </div>
        )}
      </Link>
    </Styled>
  );
};

ContactInfo.propTypes = {
  /**
   * The profiles (user) object from redux state(ProfileRepository->profiles)
   */
  profiles: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string.isRequired,
      lastName: PropTypes.string.isRequired,
      email: PropTypes.string.isRequired,
      id: PropTypes.string.isRequired,
      active: PropTypes.bool.isRequired
    })
  ).isRequired,

  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired,

  /** User profile id */
  itemId: PropTypes.string.isRequired,

  /** Roles to corresponding translation map */
  roleLocaleTranslationMap: PropTypes.shape.isRequired
};

export default ContactInfo;
