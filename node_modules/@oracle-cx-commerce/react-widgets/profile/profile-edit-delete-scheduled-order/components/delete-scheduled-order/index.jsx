/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ContainerContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext} from 'react';

import Alert from '@oracle-cx-commerce/react-components/alert';
import Modal from '@oracle-cx-commerce/react-components/modal';
import {PAGE_SCHEDULED_ORDERS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-edit-delete-scheduled-order/components/delete-scheduled-order/styles.css';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

const DeleteScheduledOrderModal = props => {
  const {
    textDeleteScheduleWarning,
    textDeleteScheduledOrderConfirm,
    textDeleteScheduledOrder,
    actionConfirm,
    actionCancel,
    closeDeleteModal,
    closeLinkAltText,
    showDeleteModal,
    setShowPopoverMenu,
    cssOverride
  } = props;
  const {action} = useContext(StoreContext);
  const scheduledOrder = useContext(ContainerContext);
  const {id} = scheduledOrder ? scheduledOrder : {};
  const goToPage = useNavigator();

  /**
   * Failure call back for the getOrder action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  const onOk = useCallback(() => {
    goToPage(PAGE_SCHEDULED_ORDERS_LINK);
  }, [goToPage]);

  const handleDeleteScheduledOrder = useCallback(
    event => {
      event.preventDefault();
      action('deleteScheduledOrder', {
        scheduledOrderId: id
      })
        .then(response => {
          if (response.ok === true) {
            onOk();
          } else {
            onNotOk(response);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    },
    [action, id, onOk, onNotOk]
  );

  const handleCloseDeleteModal = useCallback(() => {
    if (setShowPopoverMenu) setShowPopoverMenu(false);
    closeDeleteModal();
  }, [setShowPopoverMenu, closeDeleteModal]);

  return (
    <Styled id="DeleteScheduledOrder" css={css}>
      <Modal
        cssOverride={cssOverride}
        show={showDeleteModal}
        onClose={handleCloseDeleteModal}
        closeIconTitle={closeLinkAltText}
        closeArialLabel={closeLinkAltText}
        title={textDeleteScheduledOrder}
      >
        <section className="DeleteScheduledOrder__Main">
          <div>
            <div className="DeleteScheduledOrder__AlertBox">
              <Alert
                id={`scheduledOrderDeleteWarning-${id}`}
                type="warning"
                message={
                  <div className="DeleteScheduledOrder__WarnMessageContainer">
                    <div className="DeleteScheduledOrder__WarnMessage">
                      {`${textDeleteScheduleWarning}`}
                      <br></br>
                      <br></br>
                      {`${textDeleteScheduledOrderConfirm}`}
                    </div>
                  </div>
                }
              ></Alert>
            </div>

            <div className="DeleteScheduledOrder__Controls">
              <div className="DeleteScheduledOrder__ConfirmButton">
                <button
                  className="DeleteScheduledOrder__ConfirmButton"
                  type="button"
                  onClick={handleDeleteScheduledOrder}
                  aria-label={actionConfirm}
                >
                  {actionConfirm}
                </button>
              </div>
              <div className="DeleteScheduledOrder__CancelButton">
                <button
                  className={'DeleteScheduledOrder__CancelButton secondary'}
                  type="button"
                  onClick={handleCloseDeleteModal}
                  aria-label={actionCancel}
                >
                  {actionCancel}
                </button>
              </div>
            </div>
          </div>
        </section>
      </Modal>
    </Styled>
  );
};

export default DeleteScheduledOrderModal;
