/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ContainerContext, ScheduledOrderContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useEffect, useState, useMemo} from 'react';
import CheckoutScheduledOrder from '@oracle-cx-commerce/react-widgets/checkout/checkout-scheduled-order/component';
import {checkDateTypeSupported} from '@oracle-cx-commerce/react-widgets/checkout/checkout-scheduled-order/utils';
import Modal from '@oracle-cx-commerce/react-components/modal';
import {PAGE_SCHEDULED_ORDER_DETAILS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-edit-delete-scheduled-order/components/edit-scheduled-order/styles.css';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {formatDate} from '@oracle-cx-commerce/utils/generic';

/**
 * Edit schedule settings, allows user to edit schedule order.
 * @param {*} props
 */
const EditScheduledOrderSettings = props => {
  const {handleCloseEditModal} = props;
  const {action} = useContext(StoreContext);
  const scheduledOrder = useContext(ContainerContext);
  const [createSchedulePayload, setCreateSchedulePayload] = useState({});
  const {id} = scheduledOrder ? scheduledOrder : {};
  const goToPage = useNavigator();
  const editScheduleInfoEnabled = true;

  const isDateTypeSupported = useMemo(() => {
    return checkDateTypeSupported();
  }, []);

  const formatDateToDisplay = useCallback(
    (dateVal = '') => {
      if (isDateTypeSupported) return formatDate(dateVal);
      if (!dateVal) return '';
      const date = new Date(dateVal);
      let dateRes = '';
      if (date.toString() === 'Invalid Date') {
        dateRes = '';
      }
      dateRes = `${`0${date.getMonth() + 1}`.slice(-2)}/${`0${date.getDate()}`.slice(-2)}/${date.getFullYear()}`;

      return dateRes;
    },
    [isDateTypeSupported]
  );

  useEffect(() => {
    if (createSchedulePayload['schedule'] === undefined) {
      setCreateSchedulePayload({
        schedule: {
          daysInMonth: scheduledOrder.schedule.daysInMonth ? scheduledOrder.schedule.daysInMonth : [],
          occurrenceInDay: scheduledOrder.schedule.occurrenceInDay,
          monthsInYear: scheduledOrder.schedule.monthsInYear
            ? scheduledOrder.schedule.monthsInYear
            : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
          daysOfWeek: scheduledOrder.schedule.daysOfWeek ? scheduledOrder.schedule.daysOfWeek : [1],
          weeksInMonth: scheduledOrder.schedule.weeksInMonth ? scheduledOrder.schedule.weeksInMonth : [1, 2, 3, 4, 5]
        },
        templateOrderId: scheduledOrder.templateOrderId,
        scheduleType: scheduledOrder.scheduleType ? scheduledOrder.scheduleType : 'calendar',
        endDate: scheduledOrder.endDate ? formatDateToDisplay(scheduledOrder.endDate) : '',
        startDate: scheduledOrder.startDate ? formatDateToDisplay(scheduledOrder.startDate) : '',
        name: scheduledOrder.name ? scheduledOrder.name : '',
        state: scheduledOrder.state ? scheduledOrder.state : 'active',
        isScheduleCurrentOrder: true
      });
    }
  }, [createSchedulePayload, formatDateToDisplay, scheduledOrder]);

  /**
   * Failure call back for the updateScheduledOrder action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  /**
   * Success call back for the updateScheduledOrder action
   */
  const onOk = useCallback(() => {
    handleCloseEditModal();
    goToPage(`${PAGE_SCHEDULED_ORDER_DETAILS_LINK}/${id}`);
  }, [handleCloseEditModal, goToPage, id]);

  const handleEditScheduledOrder = useCallback(
    createSchedulePayload => {
      const payload = {
        scheduledOrderId: id,
        ...createSchedulePayload,
        startDate: formatDate(createSchedulePayload.startDate),
        endDate: formatDate(createSchedulePayload.endDate)
      };
      delete payload.isScheduleCurrentOrder;
      const {daysInMonth, ...sceduleInfoFinal} = payload.schedule;
      if (daysInMonth && daysInMonth.length === 0) {
        payload.schedule = sceduleInfoFinal;
      }
      action('updateScheduledOrder', payload)
        .then(response => {
          if (response.ok === true) {
            onOk();
          } else {
            onNotOk(response);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    },
    [action, id, onOk, onNotOk]
  );

  return (
    <Styled id="EditScheduledOrderModal" css={css}>
      <div className="EditScheduledOrderModal"></div>
      <section className="EditScheduledOrderModal__Main">
        <ScheduledOrderContext.Provider
          value={{
            createSchedulePayload,
            setCreateSchedulePayload,
            editScheduleInfoEnabled
          }}
        >
          <CheckoutScheduledOrder
            onConfirm={handleEditScheduledOrder}
            onCancel={handleCloseEditModal}
            {...props}
          ></CheckoutScheduledOrder>
        </ScheduledOrderContext.Provider>
      </section>
    </Styled>
  );
};

/**
 * Component to display Edit Schedule order modal
 * @param {*} props
 */

const EditScheduledOrderModal = props => {
  const {
    textEditSchedule,
    closeEditModal,
    showEditModal,
    closeLinkAltText,
    textAllFieldsRequired,
    cssOverride,
    setShowPopoverMenu
  } = props;

  const handleCloseEditModal = useCallback(() => {
    if (setShowPopoverMenu) setShowPopoverMenu(false);
    closeEditModal();
  }, [setShowPopoverMenu, closeEditModal]);

  return (
    <Styled id="EditScheduledOrderModal" css={css}>
      <Modal
        cssOverride={cssOverride}
        show={showEditModal}
        onClose={handleCloseEditModal}
        closeIconTitle={closeLinkAltText}
        closeAriaLabel={closeLinkAltText}
        title={textEditSchedule}
      >
        <div className="EditScheduledOrderModal__FieldsRequired">{textAllFieldsRequired}</div>
        <EditScheduledOrderSettings handleCloseEditModal={handleCloseEditModal} {...props}></EditScheduledOrderSettings>
      </Modal>
    </Styled>
  );
};

export default EditScheduledOrderModal;
