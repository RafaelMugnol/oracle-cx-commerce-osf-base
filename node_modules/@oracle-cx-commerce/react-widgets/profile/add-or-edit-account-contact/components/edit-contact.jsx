/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useState} from 'react';

import ActiveSwitch from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/active-switch';
import CancelSaveActions from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/cancel-save-actions';
import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import Form from '@oracle-cx-commerce/react-components/form';
import {PAGE_ACCOUNT_CONTACTS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import RoleOptions from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/role-options';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import UserNameSection from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/user-name-section';
import {isMultipleAccounts} from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/utils';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Component containing edit account contact form.
 * @param {Object} props the properties object
 */
const EditAccountContact = props => {
  const {
    labelFirstName,
    labelLastName,
    labelEmailAddress,
    labelRemoveContact,
    actionConfirm,
    headingEditContact,
    actionSave,
    labelCancel,
    labelRemove,
    textActive,
    textAllFieldsRequired,
    labelYes,
    labelNo,
    labelMultipleAccounts,
    textConfirmContactRemoval,
    textContactRemovalWarning,
    headingConfirmContactRemoval,
    messageContactRemoved,
    closeLinkAltText
  } = props;

  const {
    rolesRef,
    isActive,
    currentContactId,
    currentContactProfile,
    currentLoggedInUserId,
    onSaveClick,
    activeChangeHandler,
    stopRemoveContactRender,
    ...otherProps
  } = props;
  const ownProfile = currentLoggedInUserId === currentContactProfile.id ? true : false;
  const [showRemoveModal, setShowRemoveModal] = useState(false);
  const {action} = useContext(StoreContext);
  const goToPage = useNavigator();

  /* Confirmation Modal close button handler */
  const onClose = () => {
    setShowRemoveModal(false);
  };

  /* Confirmation Modal cancel button click handler */
  const handleModalCancelClick = () => {
    onClose();
    goToPage(PAGE_ACCOUNT_CONTACTS_LINK);
  };

  /* Confirmation Modal confirm button click handler.
   * It closes the modal and calls removeOrganizationMember action.
   */
  const handleModalConfirmClick = () => {
    onClose();
    //To stop getOrganizationMember call from parent component when profile is removed from the state.
    stopRemoveContactRender(true);
    action('removeOrganizationMembers', {memberIds: [currentContactId]}).then(response => {
      if (!response.ok && response.error) {
        action('notify', {level: 'error', message: response.error.message});
      } else {
        action('notify', {level: 'success', message: messageContactRemoved});
        goToPage(PAGE_ACCOUNT_CONTACTS_LINK);
      }
    });
  };

  /* Remove Contact link handler on the form. It opens up the confirmation modal*/
  const onRemoveClick = () => {
    setShowRemoveModal(true);
  };

  return (
    <>
      <div className="EditAccoun tContact">
        <h1 id="page-heading">{headingEditContact}</h1>
        <Form onSubmit={onSaveClick} setInProgress={false} noValidate className="EditAccountContact__Form">
          <div className="EditAccountContact__AllFieldsRequiredText">{textAllFieldsRequired}</div>
          <UserNameSection
            labelFirstName={labelFirstName}
            labelLastName={labelLastName}
            firstName={currentContactProfile.firstName}
            lastName={currentContactProfile.lastName}
            id="edit-contact"
          ></UserNameSection>
          <div className="EditAccountContact__EmailSection">
            <label htmlFor="email-address-edit-contact">{labelEmailAddress}</label>
            <div className="EditAccountContact__Email" id="email-address-edit-contact" aria-label={labelEmailAddress}>
              {currentContactProfile.email}
            </div>
          </div>
          <RoleOptions
            profile={currentContactProfile}
            rolesRef={rolesRef}
            id="role-select-edit-contact"
            ownProfile={ownProfile}
            {...otherProps}
          />
          <ActiveSwitch
            textActive={textActive}
            activeChangeHandler={activeChangeHandler}
            isActive={isActive}
            disabled={ownProfile}
          />
          <div>
            <div className="EditAccountContact__MultipleAccountsSection">
              <label htmlFor={'edit-account-contact-multiple-account'}>{labelMultipleAccounts}</label>
              <div id="edit-account-contact-multiple-account" aria-label={labelMultipleAccounts}>
                {isMultipleAccounts(currentContactProfile) ? labelYes : labelNo}
              </div>
            </div>
            {!ownProfile && (
              <>
                <button type="button" className="secondary EditAccountContact__RemoveButton" onClick={onRemoveClick}>
                  {labelRemoveContact}
                </button>
                <div className="EditAccountContact__Border" />
              </>
            )}
          </div>
          <CancelSaveActions labelCancel={labelCancel} actionSave={actionSave} />
        </Form>
        <ConfirmationDialog
          show={showRemoveModal}
          cancelCallback={handleModalCancelClick}
          confirmCallback={handleModalConfirmClick}
          closeCallback={onClose}
          title={headingConfirmContactRemoval}
          labelConfirm={actionConfirm}
          labelCancel={labelCancel}
          closeArialLabel={closeLinkAltText}
          alertMessage={
            <span className="ConfirmationModalBody__AlertMessage">{`${labelRemove}: ${currentContactProfile.firstName} ${currentContactProfile.lastName}`}</span>
          }
          confirmMessage={
            <div className="ConfirmationModalBody__MessageSection">
              <div className="MessageSection__Line"> {textConfirmContactRemoval}</div>
              <div className="MessageSection__Line"> {textContactRemovalWarning}</div>
            </div>
          }
        ></ConfirmationDialog>
      </div>
    </>
  );
};
EditAccountContact.propTypes = {
  /**
   * Profile object (as obtained from redux state ProfileRepository->profiles[profileId]) of the user whose profile has to be edited.
   */
  currentContactProfile: PropTypes.shape({
    id: PropTypes.string.isRequired,
    firstName: PropTypes.string.isRequired,
    lastName: PropTypes.string.isRequired,
    email: PropTypes.string.isRequired,
    roles: PropTypes.arrayOf(PropTypes.string).isRequired,
    parentOrganization: PropTypes.string.isRequired,
    secondaryOrganizationsCount: PropTypes.number
  }).isRequired,
  /**
   * Roles array containing all the roles of the current organization.
   */
  roles: PropTypes.arrayOf(
    PropTypes.shape({
      function: PropTypes.string.isRequired,
      relativeTo: PropTypes.string.isRequired,
      repositoryId: PropTypes.string.isRequired
    }).isRequired
  ),
  /**
   * Object returned by react useRef hook. It holds reference to the role options in the form
   */
  rolesRef: PropTypes.shape({
    current: PropTypes.object
  }),
  /**
   * Function to submit form on click of save button.
   */
  onSaveClick: PropTypes.func.isRequired,
  /**
   * Function to set the state in parent component to prohibit extra endpoint call due to component re render.
   */
  stopRemoveContactRender: PropTypes.func.isRequired,
  /**
   * Profile id of the user currently logged-in.
   */
  currentLoggedInUserId: PropTypes.string.isRequired,
  /**
   * Profile id of the user whose profile is being edited.
   */
  currentContactId: PropTypes.string.isRequired,
  /**
   * Flag to indicate Active status of the user whose profile is edited.
   */
  isActive: PropTypes.bool.isRequired,
  /**
   * Function to handle onChange event of the active toggle switch.
   */
  activeChangeHandler: PropTypes.func.isRequired
};
EditAccountContact.defaultProps = {
  roles: [],
  rolesRef: undefined
};
export default EditAccountContact;
