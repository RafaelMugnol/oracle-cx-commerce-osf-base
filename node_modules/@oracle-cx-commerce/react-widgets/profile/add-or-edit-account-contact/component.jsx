/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';

import AddAccountContact from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/add-contact';
import EditAccountContact from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/components/edit-contact';
import {PAGE_ACCOUNT_CONTACTS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/styles.css';
import {formToJson} from '@oracle-cx-commerce/react-components/utils';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/add-or-edit-account-contact/selectors';
import {getProfiles} from '@oracle-cx-commerce/commerce-utils/selector';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Widget to add a new contact or edit the details of an existing account contact.
 * The contents of the widget will be visible to only B2B delegated admin users.
 * If the url contains profile id as path param then edit contact form is displayed
 * else add new contact form is shown
 */
const AddOrEditAccountContact = props => {
  const {
    isDelegatedAdmin,
    isEditAddress,
    currentLoggedInUserId,
    currentContactId,
    currentContactProfile,
    currentOrganizationId,
    messageContactCreationSuccess,
    messageContactSaved,
    closeLinkAltText,
    headingAddContact,
    ...otherProps
  } = props;

  const {action, getState} = useContext(StoreContext);
  const rolesRef = useRef(null);
  const [isActive, setIsActive] = useState(currentContactProfile ? currentContactProfile.active : true);
  const [removeContactRender, setRemoveContactRender] = useState(false);
  const [isRolesAvailable, setIsRolesAvailable] = useState(false);
  const goToPage = useNavigator();

  /** Makes getOrganizationMember call in case of edit-account wen contact to
   *  edit is not present in redux state.
   */
  useEffect(() => {
    if (!currentContactProfile && currentContactId && !removeContactRender) {
      action('listOrganizationMembers', {
        q: `id eq "${currentContactId}"`,
        includeSecondaryOrganizationsCount: true
      }).then(response => {
        if (response.ok) {
          const profile = getProfiles(getState())[currentContactId];
          setIsActive(profile.active);
        } else if (response.error) {
          action('notify', {level: 'error', message: response.error.message});
        }
      });
    }
  }, [currentContactProfile, setIsActive, currentContactId, action, removeContactRender, getState]);

  //for displaying all the roles
  useEffect(() => {
    if (!removeContactRender && !isRolesAvailable) {
      action('getOrganization', {organizationId: currentOrganizationId}).then(response => {
        setIsRolesAvailable(true);
        if (response.error) {
          action('notify', {level: 'error', message: response.error.message});
        }
      });
    }
  }, [action, removeContactRender, currentOrganizationId, isRolesAvailable]);

  const activeChangeHandler = () => {
    setIsActive(!isActive);
  };

  /** Updates details of the member of an organization in case of edit contact
   *  Or Adds new member to the current organization in case of add contact
   */
  const onSaveClick = useCallback(
    event => {
      event.preventDefault();
      const payload = formToJson(event.target);
      const listOfRoles = [];
      rolesRef.current.querySelectorAll('input').forEach(element => {
        if (element.checked) {
          if (element.defaultValue && element.defaultValue !== 'custom') {
            listOfRoles.push({function: element.defaultValue, relativeTo: {id: currentOrganizationId}});
          } else if (element.defaultValue && element.defaultValue === 'custom') {
            listOfRoles.push({
              function: element.defaultValue,
              relativeTo: {id: currentOrganizationId},
              repositoryId: element.title
            });
          }
        }
      });
      payload.roles = listOfRoles;
      payload.active = isActive;
      let actionId;
      if (isEditAddress) {
        payload.memberId = currentContactId;
        actionId = 'updateOrganizationMember';
      } else {
        payload.receiveEmailGlobal = true;
        actionId = 'createOrganizationMember';
      }
      action(actionId, payload).then(response => {
        if (response.ok) {
          const successMessage = isEditAddress ? messageContactSaved : messageContactCreationSuccess;
          action('notify', {level: 'success', message: successMessage});
          goToPage(PAGE_ACCOUNT_CONTACTS_LINK);
        } else if (response.error) {
          action('notify', {level: 'error', message: response.error.message});
        }
      });

      return false;
    },
    [
      isActive,
      isEditAddress,
      action,
      currentOrganizationId,
      currentContactId,
      messageContactSaved,
      messageContactCreationSuccess,
      goToPage
    ]
  );

  const addAndEditProps = {
    ...otherProps,
    rolesRef,
    isActive,
    onSaveClick,
    activeChangeHandler
  };

  return (
    <Styled id="EditAccountContact" css={css}>
      <div className="AddOrEditAccountContact">
        {isDelegatedAdmin && isEditAddress && currentContactProfile && (
          <EditAccountContact
            currentContactId={currentContactId}
            currentContactProfile={currentContactProfile}
            currentLoggedInUserId={currentLoggedInUserId}
            stopRemoveContactRender={setRemoveContactRender}
            closeLinkAltText={closeLinkAltText}
            {...addAndEditProps}
          />
        )}
        {isDelegatedAdmin && !isEditAddress && (
          <AddAccountContact headingAddContact={headingAddContact} {...addAndEditProps} />
        )}
      </div>
    </Styled>
  );
};
AddOrEditAccountContact.propTypes = {
  /**
   * Flag to indicate if the current logged in user is having role of Delegated Admin in the current organization.
   */
  isDelegatedAdmin: PropTypes.bool.isRequired,
  /**
   * Current organization id of the logged in user.
   */
  currentOrganizationId: PropTypes.string.isRequired,
  /**
   * Profile id of current logged in user
   */
  currentLoggedInUserId: PropTypes.string.isRequired,
  /**
   * Flag to indicate if the current flow is edit account contact or add account contact.
   */
  isEditAddress: PropTypes.bool.isRequired,
  /**
   * Profile object (as obtained from redux state ProfileRepository->profiles[profileId]) of the user whose profile has to be edited.
   * In case of add account contact it will be undefined.
   */
  currentContactProfile: PropTypes.shape({
    id: PropTypes.string.isRequired,
    firstName: PropTypes.string.isRequired,
    lastName: PropTypes.string.isRequired,
    email: PropTypes.string.isRequired,
    active: PropTypes.bool.isRequired,
    roles: PropTypes.arrayOf(PropTypes.string).isRequired,
    parentOrganization: PropTypes.string.isRequired,
    secondaryOrganizationsCount: PropTypes.number
  }),
  /**
   * Roles array containing all the roles of the current organization.
   */
  roles: PropTypes.arrayOf(
    PropTypes.shape({
      function: PropTypes.string.isRequired,
      relativeTo: PropTypes.string.isRequired,
      repositoryId: PropTypes.string.isRequired
    }).isRequired
  ),
  /**
   * Profile id of the user whose profile is being edited.
   */
  currentContactId: PropTypes.string
};

AddOrEditAccountContact.defaultProps = {
  currentContactProfile: undefined,
  roles: [],
  currentContactId: null
};
export default connect(getComponentData)(AddOrEditAccountContact);
