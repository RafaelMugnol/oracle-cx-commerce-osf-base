/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ContainerContext, OrderContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useContext} from 'react';
import {useDateFormatter, useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';

import Card from '@oracle-cx-commerce/react-components/card';
import {PAGE_ORDER_DETAILS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-recent-scheduled-orders-summary/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-recent-scheduled-orders-summary/selectors';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Widget that displays the recent executed orders from the scheduled order in the Scheduled  Order Details Page
 * @param props
 */
const ProfileRecentScheduledOrdersSummary = props => {
  const {executionStatuses, headingRecentOrder, textOrderFailureReasons} = props;
  //order context
  const order = useContext(OrderContext);
  const {id} = useContext(ContainerContext);

  const {priceListGroup} = order;
  const formatCurrency = useNumberFormatter({style: 'currency'}, priceListGroup);
  const formatDate = useDateFormatter();
  const goToPage = useNavigator();

  return (
    <Styled id="ProfileRecentScheduledOrdersSummary" css={css}>
      <div className="ProfileRecentScheduledOrdersSummary__Main">
        {id && executionStatuses && executionStatuses.length > 0 && (
          <div className="ProfileRecentScheduledOrdersSummary">
            <h2>{headingRecentOrder}</h2>
            <Card type="secondary" className="ProfileRecentScheduledOrdersSummary__Card">
              {executionStatuses.map(executedOrder => (
                <div key={executedOrder.id} className="ProfileRecentScheduledOrdersSummary__BottomLine">
                  <div>
                    {executedOrder.orderId && (
                      <div className="ProfileRecentScheduledOrdersSummary__Row">
                        <div
                          onClick={() => goToPage(`${PAGE_ORDER_DETAILS_LINK}/${executedOrder.orderId}`)}
                          onKeyPress={event =>
                            event.key === 'Enter' ? goToPage(`${PAGE_ORDER_DETAILS_LINK}/${executedOrder.orderId}`) : ''
                          }
                          role="button"
                          tabIndex="0"
                          className="ProfileRecentScheduledOrdersSummary__OrderHeading"
                        >
                          {executedOrder.orderId}
                        </div>
                      </div>
                    )}

                    <div className="ProfileRecentScheduledOrdersSummary__Row">
                      {executedOrder.executionDate && (
                        <div className="ProfileRecentScheduledOrdersSummary__OrderDate">
                          {formatDate(new Date(executedOrder.executionDate))}
                        </div>
                      )}

                      {executedOrder.orderTotal && (
                        <div className="ProfileRecentScheduledOrdersSummary__OrderCost">
                          {formatCurrency(executedOrder.orderTotal)}
                        </div>
                      )}
                    </div>

                    {executedOrder.errorMessages.length > 0 &&
                      executedOrder.errorMessages.map(failureReason => (
                        <div key={failureReason} className="ProfileRecentScheduledOrdersSummary__OrderFailure">
                          <div className="ProfileRecentScheduledOrdersSummary__Row">
                            <div className="ProfileRecentScheduledOrdersSummary__OrderFailureReason">
                              {textOrderFailureReasons}
                            </div>
                          </div>
                          <div key={failureReason} className="ProfileRecentScheduledOrdersSummary__Row">
                            <div className="ProfileRecentScheduledOrdersSummary__OrderFailureReason">
                              {failureReason}
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              ))}
            </Card>
          </div>
        )}
      </div>
    </Styled>
  );
};

ProfileRecentScheduledOrdersSummary.propTypes = {
  /**
   * This is the list of recent executed orders from the scheduled orders.
   */
  executionStatuses: PropTypes.arrayOf(
    PropTypes.shape({
      /**
       * Order id of executed order
       */
      orderId: PropTypes.string,
      /**
       *  Date of executed order
       */
      executionDate: PropTypes.string,
      /**
       *  Reason of failure, if order creation failed
       */
      failureReason: PropTypes.arrayOf(PropTypes.string)
    })
  )
};

ProfileRecentScheduledOrdersSummary.defaultProps = {
  executionStatuses: []
};

export default connect(getComponentData)(ProfileRecentScheduledOrdersSummary);
