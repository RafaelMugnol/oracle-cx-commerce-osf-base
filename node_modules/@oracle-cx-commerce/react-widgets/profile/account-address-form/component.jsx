/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useRef, useState} from 'react';
import {isEmptyObject, searchStringToQueryParams} from '@oracle-cx-commerce/utils/generic';

import AddressInput from '@oracle-cx-commerce/react-widgets/profile/profile-address-form/components/address-input';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';
import Form from '@oracle-cx-commerce/react-components/form';
import {PAGE_ACCOUNT_ADDRESS_BOOK_LINK} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {VALIDATION_CONFIG} from '@oracle-cx-commerce/commerce-utils/constants';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/account-address-form/styles.css';
import {fetchShippingCountries} from '@oracle-cx-commerce/fetchers/shipping-countries';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/account-address-form/selectors';
import {setCustomValidity} from '@oracle-cx-commerce/react-components/utils/address';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {useShippingCountriesFetcher} from '@oracle-cx-commerce/fetchers/shipping-countries/hooks';

/*
  export fetchers to load all shipping countries into the state during server-side rendering. 
 */
export const fetchers = [fetchShippingCountries];

/**
 * widget to Create or Edit an account address.
 * @param {Object} props the properties object
 */
const AccountAddressForm = props => {
  const {
    headingAddAccountAddress,
    headingEditAccountAddress,
    textAllFieldsRequired,
    labelCancel,
    labelSave,
    textRequiredField,
    textInvalidField,
    labelNickName,
    labelCompanyName,
    labelMakeDefaultBillingAddress,
    labelMakeDefaultShippingAddress,
    alertAddressCreatedSuccessfully,
    alertAddressChangedSuccessfully
  } = props;

  const {
    id,
    currentPageId,
    onActionComplete,
    defaultShippingAddressId,
    defaultBillingAddressId,
    contactInfos = {},
    shippingCountries = {}
  } = props;
  const store = useContext(StoreContext);
  const {action} = store;

  /**
   * invoke fetcher hook to load all shipping countries into state,
   * this will not perform any task if state already has shipping countries
   * This is effective if SSR didn't populate the state with shipping countries data
   */
  useShippingCountriesFetcher(store);

  const goToPage = useNavigator();
  const [address, setAddress] = useState({});
  const [inProgress, setInProgress] = useState(false);
  const accountAddressFormRef = useRef({});
  const {addressId, isProfileAddress} = searchStringToQueryParams(currentPageId);

  useEffect(() => {
    if (addressId && !isEmptyObject(contactInfos)) {
      if (contactInfos[addressId]) {
        setAddress(contactInfos[addressId]);
      } else {
        action(isProfileAddress === true ? 'getProfileAddress' : 'getOrganizationAddress', {
          addressId
        }).then(() => {});
      }
    }
  }, [addressId, shippingCountries, contactInfos, isProfileAddress, action]);

  /* Conditional loading can not be done because when an address is removed as default-shipping or default-billing
      It should fetch the latest shipping, billing address. so UI can be refreshed.
  */
  useEffect(() => {
    action('getOrganizationDefaultAddresses');
  }, [action]);

  const onOk = useCallback(() => {
    const message =
      addressId && !currentPageId.includes('isProfileAddress')
        ? alertAddressChangedSuccessfully
        : alertAddressCreatedSuccessfully;

    action('notify', {level: 'success', message});
    if (onActionComplete) {
      onActionComplete();
    } else {
      goToPage(PAGE_ACCOUNT_ADDRESS_BOOK_LINK);
    }
  }, [
    action,
    addressId,
    alertAddressChangedSuccessfully,
    alertAddressCreatedSuccessfully,
    currentPageId,
    goToPage,
    onActionComplete
  ]);

  const onNotOk = useCallback(
    ({error = {}}) => {
      if (onActionComplete) onActionComplete();
      action('notify', {level: 'error', message: error.message});
    },
    [action, onActionComplete]
  );

  const getFormControlElement = namedItem => {
    return (
      accountAddressFormRef.current &&
      accountAddressFormRef.current.querySelectorAll &&
      accountAddressFormRef.current.querySelectorAll('form') &&
      accountAddressFormRef.current.querySelectorAll('form')[0] &&
      accountAddressFormRef.current.querySelectorAll('form')[0].elements &&
      accountAddressFormRef.current.querySelectorAll('form')[0].elements.namedItem(namedItem)
    );
  };

  /**
   * Validate postalCode when country changes
   */
  useEffect(() => {
    const postalCodeEl = getFormControlElement('postalCode');
    const countryEl = getFormControlElement('country');
    if (postalCodeEl && postalCodeEl.value !== '') {
      const country = countryEl ? countryEl.value : '';
      setCustomValidity(postalCodeEl, textInvalidField, textRequiredField, country);
    }
  }, [address.country, textInvalidField, textRequiredField]);

  const onFormSubmit = useCallback(
    event => {
      const countryEl = getFormControlElement('country');
      const country = countryEl ? countryEl.value : '';
      setCustomValidity(event, textInvalidField, textRequiredField, country);
    },
    [textInvalidField, textRequiredField]
  );

  const onInputBlur = useCallback(
    event => {
      const countryEl = getFormControlElement('country');
      const country = countryEl ? countryEl.value : '';
      setCustomValidity(event.target, textInvalidField, textRequiredField, country);
    },
    [textInvalidField, textRequiredField]
  );

  const onInputChange = useCallback(
    event => {
      const prop = {};
      const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
      prop[event.target.name] = value;
      setAddress({...address, ...prop});
    },
    [address]
  );

  return (
    <Styled id="AccountAddressForm" css={css}>
      <div className="AccountAddressForm">
        <h1>
          {addressId && !currentPageId.includes('isProfileAddress')
            ? headingEditAccountAddress
            : headingAddAccountAddress}
        </h1>
        <div className="AccountAddressForm__AllFieldsRequiredText" aria-label={textAllFieldsRequired}>
          {textAllFieldsRequired}
        </div>
        <div ref={accountAddressFormRef}>
          <Form
            action={
              addressId && !currentPageId.includes('isProfileAddress')
                ? 'updateOrganizationAddress'
                : 'addOrganizationAddress'
            }
            onOk={onOk}
            onNotOk={onNotOk}
            setCustomValidity={onFormSubmit}
            setInProgress={setInProgress}
            noValidate
          >
            <input type="hidden" name="addressId" value={addressId || ''} />
            <div>
              <div className="AccountAddressForm__Field AccountAddressForm__AddressType">
                <label htmlFor={`addressType-${id}`} aria-label={labelNickName}>
                  {labelNickName}
                </label>
                <input
                  id={`addressType-${id}`}
                  type="text"
                  name="addressType"
                  value={address.addressType || ''}
                  onChange={onInputChange}
                  onBlur={onInputBlur}
                  required={VALIDATION_CONFIG.addressType && VALIDATION_CONFIG.addressType.required}
                  autoCapitalize="words"
                  disabled={(VALIDATION_CONFIG.addressType && VALIDATION_CONFIG.addressType.disabled) || false}
                  maxLength={(VALIDATION_CONFIG.addressType && VALIDATION_CONFIG.addressType.maxLength) || '50'}
                />
                <span className="validationMessage"></span>
              </div>
              <div className="AccountAddressForm__Field AccountAddressForm__CompanyName">
                <label htmlFor={`companyName-${id}`} aria-label={labelCompanyName}>
                  {labelCompanyName}
                </label>
                <input
                  id={`companyName-${id}`}
                  type="text"
                  name="companyName"
                  value={address.companyName || ''}
                  onChange={onInputChange}
                  onBlur={onInputBlur}
                  required={VALIDATION_CONFIG.companyName && VALIDATION_CONFIG.companyName.required}
                  autoCapitalize="words"
                  disabled={(VALIDATION_CONFIG.companyName && VALIDATION_CONFIG.companyName.disabled) || false}
                  maxLength={(VALIDATION_CONFIG.companyName && VALIDATION_CONFIG.companyName.maxLength) || '50'}
                />
                <span className="validationMessage"></span>
              </div>
            </div>
            <AddressInput
              {...props}
              id={id}
              address={address}
              validationConfig={VALIDATION_CONFIG}
              onInputChange={onInputChange}
              onInputBlur={onInputBlur}
              countryList={shippingCountries}
            ></AddressInput>
            <div className="AccountAddressForm__Field">
              <Checkbox
                id={`isDefaultShippingAddress-${id}`}
                name="isDefaultShippingAddress"
                className="AccountAddressForm_MakeDefaultShippingCheckBox"
                labelText={labelMakeDefaultShippingAddress}
                value={address.isDefaultShippingAddress}
                defaultValue={addressId && addressId === defaultShippingAddressId}
                defaultChecked={addressId && addressId === defaultShippingAddressId}
                onChange={onInputChange}
                onBlur={onInputBlur}
                disabled={
                  (VALIDATION_CONFIG.isDefaultShippingAddress && VALIDATION_CONFIG.isDefaultShippingAddress.disabled) ||
                  false
                }
              ></Checkbox>
              <Checkbox
                id={`isDefaultBillingAddress-${id}`}
                name="isDefaultBillingAddress"
                className="AccountAddressForm_MakeDefaultBillingCheckBox"
                labelText={labelMakeDefaultBillingAddress}
                value={address.isDefaultBillingAddress}
                defaultValue={addressId && addressId === defaultBillingAddressId}
                defaultChecked={addressId && addressId === defaultBillingAddressId}
                onChange={onInputChange}
                onBlur={onInputBlur}
                disabled={
                  (VALIDATION_CONFIG.isDefaultBillingAddress && VALIDATION_CONFIG.isDefaultBillingAddress.disabled) ||
                  false
                }
              ></Checkbox>
            </div>
            <div className="AccountAddressForm__Buttons">
              <button
                type="submit"
                className="AccountAddressForm__ConfirmButton"
                disabled={inProgress}
                aria-label={labelSave}
              >
                {labelSave}
              </button>
              <button
                disabled={inProgress}
                type="button"
                className="AccountAddressForm__CancelButton secondary"
                onClick={() => (onActionComplete ? onActionComplete() : goToPage(PAGE_ACCOUNT_ADDRESS_BOOK_LINK))}
                aria-label={labelCancel}
              >
                {labelCancel}
              </button>
            </div>
          </Form>
        </div>
      </div>
    </Styled>
  );
};

AccountAddressForm.propTypes = {
  /** Address id to update */
  id: PropTypes.string,

  /** Current page id */
  currentPageId: PropTypes.string.isRequired,

  /** Function to invoke on successfully completion of address action */
  onActionComplete: PropTypes.func,

  /** Default shipping address id */
  defaultShippingAddressId: PropTypes.string,

  /** Default billing address id */
  defaultBillingAddressId: PropTypes.string,

  // eslint-disable-next-line spellcheck/spell-checker
  /**
   * The contactInfos (address) object from redux state(ProfileRepository->contactInfos)
   */
  contactInfos: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string.isRequired,
      city: PropTypes.string.isRequired,
      state: PropTypes.string.isRequired,
      postalCode: PropTypes.string.isRequired,
      country: PropTypes.string.isRequired,
      phoneNumber: PropTypes.string.isRequired
    })
  ),

  /** The countries object from redux state(countryRegionRepository->shippingCountries) */
  shippingCountries: PropTypes.objectOf(
    PropTypes.shape({
      countryCode: PropTypes.string.isRequired,
      displayName: PropTypes.string.isRequired,
      repositoryId: PropTypes.string.isRequired,
      regions: PropTypes.shape.isRequired
    })
  )
};

AccountAddressForm.defaultProps = {
  id: '',
  defaultShippingAddressId: undefined,
  defaultBillingAddressId: undefined,
  onActionComplete: undefined,
  contactInfos: {},
  shippingCountries: {}
};

export default connect(getComponentData)(AccountAddressForm);
