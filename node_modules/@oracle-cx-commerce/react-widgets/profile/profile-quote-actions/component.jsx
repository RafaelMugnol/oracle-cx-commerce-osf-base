/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useState, useCallback, useContext} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-quote-actions/styles.css';
import RequestQuoteModal from '@oracle-cx-commerce/react-widgets/checkout/request-quote-button/components/request-quote-modal';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-quote-actions/selectors';
import PropTypes from 'prop-types';
import {ORDER_STATE_QUOTED, PAGE_CHECKOUT_QUOTE_SHIPPING_LINK} from '@oracle-cx-commerce/commerce-utils/constants';

/**
 * Widget that displays the option to Approve or Reject a Pending Approval Order/scheduled Order.
 *
 * @param props
 */
const ProfileQuoteActions = props => {
  //resources
  const {
    currentOrder = {},
    quoteValid,
    labelAcceptQuote,
    labelRejectQuote,
    labelRequestReQuote,
    headingRequestReQuote,
    alertQuoteReRequestSubmitted,
    alertQuoteRejected
  } = props;

  const {action} = useContext(StoreContext);
  const goToPage = useNavigator();

  const [showRequestReQuote, setShowRequestReQuote] = useState(false);

  const onAccept = useCallback(() => {
    goToPage(`${PAGE_CHECKOUT_QUOTE_SHIPPING_LINK}/${currentOrder.id}`);
  }, [currentOrder.id, goToPage]);

  /**
   * Success callback for the action
   */
  const onOk = useCallback(
    successMessage => {
      action('notify', {level: 'success', message: successMessage});
    },
    [action]
  );
  /**
   * Failure callback for the action
   */
  const onNotOk = useCallback(
    ({error = {}}) => {
      action('notify', {level: 'error', message: error.message});
    },
    [action]
  );

  const onRequestReQuote = useCallback(() => {
    setShowRequestReQuote(true);
  }, []);
  const onRequestReQuoteSubmit = useCallback(
    note => {
      const payload = {
        orderId: currentOrder.id,
        note
      };
      setShowRequestReQuote(false);
      action('requestQuote', payload).then(response => {
        if (response.ok === true) {
          onOk(alertQuoteReRequestSubmitted);
        } else {
          onNotOk(response);
        }
      });
    },
    [action, currentOrder.id, alertQuoteReRequestSubmitted, onNotOk, onOk]
  );

  const onReject = useCallback(() => {
    action('rejectQuote', {orderId: currentOrder.id}).then(response => {
      if (response.ok === true) {
        onOk(alertQuoteRejected);
      } else {
        onNotOk(response);
      }
    });
  }, [action, currentOrder.id, alertQuoteRejected, onNotOk, onOk]);

  return (
    <Styled id="ProfileQuoteActions" css={css}>
      {currentOrder.state === ORDER_STATE_QUOTED && (
        <div className="ProfileQuoteActions">
          <div className="ProfileQuoteActions__ActionButtons">
            <button
              type="button"
              onClick={onAccept}
              className="ProfileQuoteActions__AcceptQuoteButton"
              aria-label={labelAcceptQuote}
              disabled={!quoteValid}
            >
              {labelAcceptQuote}
            </button>
            <button
              type="button"
              onClick={onReject}
              className="secondary ProfileQuoteActions__RejectQuoteButton"
              aria-label={labelRejectQuote}
              disabled={!quoteValid}
            >
              {labelRejectQuote}
            </button>
            <button
              type="button"
              onClick={onRequestReQuote}
              className="secondary ProfileQuoteActions__RequestReQuoteButton"
              aria-label={labelRequestReQuote}
            >
              {labelRequestReQuote}
            </button>
          </div>
        </div>
      )}

      <RequestQuoteModal
        actionRequestQuote={headingRequestReQuote}
        headingRequestQuote={headingRequestReQuote}
        showRequestQuote={showRequestReQuote}
        setShowRequestQuote={setShowRequestReQuote}
        onSubmit={onRequestReQuoteSubmit}
        {...props}
      />
    </Styled>
  );
};

ProfileQuoteActions.propTypes = {
  /**
   * Current order details
   */
  currentOrder: PropTypes.object.isRequired,
  /**
   * Quote valid or expired
   */
  quoteValid: PropTypes.bool.isRequired,
  /**
   * A resource string to display quote notes
   */
  labelAcceptQuote: PropTypes.string.isRequired,
  /**
   * A resource string to display quote notes
   */
  labelRejectQuote: PropTypes.string.isRequired,
  /**
   * A resource string to display quote notes
   */
  labelRequestReQuote: PropTypes.string.isRequired,
  /**
   * A resource string to display quote notes
   */
  headingRequestReQuote: PropTypes.string.isRequired,
  /**
   * A resource string to display quote notes
   */
  alertQuoteReRequestSubmitted: PropTypes.string.isRequired,
  /**
   * A resource string to display quote notes
   */
  alertQuoteRejected: PropTypes.string.isRequired
};

ProfileQuoteActions.defaultProps = {};

export default connect(getComponentData)(ProfileQuoteActions);
