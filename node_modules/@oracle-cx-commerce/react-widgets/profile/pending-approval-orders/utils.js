/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {t, sortArrayByKeyAsc} from '@oracle-cx-commerce/utils/generic';

const displayableOrderStates = ['PENDING_APPROVAL', 'PENDING_APPROVAL_TEMPLATE'];

const sortOptions = [
  {
    sortTerm: 'creationDate',
    order: 'asc'
  },
  {
    sortTerm: 'creationDate',
    order: 'desc'
  }
];

/**
 * Method builds the SCIM param from the input
 * @param {*} siteFilter - siteId for the query
 * @param {*} organizationFilter - organizationId for the query
 * @param {*} orderFilter - orderId for the query
 */
export const buildQuery = (siteFilter, organizationFilter, orderFilter) => {
  let query = `(${displayableOrderStates.reduce((query, value, index) => {
    query += `state eq "${value}"`;
    if (index < displayableOrderStates.length - 1) query += ' OR ';

    return query;
  }, '')})`;
  if (organizationFilter) {
    query += ` AND organizationId eq "${organizationFilter}"`;
  }
  if (siteFilter) {
    query += ` AND siteId eq "${siteFilter}"`;
  }
  if (orderFilter) {
    query += ` AND id co "${orderFilter}"`;
  }

  return query;
};

/**
 * The method returns a sorted array containing localized values for sort options.
 * @param {*} locales - object containing translations for the sort options
 */
export const getSortOptions = locales => {
  const localisedSortOptions = sortOptions.map(sortChoice => {
    const option = {...sortChoice};
    option['display'] = locales[`text${sortChoice.sortTerm}${sortChoice.order}`];

    return option;
  });
  sortArrayByKeyAsc(localisedSortOptions, 'display');

  return localisedSortOptions;
};

/*
 **The method converts the itemsPerPage comma separated string into object with localized values for display
 */
export const populateItemsPerPage = (itemsPerPageString, text) => {
  return itemsPerPageString.split(',').map(item => {
    return {
      value: item.trim(),
      display: `${t(text, {number: item.trim()})}`
    };
  });
};
