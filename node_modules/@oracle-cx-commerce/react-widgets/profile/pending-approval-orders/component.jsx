/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import React, {useCallback, useContext, useState, useMemo} from 'react';
import PendingApprovalOrderSummary from '@oracle-cx-commerce/react-widgets/profile/pending-approval-orders/components/pending-approval-order-summary';
import {
  buildQuery,
  getSortOptions,
  populateItemsPerPage
} from '@oracle-cx-commerce/react-widgets/profile/pending-approval-orders/utils';
import {getPendingApprovalOrdersData} from '@oracle-cx-commerce/react-widgets/profile/pending-approval-orders/selectors';
import css from '@oracle-cx-commerce/react-widgets/profile/pending-approval-orders/styles.css';
import SortSelect from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/sort-select';
import ItemsPerPageSelect from '@oracle-cx-commerce/react-widgets/profile/account-contacts/components/items-page-select';
import IterateListItems from '@oracle-cx-commerce/react-components/load-more/list-items';
import LoadMore from '@oracle-cx-commerce/react-components/load-more';
import Search from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/search';
import PropTypes from 'prop-types';

/**
 * A component for listing pending approval orders.
 *
 * @param props
 */
const PendingApprovalOrders = props => {
  const {action} = useContext(StoreContext);
  const {
    siteId,
    isUserLoggedIn,
    textItemsPerPage,
    headingOrdersPendingApproval,
    labelRetrievingItems,
    labelAriaSortBy,
    textFilterByOrderNumber,
    searchIconAltText,
    labelAriaSelectItemsPerPage,
    textRetrievingOrdersPendingApproval,
    messageNoOrdersAvailable,
    labelLoadMore,
    itemsPerPageList,
    textOrderSearchResult
  } = props;

  const [orderIds, setOrderIds] = useState([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const itemsPerPage = useMemo(() => {
    return populateItemsPerPage(itemsPerPageList, textItemsPerPage);
  }, [itemsPerPageList, textItemsPerPage]);
  const [sortOptions] = useState(getSortOptions(props));
  const [selectedLimit, setSelectedLimit] = useState(itemsPerPage[0].value);
  const [selectedSort, setSelectedSort] = useState(`${sortOptions[0].sortTerm}:${sortOptions[0].order}`);
  const [orderFilter, setOrderFilter] = useState('');
  const [resetPage, setResetPage] = useState(false);

  const createPayload = useMemo(() => {
    setLoadingOrders(true);
    setResetPage(true);
    const payload = {
      q: buildQuery(siteId, null, orderFilter),
      offset: 0,
      limit: parseInt(selectedLimit, 10),
      sort: selectedSort,
      expand: 'profile'
    };

    return payload;
  }, [orderFilter, selectedLimit, selectedSort, siteId, setLoadingOrders, setResetPage]);

  const updateOrderIds = useCallback(
    newIds => {
      setResetPage(false);
      setOrderIds(oldIds => [...oldIds, ...newIds]);
    },
    [setOrderIds]
  );

  const handleLoadMore = useCallback(
    async payloadOffset => {
      createPayload.offset = payloadOffset;
      const response = await action('getAllOrdersForProfile', createPayload);
      setLoadingOrders(false);
      if (response.ok && response.json && response.json.items) {
        const recentListingItems = [];
        for (const item of response.json.items) {
          recentListingItems.push(item['orderId']);
        }
        updateOrderIds(recentListingItems);

        return {totalNumberOfItems: response.json.totalResults, currentItemsCount: recentListingItems.length};
      }
      action('notify', {level: 'error', message: response.error && response.error.message});
    },
    [action, createPayload, updateOrderIds]
  );

  const onSortChange = useCallback(
    value => {
      setOrderIds([]);
      setSelectedSort(value);
    },
    [setSelectedSort]
  );

  const onSearchSubmit = useCallback(
    value => {
      setOrderFilter(value);
      setOrderIds([]);
    },
    [setOrderFilter]
  );

  const onItemsPerPageChange = useCallback(
    value => {
      setOrderIds([]);
      setSelectedLimit(value);
    },
    [setSelectedLimit]
  );

  return (
    <Styled id="PendingApprovalOrders" css={css}>
      <div className="PendingApprovalOrders">
        <h1>{headingOrdersPendingApproval}</h1>
        {isUserLoggedIn && (
          <>
            <div className="PendingApprovalOrders__Options">
              <div className="PendingApprovalOrders__SortSelect">
                <SortSelect
                  onSortChange={onSortChange}
                  selectedSort={selectedSort}
                  sortOptions={sortOptions}
                  labelAriaSelectSortOption={labelAriaSortBy}
                ></SortSelect>
              </div>
              <div className="PendingApprovalOrders__Search">
                <Search
                  searchInput={onSearchSubmit}
                  placeholderLabel={textFilterByOrderNumber}
                  searchIconAltText={searchIconAltText}
                ></Search>
              </div>
              <div className="PendingApprovalOrders__ItemsPerPageSelect">
                <ItemsPerPageSelect
                  itemsPerPage={itemsPerPage}
                  selectedItemsPerPage={selectedLimit}
                  labelAriaSelectItemsPerPage={labelAriaSelectItemsPerPage}
                  onItemsPerPageChange={onItemsPerPageChange}
                ></ItemsPerPageSelect>
              </div>
            </div>

            {!loadingOrders && orderFilter && (
              <div className="PendingApprovalOrders__SearchSummaryContainer">
                <span>{textOrderSearchResult}</span>
                <span className="PendingApprovalOrders__SearchText">{`"${orderFilter}"`}</span>
              </div>
            )}

            {(orderIds.length > 0 && (
              <div className="PendingApprovalOrders__OrdersList">
                <IterateListItems
                  child={PendingApprovalOrderSummary}
                  listOFItems={orderIds}
                  {...props}
                ></IterateListItems>
              </div>
            )) || (
              <div className="PendingApprovalOrders__FetchingDataText">
                <span>{loadingOrders ? textRetrievingOrdersPendingApproval : messageNoOrdersAvailable}</span>
              </div>
            )}

            <div className="PendingApprovalOrders__LoadMore">
              <LoadMore
                numberOfItemsToLoad={selectedLimit}
                handleLoadMore={handleLoadMore}
                loadMoreLabel={labelLoadMore}
                loadMoreLoadingLabel={labelRetrievingItems}
                resetPage={resetPage}
              ></LoadMore>
            </div>
          </>
        )}
      </div>
    </Styled>
  );
};

PendingApprovalOrders.propTypes = {
  /**
   * logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,
  /**
   * siteId of the current site.
   */
  siteId: PropTypes.string
};

PendingApprovalOrders.defaultProps = {
  siteId: null
};

export default connect(getPendingApprovalOrdersData)(PendingApprovalOrders);
