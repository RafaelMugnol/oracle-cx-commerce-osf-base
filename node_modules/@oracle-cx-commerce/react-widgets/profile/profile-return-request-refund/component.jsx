/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';

import {ReturnContext} from '@oracle-cx-commerce/react-widgets/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-return-request-refund/styles.css';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';

const OPTIONS = {style: 'currency'};
/**
 * Displays the different (subtotal, tax & total) refund values of a return request
 */

// reusable method to display the passed in refund amounts
const displayRefund = (refundLabel, refundAmount, className) => {
  const refundTypeClassName = `ProfileReturnRequestRefund__${className}`;
  const refundLabelClassName = `ProfileReturnRequestRefund__${className}Label`;
  const refundAmountClassName = `ProfileReturnRequestRefund__${className}Amount`;

  return (
    <div className={refundTypeClassName} key={refundLabel}>
      <span className={refundLabelClassName}>{refundLabel}</span>
      <span className={refundAmountClassName}>{refundAmount}</span>
    </div>
  );
};

const ProfileReturnRequestRefund = props => {
  const {returnDetails = {}} = useContext(ReturnContext);
  const {alertPriceUnavailable, labelRefundSubTotal, labelRefundShipping, labelRefundTax, labelRefundTotal} = props;
  const orderInfo = returnDetails.orderInfo || {};
  let {priceListGroup = {}} = orderInfo;

  // eslint-disable-next-line spellcheck/spell-checker
  // useNumberFormatter fails when currencyCode is not present.
  if (!priceListGroup.currency || !priceListGroup.currency.currencyCode) {
    priceListGroup = {};
  }

  const formatCurrency = useNumberFormatter(OPTIONS, priceListGroup);

  // helpers
  /**
   * Formats price and displays alternate text if null price
   * @param  {Number} price Price
   * @param  {String} altPriceMsg Alternate text when price is unavailable
   * @return {String} formattedPrice Formatted price based on locale
   */
  const formatPrice = ({price, altPriceMsg}) => {
    return price ? formatCurrency(price) : altPriceMsg;
  };

  /**
   * Formats price and displays alternate text if null price
   * @param  {Number} price Price
   * @return {String} formattedPrice formattedPrice Formatted price based on locale
   */
  const formatPriceWithAltMsg = price => {
    return formatPrice({price, altPriceMsg: alertPriceUnavailable});
  };

  const {suggestedOrderRefund, actualTaxRefund, actualShippingRefund, suggestedTotalRefund} =
    returnDetails.refundInfo || {};
  // reference lists to drive the invocation of the reusable displayRefund method.
  const subAmountRefund = 'SubAmountRefund';
  const totalRefund = 'TotalRefund';

  const refundSubTotal = suggestedOrderRefund
    ? displayRefund(labelRefundSubTotal, formatPriceWithAltMsg(suggestedOrderRefund), subAmountRefund)
    : null;
  const refundShipping = actualShippingRefund
    ? displayRefund(labelRefundShipping, formatPriceWithAltMsg(actualShippingRefund), subAmountRefund)
    : null;
  const refundTax = actualTaxRefund
    ? displayRefund(labelRefundTax, formatPriceWithAltMsg(actualTaxRefund), subAmountRefund)
    : null;
  const refundTotal = suggestedTotalRefund
    ? displayRefund(labelRefundTotal, formatPriceWithAltMsg(suggestedTotalRefund), totalRefund)
    : null;
  const refundDetails = [refundSubTotal, refundShipping, refundTax, refundTotal];

  return (
    <Styled id="ProfileReturnRequestRefund" css={css}>
      <div className="ProfileReturnRequestRefund">{refundDetails}</div>
    </Styled>
  );
};

export default ProfileReturnRequestRefund;
