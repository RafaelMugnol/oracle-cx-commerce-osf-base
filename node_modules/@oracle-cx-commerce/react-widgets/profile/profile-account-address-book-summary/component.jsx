/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useEffect, useState} from 'react';

import DefaultAccountAddressBookView from '@oracle-cx-commerce/react-widgets/profile/profile-account-address-book-summary/components/default-account-address-book-view';
import NoAccountAddressBookView from '@oracle-cx-commerce/react-widgets/profile/profile-account-address-book-summary/components/no-account-address-book-view';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-account-address-book-summary/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-account-address-book-summary/selectors';
import PropTypes from 'prop-types';

/**
 * Widget to display the default account address summary at profile page.
 * @param {Object} props the properties object
 */
const ProfileAccountAddressBookSummary = props => {
  const {textAccountAddressBook} = props;

  const {defaultShippingAddress = {}, defaultBillingAddress = {}} = props;

  const {action} = useContext(StoreContext);
  const [isOrganizationLoaded, setIsOrganizationLoaded] = useState(false);
  const [hasOrganizationAddresses, setHasOrganizationAddresses] = useState(false);
  const [hasProfileAddresses, setHasProfileAddresses] = useState(false);

  useEffect(() => {
    if (!isOrganizationLoaded) {
      /* Pulls default organization address */
      action('getOrganizationDefaultAddresses')
        .catch(error => ({error}))
        .finally(() => {
          setIsOrganizationLoaded(true);
        });

      /**
       * The limit for this action invocation is one.
       * Since we just wanted know if at least one
       * address available
       */
      action('listProfileAddresses', {limit: 1, offset: 0}).then(response => {
        if (response.ok && response.json && response.json.items) {
          if (response.json.totalResults > 0) {
            setHasProfileAddresses(true);
          }
        }
      });

      /**
       * The limit for this action invocation is one.
       * Since we just wanted know if at least one
       * address available
       */
      action('listOrganizationAddresses', {limit: 1, include: 'all', offset: 0}).then(response => {
        if (response.ok && response.json && response.json.items) {
          if (response.json.totalResults > 0) {
            setHasOrganizationAddresses(true);
          }
        }
      });
    }
  }, [action, isOrganizationLoaded]);

  return (
    <Styled id="ProfileAccountAddressBookSummary" css={css}>
      <div className="ProfileAccountAddressBookSummary">
        <h2>{textAccountAddressBook}</h2>
        {defaultShippingAddress.postalCode || defaultBillingAddress.postalCode ? (
          <DefaultAccountAddressBookView {...props} />
        ) : (
          <NoAccountAddressBookView
            {...props}
            hasOrganizationAddresses={hasOrganizationAddresses}
            hasProfileAddresses={hasProfileAddresses}
          />
        )}
      </div>
    </Styled>
  );
};

ProfileAccountAddressBookSummary.propTypes = {
  /** The default shipping address object picked from redux state */
  defaultShippingAddress: PropTypes.shape({
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    address1: PropTypes.string,
    city: PropTypes.string,
    state: PropTypes.string,
    postalCode: PropTypes.string,
    country: PropTypes.string,
    phoneNumber: PropTypes.string
  }),

  /** The default billing address object picked from redux state */
  defaultBillingAddress: PropTypes.shape({
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    address1: PropTypes.string,
    city: PropTypes.string,
    state: PropTypes.string,
    postalCode: PropTypes.string,
    country: PropTypes.string,
    phoneNumber: PropTypes.string
  })
};

ProfileAccountAddressBookSummary.defaultProps = {
  defaultShippingAddress: {},
  defaultBillingAddress: {}
};

export default connect(getComponentData)(ProfileAccountAddressBookSummary);
