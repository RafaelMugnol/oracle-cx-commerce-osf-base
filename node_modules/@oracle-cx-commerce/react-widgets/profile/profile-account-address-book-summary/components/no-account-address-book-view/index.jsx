/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  PAGE_ACCOUNT_ADDRESS_BOOK_LINK,
  PAGE_ADD_ACCOUNT_ADDRESS_LINK,
  PAGE_ADD_PROFILE_ADDRESS_LINK
} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import React, {useMemo} from 'react';

import AddressCard from '@oracle-cx-commerce/react-components/icons/address-card';
import Card from '@oracle-cx-commerce/react-components/card';
import Link from '@oracle-cx-commerce/react-components/link';
import PropTypes from 'prop-types';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-account-address-book-summary/components/no-account-address-book-view/styles.css';
import {getAddressManagerRoles} from '@oracle-cx-commerce/react-components/utils/address';

/**
 * Displays no account address book view.
 * @param {Object} props the properties object
 */
const NoAccountAddressBookView = props => {
  const {
    actionAddAnAddress,
    actionManage,
    textNoSavedAddresses,
    textSpeedCheckoutAddAddressMessage,
    textNoDefaultAddress,
    textSpeedCheckoutAddDefaultAddress,
    actionAddAProfileAddress,
    actionAddAnAccountAddress,
    labelManage
  } = props;
  const {roles, hasOrganizationAddresses, hasProfileAddresses} = props;
  const addressManagerRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  return (
    <Styled id="NoAccountAddressBookView" css={css}>
      <div className="NoAccountAddressBookView__NoAddressContent">
        <Card type="primary">
          <div className="NoAccountAddressBookView__NoAddress">
            {!hasOrganizationAddresses && !hasProfileAddresses ? (
              <>
                <div>{textNoSavedAddresses}</div>
                {(addressManagerRoles.isProfileAddrManager ||
                  addressManagerRoles.isAccountAddrManager ||
                  addressManagerRoles.isAdmin) && <div>{textSpeedCheckoutAddAddressMessage}</div>}
              </>
            ) : (
              <>
                <div>{textNoDefaultAddress}</div>
                {(addressManagerRoles.isProfileAddrManager ||
                  addressManagerRoles.isAccountAddrManager ||
                  addressManagerRoles.isAdmin) && <div>{textSpeedCheckoutAddDefaultAddress}</div>}
              </>
            )}

            {addressManagerRoles.isProfileAddrManager && (
              <div className="NoAccountAddressBookView__AddAnAddressLinkContainer">
                <span
                  aria-label={`${textNoSavedAddresses} ${textSpeedCheckoutAddAddressMessage} ${actionAddAnAddress}`}
                >
                  <Link href={PAGE_ADD_PROFILE_ADDRESS_LINK}>
                    <AddressCard />
                    <span>{actionAddAProfileAddress}</span>
                  </Link>
                </span>
              </div>
            )}
            {(addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin) && (
              <div className="NoAccountAddressBookView__AddAnAddressLinkContainer">
                <span
                  aria-label={`${textNoSavedAddresses} ${textSpeedCheckoutAddAddressMessage} ${actionAddAnAddress}`}
                >
                  <Link href={PAGE_ADD_ACCOUNT_ADDRESS_LINK}>
                    <AddressCard />
                    <span>{actionAddAnAccountAddress}</span>
                  </Link>
                </span>
              </div>
            )}
          </div>
          {(hasOrganizationAddresses || hasProfileAddresses) && (
            <div className="NoAccountAddressBookView__RightContent">
              <Link href={PAGE_ACCOUNT_ADDRESS_BOOK_LINK} aria-label={labelManage}>
                {actionManage}
              </Link>
            </div>
          )}
        </Card>
      </div>
    </Styled>
  );
};

NoAccountAddressBookView.propTypes = {
  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired,

  /** True if profile addresses available for current user */
  hasProfileAddresses: PropTypes.bool.isRequired,

  /** True if organization addresses available for current user */
  hasOrganizationAddresses: PropTypes.bool.isRequired
};

export default NoAccountAddressBookView;
