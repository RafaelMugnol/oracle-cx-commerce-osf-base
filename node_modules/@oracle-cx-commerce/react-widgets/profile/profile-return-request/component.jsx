/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useEffect, useState} from 'react';

import Region from '@oracle-cx-commerce/react-components/region';
import {ReturnContext} from '@oracle-cx-commerce/react-widgets/contexts';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-return-request/styles.css';
import {getPage, getOrders} from '@oracle-cx-commerce/commerce-utils/selector';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Display details of the return request by invoking the respective widgets.
 * Needs return request Id for which the return details are to be displayed.
 */
const ProfileReturnRequest = props => {
  const {regions = [], headingReturnRequest} = props;

  const {action} = useContext(StoreContext);
  const orderId = useSelector(getPage).contextId;
  const [returnItems, setReturnItems] = useState([]);
  const [isAvailableOrderData, setAvailableOrderDetails] = useState(false);
  const orderDetails = useSelector(getOrders)[orderId];

  useEffect(() => {
    const payload = {orderId};
    action('initiateReturn', payload).then(response => {
      setReturnItems(response.json.returnItems || []);
      if (orderDetails === undefined || orderDetails === null) {
        action('getOrder', payload).then(response => {
          if (response.status === 200) {
            setAvailableOrderDetails(true);
          }
        });
      } else {
        setAvailableOrderDetails(true);
      }
    });
  }, [action, orderId, orderDetails]);

  // render the details only after the state has the details, after the 'initiateReturn' action is fulfilled
  if (returnItems && isAvailableOrderData) {
    return (
      <Styled id="CreateReturnRequestContainer" css={css}>
        <div className="CreateReturnRequestContainer">
          <h1 className="CreateReturnRequestContainer__Label">{headingReturnRequest}</h1>
          <section className={`CreateReturnRequestContainer__Section`}>
            <ReturnContext.Provider value={{returnItems}}>
              {regions.map((regionId, index) => (
                // eslint-disable-next-line react/no-array-index-key
                <Region key={index} regionId={regionId} />
              ))}
            </ReturnContext.Provider>
          </section>
        </div>
      </Styled>
    );
  }

  return null;
};

export default ProfileReturnRequest;
