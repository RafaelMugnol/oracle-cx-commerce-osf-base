/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const sortOptions = [
  {
    sortTerm: 'nextScheduledRun',
    order: 'desc'
  },
  {
    sortTerm: 'nextScheduledRun',
    order: 'asc'
  },
  {
    sortTerm: 'createDate',
    order: 'desc'
  },
  {
    sortTerm: 'createDate',
    order: 'asc'
  },
  {
    sortTerm: 'name',
    order: 'asc'
  },
  {
    sortTerm: 'name',
    order: 'desc'
  }
];

/**
 * Method to add the locales text to be displayed in sort filters
 */
export const getSortOptions = locales => {
  const localisedSortOptions = sortOptions.map(sortChoice => {
    const option = {...sortChoice};
    option['display'] = locales[`${sortChoice.sortTerm}${sortChoice.order}`];

    return option;
  });

  return localisedSortOptions;
};

/**
 * Method to determine Frequency type from the schedule info
 */
export const getFrequencyType = schedule => {
  const PERIODIC_SCHEDULE = 'periodic';
  const TOTAL_DAYS_OF_WEEK = 7;
  const TOTAL_WEEKS_IN_MONTH = 5;
  let frequency = '';

  if (schedule && schedule.scheduleType && schedule.scheduleType === PERIODIC_SCHEDULE) {
    frequency = 'textPeriodicSchedule';
  } else {
    if (
      schedule &&
      schedule.daysOfWeek.length === TOTAL_DAYS_OF_WEEK &&
      schedule.weeksInMonth.length === TOTAL_WEEKS_IN_MONTH
    ) {
      frequency = 'textDailySchedule';
    }
    if (
      schedule &&
      ((schedule.daysOfWeek.length !== 0 && schedule.daysOfWeek.length < TOTAL_DAYS_OF_WEEK) ||
        (schedule.weeksInMonth.length !== 0 && schedule.weeksInMonth.length < TOTAL_WEEKS_IN_MONTH))
    ) {
      frequency = 'textWeeklySchedule';
    }
    if (schedule && schedule.daysInMonth.length === 1 && schedule.monthsInYear.length !== 0) {
      frequency = 'textMonthlySchedule';
    }
  }

  return frequency;
};
