/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useState, useMemo, useCallback, useContext} from 'react';

import {connect} from '@oracle-cx-commerce/react-components/provider';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import DropdownArrowIcon from '@oracle-cx-commerce/react-components/icons/dropdown-arrow';
import LoadMore from '@oracle-cx-commerce/react-components/load-more';
import IterateListItems from '@oracle-cx-commerce/react-components/load-more/list-items';
import ProfileScheduledOrder from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-history/components/profile-scheduled-order';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-history/selectors';
import css from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-history/styles.css';
import {getSortOptions} from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-history/utils';

/**
 * A component for listing profile scheduled related order.
 * New orders are loaded on click of Load More orders
 */
const ScheduledOrderHistory = props => {
  const {
    headingScheduledOrders,
    numberOfOrdersToLoad,
    isUserLoggedIn,
    labelAriaSortBy,
    labelAriaListOf,
    textRetrievingScheduledOrders,
    textNoScheduledOrdersAvailable,
    labelLoadMore,
    labelRetrievingScheduledOrders
  } = props;
  const {action} = useContext(StoreContext);
  const [scheduledOrderIds, setScheduledOrderIds] = useState([]);
  const sortOptions = getSortOptions(props);
  const [selectedFilter, setSelectedFilter] = useState(`${sortOptions[0].sortTerm}:${sortOptions[0].order}`);
  const actionName = 'listScheduledOrders';
  const [resetPage, setResetPage] = useState(false);
  const [fetchingData, setFetchingData] = useState(false);

  const createPayload = useMemo(() => {
    setFetchingData(true);
    const payload = {
      sort: selectedFilter,
      limit: numberOfOrdersToLoad
    };

    return payload;
  }, [numberOfOrdersToLoad, selectedFilter]);

  const handleFiltersChange = useCallback(
    event => {
      setSelectedFilter(event.target.value);
      setResetPage(true);
      setScheduledOrderIds([]);
    },
    [setSelectedFilter]
  );

  const handleSetListItems = useCallback(
    newIds => {
      setResetPage(false);
      setScheduledOrderIds(scheduledOrderIds.concat(newIds));
    },
    [scheduledOrderIds]
  );

  const handleLoadMore = useCallback(
    async payloadOffset => {
      createPayload.offset = payloadOffset;
      try {
        const response = await action(actionName, createPayload);
        setFetchingData(false);
        if (response.ok && response.json && response.json.items) {
          const recentListingItems = [];
          for (const item of response.json.items) {
            recentListingItems.push(item['id']);
          }
          handleSetListItems(recentListingItems);

          return {totalNumberOfItems: response.json.totalResults, currentItemsCount: recentListingItems.length};
        }
      } catch (error) {
        console.error(error);
      }
    },
    [action, createPayload, handleSetListItems]
  );

  return (
    <Styled id="ScheduledOrderHistory" css={css}>
      <div className="ScheduledOrderHistory">
        <h1>{headingScheduledOrders}</h1>
        {isUserLoggedIn && (
          <>
            <div className="ScheduledOrderHistory__Filter">
              <Dropdown
                className={'FilterSelect__DropDown'}
                onChange={handleFiltersChange}
                value={selectedFilter}
                aria-label={labelAriaSortBy}
                tabIndex="0"
                icon={
                  <div>
                    <DropdownArrowIcon className="FilterSelect__DownArrowIcon"></DropdownArrowIcon>
                  </div>
                }
              >
                {sortOptions.map(sortOption => (
                  <option key={sortOption.display} value={`${sortOption.sortTerm}:${sortOption.order}`}>
                    {sortOption.display}
                  </option>
                ))}
              </Dropdown>
            </div>
            {fetchingData && (
              <div className="ScheduledOrderHistory__FetchingDataText">
                <span>{textRetrievingScheduledOrders}</span>
              </div>
            )}
            <div
              className="ScheduledOrderHistory__OrdersList"
              aria-label={`${labelAriaListOf} ${headingScheduledOrders}`}
            >
              {!fetchingData && scheduledOrderIds.length < 1 && (
                <span className="ScheduledOrderHistory__EmptyList">{textNoScheduledOrdersAvailable}</span>
              )}
              <div className="ScheduledOrderHistory__CardGrid">
                <IterateListItems
                  child={ProfileScheduledOrder}
                  listOFItems={scheduledOrderIds}
                  {...props}
                ></IterateListItems>
              </div>
            </div>

            <div className="ScheduledOrderHistory__LoadMore">
              <LoadMore
                numberOfItemsToLoad={numberOfOrdersToLoad}
                resetPage={resetPage}
                handleLoadMore={handleLoadMore}
                loadMoreLabel={labelLoadMore}
                loadMoreLoadingLabel={labelRetrievingScheduledOrders}
              ></LoadMore>
            </div>
          </>
        )}
      </div>
    </Styled>
  );
};

export default connect(getComponentData)(ScheduledOrderHistory);
