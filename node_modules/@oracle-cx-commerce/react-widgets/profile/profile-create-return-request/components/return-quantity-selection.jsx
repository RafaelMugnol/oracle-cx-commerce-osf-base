/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useState} from 'react';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import {ReturnItemContext} from '@oracle-cx-commerce/react-widgets/contexts';

/**
 * Create a product image slider component with thumbnails based on admin selection
 */
const ReturnQuantitySelection = props => {
  const {returnItem} = useContext(ReturnItemContext);
  const {index, labelProductQuantity} = props;

  let quantityOption = [];
  /**
   * If quantity available fo returns is greater than 1, then multiple options with available quantity is pushed into
   * 'quantityOption' to display as drop down.
   *
   * @param {*} returnableItem : Item that can be returned
   */
  // eslint-disable-next-line prefer-const
  const handleOptions = returnableItem => {
    quantityOption = [];
    if (returnItem !== undefined) {
      let loopQuantity = 0;
      if (returnableItem.quantityAvailableForReturn > 5) {
        loopQuantity = 5;
      } else {
        loopQuantity = returnableItem.quantityAvailableForReturn + 1;
      }
      for (let i = 1; i < loopQuantity; i++) {
        quantityOption.push(
          <option key={i} value={i}>
            {i}
          </option>
        );
      }
      if (returnableItem.quantityAvailableForReturn > 5) {
        quantityOption.push(
          <option key="5" value="5">
            5+
          </option>
        );
      }
    }
  };

  const [showQtyInput, setShowQtyInput] = useState(new Map());
  const [quantity, setQuantity] = useState(1);
  /**
   * Handler for quantity changed
   * @param  {Event} event
   */
  const handleQuantityChanged = retunItemData => event => {
    const qty = event.target.value ? event.target.value : 1;
    const parsedQty = parseInt(qty, 10);
    if (parsedQty >= 5 && retunItemData.quantityAvailableForReturn > 5 && !showQtyInput.get(event.target.id)) {
      setShowQtyInput(new Map(showQtyInput.set(event.target.id, true)));
    }
    if (!isNaN(parsedQty)) {
      if (!(parsedQty > retunItemData.quantityAvailableForReturn)) {
        setQuantity(parsedQty);
      }
    }
  };

  /**
   * maxLength Check for number input
   * @param  {Event} event
   */
  const maxLengthCheck = event => {
    const inputValue = event.target.value;
    if (inputValue && inputValue.length > 3) {
      event.target.value = inputValue.slice(0, 3);
    }
  };

  return (
    <div className="ReturnQuantitySelection__ReturnItemQuantity">
      <label htmlFor="productquantity">
        <b>{labelProductQuantity}</b>
      </label>

      {returnItem.quantityAvailableForReturn > 0 && returnItem.quantityAvailableForReturn === 1 ? (
        <div className="ReturnQuantitySelection__QuantityDisplay">
          {returnItem.quantityAvailableForReturn}
          <input
            type="hidden"
            name={`returnItems[${index}][quantityToReturn]`}
            value={returnItem.quantityAvailableForReturn}
            aria-label="single-quantity"
          />
        </div>
      ) : (
        <div className="ReturnQuantitySelection__QuantitySelection">
          {!showQtyInput.get(`quantityToReturn-returnItem[${index}]`) ? (
            <div className="ReturnQuantitySelection__Button">
              <Dropdown
                id={`quantityToReturn-returnItem[${index}]`}
                name={`returnItems[${index}][quantityToReturn]`}
                onLoad={handleOptions(returnItem)}
                onChange={handleQuantityChanged(returnItem)}
                data-testid={'quantityDropdown'}
                aria-label={labelProductQuantity}
                className={'ReturnQuantityDisplayAndUpdate'}
              >
                {' '}
                {quantityOption}{' '}
              </Dropdown>
            </div>
          ) : (
            <input
              type="number"
              id={`quantityToReturn-returnItem[${index}]`}
              name={`returnItems[${index}][quantityToReturn]`}
              className="ReturnQuantitySelection__Textbox"
              value={quantity}
              onInput={maxLengthCheck}
              onChange={handleQuantityChanged(returnItem)}
              aria-label={labelProductQuantity}
              min={1}
              max={999}
            />
          )}
        </div>
      )}
    </div>
  );
};

export default ReturnQuantitySelection;
