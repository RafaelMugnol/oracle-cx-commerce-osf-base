/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useState} from 'react';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import PropTypes from 'prop-types';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import {ReturnItemContext} from '@oracle-cx-commerce/react-widgets/contexts';

const ReturnReasonSelection = props => {
  const {returnReasons} = useContext(ReturnItemContext);
  const {showOptions, index, labelReturnRequestReason} = props;

  const [reasonMessage, setReasonValue] = useState('');

  const handleChangeReason = event => {
    setReasonValue(event.target.value);
  };

  return (
    <div
      className="ReturnReasonSelection__ReturnItemReturnReason"
      data-testid="returnReasonDiv"
      id={`ReturnReason-selected${index}`}
      style={{
        display: showOptions.get(`selected${index}returnItems[${index}][selectedToReturn]`) > 0 ? 'block' : 'none'
      }}
    >
      <div className="ReturnReasonSelection__ReturnReasonsButton">
        <Dropdown
          id={`returnReason${index}`}
          name={`returnItems[${index}][returnReason]`}
          required={showOptions.get(`selected${index}returnItems[${index}][selectedToReturn]`) > 0 ? true : false}
          data-testid={'returnReasonDropdown'}
          aria-label={labelReturnRequestReason}
          onChange={handleChangeReason}
          value={reasonMessage}
        >
          <option value="" disabled>
            {labelReturnRequestReason}
          </option>
          {!isEmptyObject(returnReasons) &&
            returnReasons.map(returnReason => (
              <option key={returnReason.displayKey} value={returnReason.displayKey}>
                {returnReason.displayName}
              </option>
            ))}
        </Dropdown>
      </div>
    </div>
  );
};

ReturnReasonSelection.propType = {
  /* Boolean value to determine if the return reason drop down has to be displayed or not */
  showOptions: PropTypes.bool.isRequired
};
export default ReturnReasonSelection;
