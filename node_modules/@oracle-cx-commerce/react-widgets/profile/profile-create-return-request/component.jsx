/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useCallback, useContext, useState} from 'react';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/styles.css';
import Alert from '@oracle-cx-commerce/react-components/alert';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';
import CreateReturnSuccessMsg from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/components/create-return-success-msg';
import CreatReturnTableHeader from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/components/create-return-table-header';
import Form from '@oracle-cx-commerce/react-components/form';
import PropTypes from 'prop-types';
import ReturnQuantitySelection from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/components/return-quantity-selection';
import ReturnReasonSelection from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/components/return-reason-selection';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {fetchReturnReasons} from '@oracle-cx-commerce/fetchers/merchant-settings';
import {formToJson} from '@oracle-cx-commerce/react-components/utils';
import {getReturnData} from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/selectors';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {useReturnReasonsFetcher} from '@oracle-cx-commerce/fetchers/merchant-settings/hooks';
import {CreateReturnItemImage} from '@oracle-cx-commerce/react-widgets/profile/profile-create-return-request/components/create-return-item-image';
import {ReturnContext, ReturnItemContext} from '@oracle-cx-commerce/react-widgets/contexts';
import {
  ReturnItemName,
  ReturnItemPrice,
  ReturnItemVariants
} from '@oracle-cx-commerce/react-widgets/profile/profile-return-request-items/components/return-item-details';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';

/**
 * export fetchers to load shopper custom properties into the state during server-side rendering.
 */
export const fetchers = [fetchReturnReasons];
/**
 * CreateReturnRequest Widget - The widget display all the returnable items of the order.
 * Partial items of the order can be selected and returned.
 * A return will be created and the returnRequestId will return upon successful creation.
 */
const ProfileCreateReturnRequest = props => {
  const {returnItems = {}} = useContext(ReturnContext);
  const orderId = props.contextId;
  const navigateToOrderDetails = useNavigator(`order-details/${orderId}`);
  const store = useContext(StoreContext);
  const {action} = store;
  const {orderData} = props;

  const {
    labelSelectReturnItems,
    labelProductQuantity,
    labelReturnRequestReason,
    actionSubmitReturn,
    alertReturnRequestErrorMsg,
    alertReturnRequestSuccessMsg,
    actionCancel,
    actionNavigateToOrderDetails,
    labelNoReturnItems,
    alertPriceUnavailable,
    textVariantName,
    alertSelectItemsForReturn,
    alertSelectReturnReason,
    messageAtTheRate
  } = props;

  //Fetch the returnReason that are configured in OCC using fetchers
  let returnReasons = [];
  useReturnReasonsFetcher(store);
  returnReasons = props.returnReasons;
  //Calculate the count of returnable items of the order
  let returnableItemsCount = 0;
  let pageLoaded = false;
  for (const returnItem in returnItems) {
    if (returnItems[returnItem].quantityAvailableForReturn > 0) {
      returnableItemsCount++;
      pageLoaded = true;
    }
  }

  //Show/Hide return reason drop down for the respective item selected based on the checkbox selected
  const [showOptions, setShowOptions] = useState(new Map());
  const toggleOptions = useCallback(
    event => {
      setShowOptions(new Map(showOptions.set(event.target.id, event.target.checked)));
    },
    [showOptions]
  );

  //Show return request id and success message if the create-return is successful.
  const [isReturnSuccess, setReturnSuccess] = useState(false);

  const [returnErrorMsg, setReturnErrorMsg] = useState('');
  const [returnRequestId, setReturnRequestId] = useState();

  /**
   * This function will return only the items that were selected from the entire returnItems array
   * @param {*} returnItemsArray
   *
   */
  let returnItemsCount = 0;
  const checkSelectedItems = (returnItemsArray, payload) => {
    const returnItems = [];

    payload = {};
    for (let i = 0; i < returnItemsArray.length; i++) {
      if (returnItemsArray[i] !== undefined) {
        //parse the quantity selected from String to Integer
        returnItemsArray[i].quantityToReturn = parseInt(returnItemsArray[i].quantityToReturn, 10);

        // The formData contains selectedToReturn attribute which indicates the items selected for return. Remove the
        // selectedToReturn attribute from the JSON body before creating request body for the 'createReturnRequest' action.
        if (returnItemsArray[i].selectedToReturn !== undefined && returnItemsArray[i].selectedToReturn === 'on') {
          delete returnItemsArray[i].selectedToReturn;
          returnItems.push(returnItemsArray[i]);
          returnItemsCount++;
        }
      }
    }
    if (returnItemsCount !== 0) {
      payload = {returnItems};
    }

    return payload;
  };

  /**
   * This function will pass the selected return items of the order to createReturnRequest action
   * @param {*} event
   */
  const handleSubmitReturn = event => {
    event.preventDefault();
    const form = event.target;
    let payload = {};
    let formData = {};
    setReturnErrorMsg('');
    if (form.checkValidity()) {
      formData = formToJson(form);
      payload = checkSelectedItems(formData.returnItems, payload);
      payload.orderId = orderId;

      if (returnItemsCount === 0) {
        const alertMessage = t(alertSelectItemsForReturn);
        setReturnSuccess(false);
        setReturnErrorMsg(alertMessage);
        window.scrollTo({top: 0, behavior: 'smooth'});
      } else {
        action('createReturnRequest', payload).then(response => {
          if (response.ok === false) {
            setReturnSuccess(false);
            setReturnErrorMsg(response.error.status === 500 ? alertReturnRequestErrorMsg : response.error.message);
          } else {
            Object.keys(response.delta.csrRepository.returns).forEach(function eachKey(id) {
              setReturnRequestId(id);
            });
            setReturnSuccess(true);
            setReturnErrorMsg('');
          }
        });
      }
    }
  };

  // Navigate to Account Home Page
  const gotoOrderDetailsPage = () => {
    navigateToOrderDetails();
  };

  /**
   * This method validates value for input fields  by triggering respective 'validators'
   * And sets error message (if any) at corresponding ui elements
   * @param {Object} element ui element
   */
  function setCustomValidity(element) {
    const {validity} = element;
    const alertMessage = t(alertSelectReturnReason);
    if (element.tagName === 'SELECT' && element.id.indexOf('returnReason') !== -1 && validity.valueMissing) {
      // Override built-in validation message for "required" fields
      element.setCustomValidity(alertMessage);
    }
  }

  return (
    <Styled id="CreateReturnRequest" css={css}>
      <div className="ProfileCreateReturnRequest__MessageSection">
        {returnErrorMsg && <Alert type="error" message={returnErrorMsg}></Alert>}
      </div>
      <div className="ProfileCreateReturnRequest__ReturnRequestSection">
        {!isReturnSuccess ? (
          <div>
            {returnableItemsCount > 0 ? (
              <Form onSubmit={handleSubmitReturn} setCustomValidity={setCustomValidity} noValidate={true}>
                <span className="ProfileCreateReturnRequest__ReturnItemsLabel">{labelSelectReturnItems}</span>

                <CreatReturnTableHeader {...props} />

                <ul className="ProfileCreateReturnRequest__ListingReturnableItems" key={orderId}>
                  <input type="hidden" name="orderId" value={orderId} />

                  {(Object.keys(returnItems || {}) || []).map(returnItem => {
                    return (
                      <li
                        key={`Item-[${returnItem}]`}
                        className={
                          returnItems[returnItem].quantityAvailableForReturn > 0
                            ? 'ProfileCreateReturnRequest__ListSection'
                            : 'ProfileCreateReturnRequest__EmptyList'
                        }
                      >
                        <ReturnItemContext.Provider
                          key={returnItems[returnItem].catRefId}
                          value={{returnItem: returnItems[returnItem], returnReasons}}
                        >
                          <div className="ProfileCreateReturnRequest__ReturnItem" key={`ReturnItem[${returnItem}]`}>
                            <div
                              className="ProfileCreateReturnRequest__ReturnItemSelection"
                              id={`ReturnItem_selection[${returnItem}]`}
                            >
                              <input
                                type="hidden"
                                name={`returnItems[${returnItem}][productId]`}
                                value={returnItems[returnItem].productId}
                              />
                              <input
                                type="hidden"
                                name={`returnItems[${returnItem}][catRefId]`}
                                value={returnItems[returnItem].catRefId}
                              />
                              <input
                                type="hidden"
                                name={`returnItems[${returnItem}][shippingGroupId]`}
                                value={returnItems[returnItem].shippingGroup.shippingGroupId}
                              />
                              <input
                                type="hidden"
                                name={`returnItems[${returnItem}][commerceItemId]`}
                                value={returnItems[returnItem].commerceItemId}
                              />
                              <div className="ProfileCreateReturnRequest__ItemSelectForReturn">
                                <Checkbox
                                  name={`returnItems[${returnItem}][selectedToReturn]`}
                                  id={`selected${returnItem}`}
                                  onChange={toggleOptions}
                                  aria-label={`selectionCheckbox${returnItem}`}
                                />
                              </div>
                              <div className="ProfileCreateReturnRequest__ReturnItemImage">
                                <CreateReturnItemImage
                                  orderData={orderData}
                                  commerceItemId={returnItems[returnItem].commerceItemId}
                                />
                              </div>
                              <div className="ProfileCreateReturnRequest__ReturnItemDesc">
                                <ReturnItemName />
                                <ReturnItemVariants textVariantName={textVariantName} />
                                <div className="ReturnItem__MobileContainer">
                                  <ReturnItemPrice
                                    alertPriceUnavailable={alertPriceUnavailable}
                                    messageAtTheRate={messageAtTheRate}
                                  />
                                </div>
                              </div>

                              <div className="ReturnItemPrice__Container">
                                <ReturnItemPrice
                                  alertPriceUnavailable={alertPriceUnavailable}
                                  messageAtTheRate={messageAtTheRate}
                                />
                              </div>

                              <div className="ReturnItemQuantity__Container">
                                <ReturnQuantitySelection
                                  labelProductQuantity={labelProductQuantity}
                                  index={returnItem}
                                />
                              </div>
                            </div>

                            <ReturnReasonSelection
                              labelReturnRequestReason={labelReturnRequestReason}
                              showOptions={showOptions}
                              index={returnItem}
                            />
                          </div>
                        </ReturnItemContext.Provider>
                      </li>
                    );
                  })}
                </ul>
                <div className="ProfileCreateReturnRequest__Buttons">
                  <button
                    type="submit"
                    className="ProfileCreateReturnRequest__CreateReturnButton"
                    aria-label={actionSubmitReturn}
                  >
                    {actionSubmitReturn}
                  </button>
                  <button
                    className="ProfileCreateReturnRequest__CancelButton secondary"
                    type="button"
                    aria-label={actionCancel}
                    onClick={gotoOrderDetailsPage}
                  >
                    {actionCancel}
                  </button>
                </div>
              </Form>
            ) : (
              <div className="ProfileCreateReturnRequest__EmptyReturnItems">
                {pageLoaded ? <Alert type="warning" message={labelNoReturnItems} /> : <div></div>}
              </div>
            )}
          </div>
        ) : (
          <div className="ProfileCreateReturnRequest__Button">
            <CreateReturnSuccessMsg
              returnRequestId={returnRequestId}
              alertReturnRequestSuccessMsg={alertReturnRequestSuccessMsg}
            />
            <button
              className="secondary"
              type="button"
              onClick={gotoOrderDetailsPage}
              aria-label={actionNavigateToOrderDetails}
            >
              {actionNavigateToOrderDetails}
            </button>
          </div>
        )}
      </div>
    </Styled>
  );
};

ProfileCreateReturnRequest.propTypes = {
  /*contextId is used to get the orderId from the context */
  contextId: PropTypes.string.isRequired,
  /* Return reasons data used to select the reason for return when returning an items */
  returnReasons: PropTypes.arrayOf(PropTypes.object).isRequired,

  /* Order data used to display the image and alt text with displayName of the specific commerceItem */
  orderData: PropTypes.shape({
    commerceItems: PropTypes.objectOf(PropTypes.object).isRequired
  }).isRequired
};

export default connect(getReturnData)(ProfileCreateReturnRequest);
