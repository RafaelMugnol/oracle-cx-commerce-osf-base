/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {
  StoreContext,
  OrderContext,
  ContainerContext,
  ProductSelectionContext
} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useEffect, useState} from 'react';
import Region from '@oracle-cx-commerce/react-components/region';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-details-container/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/scheduled-order-details-container/selectors';
import PropTypes from 'prop-types';
/**
 * Container that holds all the widget for the Order Details Page
 *
 * @param props
 */
const ScheduledOrderDetailsContainer = props => {
  const {scheduledOrderId, scheduledOrder, order} = props;
  const {regions = []} = props;
  const {action} = useContext(StoreContext);
  const [productSelection, setProductSelection] = useState([]);
  /**
   * Failure call back for the getOrder action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );
  /**
   * Get the order details for the specific order id
   */
  useEffect(() => {
    if (scheduledOrderId && !order.id) {
      action('getScheduledOrder', {
        scheduledOrderId,
        orderDetails: true
      })
        .then(response => {
          if (response.ok === false) {
            onNotOk(response);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    }
  }, [action, onNotOk, order.id, scheduledOrderId]);

  return (
    <Styled id="ScheduledOrderDetailsContainer" css={css}>
      <div className="ScheduledOrderDetailsContainer">
        {scheduledOrder && scheduledOrderId && (
          <React.Fragment>
            <ContainerContext.Provider value={scheduledOrder}>
              <OrderContext.Provider value={order}>
                <ProductSelectionContext.Provider value={{productSelection, setProductSelection}}>
                  <section className="ScheduledOrderDetailsContainer__Section">
                    {regions.map((regionId, index) => (
                      /*
                        Using region ids as keys causes unnecessary DOM reconciliation.
                        https://reactjs.org/docs/reconciliation.html#keys
                      */
                      // eslint-disable-next-line react/no-array-index-key
                      <Region key={index} regionId={regionId} />
                    ))}
                  </section>
                </ProductSelectionContext.Provider>
              </OrderContext.Provider>
            </ContainerContext.Provider>
          </React.Fragment>
        )}
      </div>
    </Styled>
  );
};

ScheduledOrderDetailsContainer.propTypes = {
  /**
   * This is the scheduled order id which needs to be displayed.
   */
  scheduledOrderId: PropTypes.string.isRequired,
  /**
   * This is the scheduled order object corresponding to scheduled order id, as obtained from redux state.
   */
  scheduledOrder: PropTypes.shape,
  /**
   * This is the template order object of scheduled order, as obtained from redux state.
   */
  order: PropTypes.shape
};

ScheduledOrderDetailsContainer.defaultProps = {
  scheduledOrder: undefined,
  order: undefined
};

export default connect(getComponentData)(ScheduledOrderDetailsContainer);
