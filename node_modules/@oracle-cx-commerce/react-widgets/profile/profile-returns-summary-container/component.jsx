/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useEffect, useContext} from 'react';
import Region from '@oracle-cx-commerce/react-components/region';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {ReturnContext} from '@oracle-cx-commerce/react-widgets/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-returns-summary-container/styles.css';
import {getOrderReturnRequestIds, getPage, getReturnRequests} from '@oracle-cx-commerce/commerce-utils/selector';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Display the summary of a return requests.
 * Needs orderId for which the returns summary are to be displayed.
 */

const getReturnRequestsSummary = (regions, returnRequestIds, returnRequestsSummary) => {
  const showReturnReason = false;

  return returnRequestIds.map(returnRequestId => {
    const returnDetails = returnRequestsSummary[returnRequestId];

    return (
      <div className="ReturnSummaryContainer" key={returnRequestId}>
        <ReturnContext.Provider key={returnRequestId} value={{returnDetails, showReturnReason}}>
          {regions.map((regionId, index) => (
            // eslint-disable-next-line react/no-array-index-key
            <Region key={index} regionId={regionId} />
          ))}
        </ReturnContext.Provider>
      </div>
    );
  });
};

const ProfileReturnsSummaryContainer = props => {
  const {regions = {}} = props;
  const {action} = useContext(StoreContext);
  const orderId = useSelector(getPage).contextId;

  // Trigger an action to get the return requests summary for the given order
  useEffect(() => {
    action('listReturnRequestsForOrder', {id: orderId});
  }, [action, orderId]);

  // render only if the returns are present in the state.
  // This is to ensure that the 'listReturnRequestsForOrder' action triggered is fulfilled.
  const returnRequests = useSelector(getReturnRequests);
  const returnRequestIds = useSelector(getOrderReturnRequestIds);
  if (returnRequests) {
    const returnRequestsSummary = getReturnRequestsSummary(regions, returnRequestIds, returnRequests);

    return (
      <Styled id="ReturnsSummary" css={css}>
        {returnRequestsSummary}
      </Styled>
    );
  }

  return null;
};

export default ProfileReturnsSummaryContainer;
