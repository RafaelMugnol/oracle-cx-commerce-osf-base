/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useContext, useEffect, useMemo, useState} from 'react';

import Form from '@oracle-cx-commerce/react-components/form';
import Modal from '@oracle-cx-commerce/react-components/modal';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {access} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/move-wish-list-item-modal/styles.css';
import {formToJson} from '@oracle-cx-commerce/react-components/utils';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/selectors';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import PropTypes from 'prop-types';

const SuccessMessage = React.lazy(() =>
  import(
    '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/add-to-wish-list-success-message'
  )
);

/**
 * Provides edit action on wish List
 * @param {*} props
 */
const MoveWishListItemModal = props => {
  const {
    actionSave,
    actionCancel,
    showMoveModal = false,
    toggleMoveModal,
    cssOverride,
    closeLinkAltText,
    alertWishListUpdated,
    headingMoveToAnotherList,
    wishListProduct = {},
    wishListId
  } = props;

  const {action} = useContext(StoreContext);
  const {wishLists} = useComponentData();
  const {siteId} = useSelector(access);
  const [transformedList, setTransformedList] = useState([]);
  const productSelection = {
    productDisplayName: wishListProduct.productName,
    productSalePrice: wishListProduct.price,
    productThumbImageURL: wishListProduct.thumbnailUrl,
    productVariantValues: wishListProduct.selectedOptions ? wishListProduct.selectedOptions : ''
  };

  /**
   * Transform sku data from state and wish list to display in the UI
   */
  useMemo(() => {
    const wishListItems = [];
    if (Object.keys(wishLists)) {
      for (const itemId in wishLists) {
        if (itemId !== wishListId) {
          const wishListItem = {
            wishListId: itemId,
            wishListName: wishLists[itemId].spaceName,
            checked: false
          };
          if (wishListItems.length === 0) {
            wishListItem.checked = true;
          }
          wishListItems.push(wishListItem);
        }
      }
      setTransformedList(wishListItems);
    }
  }, [wishListId, wishLists]);

  const closeModal = useCallback(() => {
    toggleMoveModal(wishListProduct.contentId, false);
  }, [toggleMoveModal, wishListProduct.contentId]);

  /**
   * success callback method when edit wish list details form submitted
   */
  const onOk = useCallback(() => {
    closeModal();
    action('notify', {level: 'success', message: alertWishListUpdated});
  }, [action, closeModal, alertWishListUpdated]);

  /**
   * failure callback method for edit wish list details form submitted
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      closeModal();
      action('notify', {level: 'error', message});
    },
    [action, closeModal]
  );

  /**
   * Handler for Update wishList action invoked on submit of Edit wish List
   * @param {*} event
   */
  const handleMoveWishListProduct = event => {
    event.preventDefault();
    action('notifyClearAll');
    const form = event.target;
    const formData = formToJson(form);
    action('moveWishlistProduct', {
      targetWishlistId: formData.WishListId,
      wishlistId: wishListId,
      contentId: wishListProduct.contentId,
      siteId
    })
      .then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .catch(error => {
        onNotOk({error});
      });
  };

  useEffect(() => {
    try {
      if (!wishLists || wishLists == null || wishLists === undefined) {
        const payload = {siteId};
        action('listWishlists', payload).then(response => {
          if (response.ok === false) {
            onNotOk(response);
          }
        });
      }
    } catch (error) {
      console.error(error);
    }
  }, [action, onNotOk, siteId, wishLists]);

  return (
    <Styled id="MoveWishListItemModal" css={css}>
      {typeof window !== 'undefined' && (
        <Suspense fallback={null}>
          <Modal
            cssOverride={cssOverride}
            show={showMoveModal}
            onClose={closeModal}
            closeIconTitle={closeLinkAltText}
            closeAriaLabel={closeLinkAltText}
            title={
              <>
                <span className="MoveWishListItemModal__HeaderText">{headingMoveToAnotherList}</span>
              </>
            }
          >
            <div className="MoveWishListItemModal__Wrapper">
              <Form onSubmit={handleMoveWishListProduct} noValidate={true}>
                <SuccessMessage productSelection={productSelection} {...props} />
                <div className="MoveWishListItemModal__WishLists">
                  {Object.values(transformedList).map(item => (
                    <div key={item.wishListId} className="MoveWishListItemModal__WishListRow">
                      <input
                        id={`WishListId-${item.wishListId}`}
                        data-testid={`WishListId-${item.wishListId}`}
                        type="radio"
                        value={item.wishListId}
                        defaultChecked={item.checked}
                        name="WishListId"
                      />
                      <label htmlFor={`WishListId-${item.wishListId}`} className="MoveWishListItemModal__WishListTitle">
                        {item.wishListName}
                      </label>
                    </div>
                  ))}
                </div>
                <div className="MoveWishListItemModal__Buttons">
                  <button data-testid="submitButton" type="submit" className={'MoveWishListItemModal__SubmitButton'}>
                    {actionSave}
                  </button>
                  <button
                    data-testid="cancelButton"
                    type="button"
                    className={'secondary MoveWishListItemModal__CancelButton'}
                    onClick={closeModal}
                  >
                    {actionCancel}
                  </button>
                </div>
              </Form>
            </div>
          </Modal>
        </Suspense>
      )}
    </Styled>
  );
};

MoveWishListItemModal.propTypes = {
  /** The flag to indicate whether to show the modal or not*/
  showMoveModal: PropTypes.bool,
  /** The id of the current wishlist of the modal in the UI */
  wishListId: PropTypes.string.isRequired,
  /** Callback function to be invoked when move wish list modal needs to be opened or closed */
  toggleMoveModal: PropTypes.func.isRequired,
  /** css class name to override styles (pass this only if you want to override default css style)*/
  cssOverride: PropTypes.string,
  /** The details of the current wishlist product item being edited in the UI */
  wishListProduct: PropTypes.shape({
    /** The Sku id of the variant */
    catRefId: PropTypes.string.isRequired,
    /** The quantity of the product in wishlist*/
    quantityDesired: PropTypes.string.isRequired,
    /** The id of the product */
    productId: PropTypes.string.isRequired,
    /** Display name of the product */
    productName: PropTypes.string,
    /** Thumbnail image URI of the product variant */
    thumbnailUrl: PropTypes.string,
    /** Product variant property values */
    selectedOptions: PropTypes.arrayOf(
      PropTypes.shape({
        /** The variant type of the product */
        optionName: PropTypes.string.isRequired,
        /** The variant value of the product */
        optionValue: PropTypes.string.isRequired
      })
    ),
    /** The path of the product description page*/
    path: PropTypes.string
  }).isRequired
};

MoveWishListItemModal.defaultProps = {
  showMoveModal: false,
  cssOverride: undefined
};

export default React.memo(MoveWishListItemModal);
