/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {Suspense, useCallback, useContext, useState} from 'react';

import CloseIcon from '@oracle-cx-commerce/react-components/icons/close';
import HorizontalGearIcon from '@oracle-cx-commerce/react-components/icons/horizontal-gear';
import Img from '@oracle-cx-commerce/react-components/img';
import Link from '@oracle-cx-commerce/react-components/link';
import Popover from '@oracle-cx-commerce/react-components/popover';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/profile-wish-list-item-details/styles.css';
import {getPriorityOptions} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/utils';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';

const EditWishListItemModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/edit-wish-list-item-modal')
);

const MoveWishListItemModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/move-wish-list-item-modal')
);

const ProfileWishListItemDetails = props => {
  const {
    textItemDetails,
    transformedList,
    wishListId,
    labelDelete,
    labelEditWishListProduct,
    labelMove,
    labelPriority,
    labelQuantityWanted,
    alertPriceUnavailable,
    labelHidewishListComment,
    closeLinkAltText,
    actionQuickOrderAddToCart,
    onAddItemsClick,
    alertWishListProductDeleted,
    setTransformedList,
    isSharedWishList,
    setShowWishlistPopover,
    alertWishListUpdated
  } = props;
  const store = useContext(StoreContext);
  const {action} = store;
  const [showPopover, setShowPopover] = useState(new Map());
  const [showEditModal, setShowEditModal] = useState({});
  const [showMoveModal, setShowMoveModal] = useState({});

  const formatCurrency = useNumberFormatter({style: 'currency'});
  const priorityOptions = getPriorityOptions(props);

  const getPriorityOptionLabel = priority => {
    let optionLabel = priority || '';
    priorityOptions.map(option => {
      if (option.key === Number(priority)) {
        optionLabel = option.value;
      }

      return option;
    });

    return optionLabel;
  };

  const formatPrice = (price, altPriceMsg) => {
    return price ? formatCurrency(price) : altPriceMsg;
  };

  /**
   * Failure call back for the deleteWishlist action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  /**
   * Success call back for the deleteWishlist action
   */
  const onOk = useCallback(
    contentId => {
      const transformedItems = [...transformedList];
      transformedItems.forEach(item => {
        if (item.contentId === contentId) {
          const index = transformedItems.indexOf(item);
          if (index !== -1) transformedItems.splice(index, 1);
        }
      });
      setTransformedList(transformedItems);

      action('notify', {level: 'success', message: alertWishListProductDeleted});
    },
    [action, alertWishListProductDeleted, setTransformedList, transformedList]
  );

  /**
   * Success callback method for delete wish list comment action
   */
  const onDeleteCommentSuccess = useCallback(() => {
    action('notify', {level: 'success', message: alertWishListUpdated});
  }, [action, alertWishListUpdated]);

  /*
   * Method to remove the selected item from the Wish List
   */
  const handleDeleteItem = deleteItem => {
    try {
      const payLoad = {
        wishlistId: wishListId,
        contentId: deleteItem.contentId
      };

      action('deleteWishlistProduct', payLoad).then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk(deleteItem.contentId);
        }
      });
    } catch (error) {
      console.error(error);
    }
  };

  /**
   * Handler to open/close Edit Wish List Product modal
   */
  const toggleEditModal = useCallback((contentId, isvisible) => {
    setShowEditModal(showEditModal => {
      return {
        ...showEditModal,
        [contentId]: isvisible
      };
    });
  }, []);
  /**
   * Handler to open/close Move Wish List Product modal
   */
  const toggleMoveModal = useCallback(
    (contentId, isvisible) => {
      setShowMoveModal(showMoveModal => {
        return {
          ...showMoveModal,
          [contentId]: isvisible
        };
      });
    },
    [setShowMoveModal]
  );

  // A flag to keep address action popover toggling
  const hideAllPopovers = useCallback(
    productId => {
      showPopover.forEach(function (value, key) {
        if (key !== productId && value === true) {
          setShowPopover(new Map(showPopover.set(key, !showPopover.get(key))));
        }
      });
    },
    [showPopover]
  );
  const handlePopoverToggle = contentId => {
    setShowWishlistPopover(false);
    hideAllPopovers(contentId);
    setShowPopover(new Map(showPopover.set(contentId, !showPopover.get(contentId))));
  };

  const deleteComment = (item, comment) => {
    try {
      const payLoad = {
        wishlistId: wishListId,
        contentId: comment.contentId,
        parentContentId: item.contentId
      };

      action('deleteWishlistItemComments', payLoad).then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onDeleteCommentSuccess();
        }
      });
    } catch (error) {
      console.error(error);
    }
  };

  const getWishListActions = item => {
    return (
      <React.Fragment>
        <li>
          <div
            role="button"
            tabIndex={0}
            key={`editWishlistProduct`}
            onKeyPress={event => {
              if (event.key === 'Enter') {
                handlePopoverToggle(item.contentId);
                toggleEditModal(item.contentId, true);
              }
            }}
            onClick={() => {
              handlePopoverToggle(item.contentId);
              toggleEditModal(item.contentId, true);
            }}
          >
            {labelEditWishListProduct}
          </div>
        </li>
        {!isSharedWishList && (
          <li>
            <div
              role="button"
              tabIndex={0}
              key={`moveProduct`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  handlePopoverToggle(item.contentId);
                  toggleMoveModal(item.contentId, true);
                }
              }}
              onClick={() => {
                handlePopoverToggle(item.contentId);
                toggleMoveModal(item.contentId, true);
              }}
            >
              {labelMove}
            </div>
          </li>
        )}
        {!isSharedWishList && (
          <li>
            <div
              role="button"
              tabIndex={0}
              key={`deleteProduct`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  handlePopoverToggle(item.contentId);
                  handleDeleteItem(item);
                }
              }}
              onClick={() => {
                handlePopoverToggle(item.contentId);
                handleDeleteItem(item);
              }}
            >
              {labelDelete}
            </div>
          </li>
        )}
      </React.Fragment>
    );
  };

  const WishlistComments = props => {
    const {item} = props;

    item.comments.sort(function (a, b) {
      return new Date(a.dateCreated) - new Date(b.dateCreated);
    });

    return (
      item.comments &&
      item.comments.length > 0 && (
        <div className="ProfileWishListItemDetails__Comments">
          <span className="ProfileWishListItemDetails__CommentText">
            {item.comments[item.comments.length - 1].comment}
          </span>
          <button
            type="button"
            title={labelHidewishListComment}
            className="ProfileWishListItemDetails__CommentClose"
            aria-label={labelHidewishListComment}
            onClick={() => {
              deleteComment(item, item.comments[item.comments.length - 1]);
            }}
          >
            <CloseIcon className="ProfileWishListItemDetails__CloseIcon" />
          </button>
        </div>
      )
    );
  };

  return (
    <Styled id="ProfileWishListItemDetails" css={css}>
      <div
        className="ProfileWishListItemDetails__ItemDetails"
        key={`ProfileWishListItemDetails__ItemDetails-${wishListId}`}
      >
        <div className="ProfileWishListItemDetails__ItemDetailsHeader">
          <span className="ProfileWishListItemDetails__ItemDetailsLabel">{textItemDetails}</span>
        </div>
        {Object.values(transformedList).map((item, index) => (
          <React.Fragment key={`ProfileWishListItem-${item.contentId}`}>
            <div className="ProfileWishListItemDetails__Row">
              <div>
                <div className="ProfileWishListItemDetails__Image">
                  <Link href={item.path}>
                    <Img src={item.thumbnailUrl} title={item.productName} alt={item.productName} />
                  </Link>
                </div>
                <div className="ProfileWishListItemDetails__Name">
                  <Link href={item.path} className="ProfileWishListItemDetails__ProductName">
                    {item.productName}
                  </Link>
                  {item.productVariantOptions &&
                    item.productVariantOptions !== null &&
                    item.productVariantOptions !== undefined &&
                    item.productVariantOptions.length > 0 &&
                    Object.values(item.selectedOptions).map(option => (
                      <div
                        key={`ProfileWishListItemVariant-${option.optionName}`}
                        className="ProfileWishListItemDetails__ProfileWishListItemVariant"
                      >
                        {option.optionName} : {option.optionValue}
                      </div>
                    ))}
                  <div className="ProfileWishListItemDetails__Price">
                    {formatPrice(item.price, alertPriceUnavailable)}
                  </div>
                </div>
              </div>
              <div>
                <div className="ProfileWishListItemDetails__Details">
                  <div className="ProfileWishListItemDetails__QuantityWanted">{`${labelQuantityWanted}: ${item.quantityDesired}`}</div>
                  <div className="ProfileWishListItemDetails__Priority">{`${labelPriority}: ${getPriorityOptionLabel(
                    item.priority
                  )}`}</div>
                </div>
              </div>
              <WishlistComments item={item} />
              <div className="ProfileWishListItemDetails__AddToCartOptionIconContainer">
                <div className="ProfileWishListItemDetails__AddToCart">
                  <button
                    type="button"
                    data-testid={`addToCartButton-${index}`}
                    className="ProfileWishListItemDetails__AddToCartButton primary"
                    onClick={() => onAddItemsClick(item)}
                    aria-label={actionQuickOrderAddToCart}
                  >
                    <span>{actionQuickOrderAddToCart}</span>
                  </button>
                </div>
                <div className="ProfileWishListItemDetails__OptionsExpandIcon">
                  <HorizontalGearIcon
                    tabIndex={0}
                    aria-label={''}
                    data-testid={`ProfileWishListItemDetails-OptionsIcon-${item.contentId}`}
                    className="ProfileWishListItemDetails__HorizontalGearIcon"
                    onKeyPress={event => (event.key === 'Enter' ? handlePopoverToggle(item.contentId) : '')}
                    onClick={() => {
                      handlePopoverToggle(item.contentId);
                    }}
                  />
                  <Popover
                    id={`Popover`}
                    key={`Popover`}
                    show={showPopover.get(item.contentId)}
                    title=""
                    displayBackdrop={true}
                    onClose={() => {
                      handlePopoverToggle(item.contentId);
                    }}
                    closeIconTitle={closeLinkAltText}
                  >
                    <ul>{getWishListActions(item)}</ul>
                  </Popover>
                </div>
              </div>
            </div>
            {typeof window !== 'undefined' && (
              <Suspense fallback={null}>
                <EditWishListItemModal
                  toggleEditModal={toggleEditModal}
                  showEditModal={showEditModal[item.contentId]}
                  wishListProduct={item}
                  wishListId={wishListId}
                  {...props}
                ></EditWishListItemModal>
              </Suspense>
            )}
            {typeof window !== 'undefined' && (
              <Suspense fallback={null}>
                <MoveWishListItemModal
                  toggleMoveModal={toggleMoveModal}
                  showMoveModal={showMoveModal[item.contentId]}
                  wishListProduct={item}
                  wishListId={wishListId}
                  {...props}
                ></MoveWishListItemModal>
              </Suspense>
            )}
          </React.Fragment>
        ))}
      </div>
    </Styled>
  );
};
ProfileWishListItemDetails.propTypes = {
  /** The list of wishlist items to be displayed in the UI */
  transformedList: PropTypes.arrayOf(
    PropTypes.shape({
      /** The Sku id of the variant */
      catRefId: PropTypes.string.isRequired,
      /** The quantity of the product in wishlist*/
      quantityDesired: PropTypes.string.isRequired,
      /** The id of the product */
      productId: PropTypes.string.isRequired,
      /** Display name of the product */
      productName: PropTypes.string,
      /** Thumbnail image URI of the product variant */
      thumbnailUrl: PropTypes.string,
      /** Product variant property values */
      selectedOptions: PropTypes.arrayOf(
        PropTypes.shape({
          /** The variant type of the product */
          optionName: PropTypes.string.isRequired,
          /** The variant value of the product */
          optionValue: PropTypes.string.isRequired
        })
      ),
      /** The path of the product description page*/
      path: PropTypes.string
    })
  ).isRequired,
  /** The id of the current wishlist of the modal in the UI */
  wishListId: PropTypes.string.isRequired,
  /** Callback function to be invoked when we click add to cart on any item */
  onAddItemsClick: PropTypes.func.isRequired,
  /** Callback function to set the list of wishlist items to be displayed in the UI */
  setTransformedList: PropTypes.func.isRequired,
  /** Callback function to set the list of wishlist items to be displayed in the UI */
  setShowWishlistPopover: PropTypes.func.isRequired
};

ProfileWishListItemDetails.defaultProps = {};

export default ProfileWishListItemDetails;
