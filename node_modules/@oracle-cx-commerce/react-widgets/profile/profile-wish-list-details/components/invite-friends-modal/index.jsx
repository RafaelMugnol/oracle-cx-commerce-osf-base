/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useEffect, useState} from 'react';
import {PAGE_WISH_LISTS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Modal from '@oracle-cx-commerce/react-components/modal';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {getInviteFriendsEmailString} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/utils';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/invite-friends-modal/styles.css';
import {getBaseURL, t, uuid} from '@oracle-cx-commerce/utils/generic';
import Form from '@oracle-cx-commerce/react-components/form';
import {formToJson} from '@oracle-cx-commerce/react-components/utils';

/**
 * Invites friends through email to collaborate on Wish List
 * @param {*} props
 */
const InviteFriendsModal = props => {
  const {
    labelInviteFriends,
    textInviteFriendsMessage,
    labelEmailAddress,
    actionRemoveFriend,
    textAddEmailAddress,
    actionSend,
    actionCancel,
    textWishlistEmailSubject,
    textWishlistEmailBodyPara1,
    textWishlistEmailBodyPara2,
    closeLinkAltText
  } = props;

  const {showInviteFriendsModal, toggleInviteFriendsModal, cssOverride, currentWishListId, currentWishListName} = props;
  const {action} = useContext(StoreContext);

  const [emailList, setEmailList] = useState([]);

  /**
   * handler for adding new email config
   */
  const handleNewEmail = useCallback(() => {
    const newItem = {
      email: '',
      key: uuid()
    };
    setEmailList([...emailList, newItem]);
  }, [emailList]);

  useEffect(() => {
    if (emailList.length === 0) {
      handleNewEmail();
    }
  }, [handleNewEmail, emailList.length]);

  /**
   * handler for removing unsaved email config
   * @param {*} event
   */
  const removeUnsavedEmail = event => {
    const itemId = event.target.id.split('-')[1];
    setEmailList(emailList.filter(element => element.key !== itemId));
  };

  /**
   * Failure call back for the InviteFriends action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      toggleInviteFriendsModal();
      action('notify', {level: 'error', message});
    },
    [action, toggleInviteFriendsModal]
  );

  /**
   * Success call back for the InviteFriends action
   */
  const onOk = useCallback(
    ({token, emailList}) => {
      toggleInviteFriendsModal();
      const subjectText = t(textWishlistEmailSubject, {wishListName: currentWishListName}) || '';
      const bodyText = `${
        t(textWishlistEmailBodyPara1, {
          wishListName: currentWishListName,
          wishListURL: `${getBaseURL({window})}/${PAGE_WISH_LISTS_LINK}?invite=${token}` || ''
        }) || ''
      }${textWishlistEmailBodyPara2}`;

      window.location.href = getInviteFriendsEmailString({
        emailList,
        subjectText,
        bodyText
      });
    },
    [
      currentWishListName,
      textWishlistEmailBodyPara1,
      textWishlistEmailBodyPara2,
      textWishlistEmailSubject,
      toggleInviteFriendsModal
    ]
  );

  /**
   * Handler for InviteFriends action invoked on click of Send
   * @param {*} event
   */
  const handleSendInviteToFriends = event => {
    event.preventDefault();
    action('notifyClearAll');
    const {onCommentAddedToList, onMemberJoinsList, onProductAddedToList, ...emailLists} = formToJson(event.target);
    const payload = {
      wishlistId: currentWishListId
    };
    /* This action returns an token which is used to generate the invitation link */
    action('createInvitation', payload)
      .then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk({
            token: response && response.json && response.json.invitationToken,
            emailList: Object.values(emailLists)
          });
        }
      })
      .catch(error => {
        onNotOk({error});
      });
  };

  return (
    <Styled id="InviteFriendsModal" css={css}>
      <Modal
        cssOverride={cssOverride}
        show={showInviteFriendsModal}
        onClose={toggleInviteFriendsModal}
        closeIconTitle={closeLinkAltText}
        closeArialLabel={closeLinkAltText}
        title={
          <>
            <span className="InviteFriendsModal__HeaderText">{labelInviteFriends}</span>
          </>
        }
      >
        <Form onSubmit={handleSendInviteToFriends} noValidate={true}>
          <div className="InviteFriendsModal__Wrapper">
            <div className="InviteFriendsModal__Alert">
              <span>{textInviteFriendsMessage}</span>
            </div>
            <div>
              <ul className="InviteFriendsModal__EmailConfigWrapper">
                {emailList.map((item, index) => (
                  <li className="InviteFriendsModal__EmailConfigItem" key={item.key} id={`emailConfigItem-${item.key}`}>
                    <div className="InviteFriendsModal__EmailElement">
                      <label htmlFor={`emailAddress-${item.key}`}>{labelEmailAddress}</label>
                      <input
                        type="email"
                        id={`emailAddress-${item.key}`}
                        name={`emailAddress-${item.key}`}
                        data-testid={`emailAddress-${index}`}
                        className="InviteFriendsModal__Email"
                        maxLength="254"
                      />
                      <span className="validationMessage"></span>
                    </div>
                    <div className="InviteFriendsModal__RemoveShopper">
                      <button
                        onClick={removeUnsavedEmail}
                        className="InviteFriendsModal__RemoveShopperButton"
                        aria-label={actionRemoveFriend}
                        title={actionRemoveFriend}
                        type="button"
                        id={`removeFriend-${item.key}`}
                        data-testid={`removeFriend-${item.key}`}
                      >
                        {actionRemoveFriend}
                      </button>
                    </div>
                  </li>
                ))}
              </ul>
              <div className="InviteFriendsModal__AddEmailElement">
                <button
                  onClick={handleNewEmail}
                  className="InviteFriendsModal__AddEmail"
                  aria-label={textAddEmailAddress}
                  title={textAddEmailAddress}
                  type="button"
                >
                  {textAddEmailAddress}
                </button>
              </div>
            </div>
            <div className="InviteFriendsModal__Buttons">
              <button data-testid="submitButton" type="submit" className={'InviteFriendsModal__ConfirmButton'}>
                {actionSend}
              </button>
              <button
                type="button"
                data-testid="cancelButton"
                className={'secondary InviteFriendsModal__CancelButton'}
                onClick={toggleInviteFriendsModal}
              >
                {actionCancel}
              </button>
            </div>
          </div>
        </Form>
      </Modal>
    </Styled>
  );
};

export default React.memo(InviteFriendsModal);
