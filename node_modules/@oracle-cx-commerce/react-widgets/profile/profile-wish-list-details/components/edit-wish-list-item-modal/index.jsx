/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useContext, useRef} from 'react';

import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import Form from '@oracle-cx-commerce/react-components/form';
import Modal from '@oracle-cx-commerce/react-components/modal';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/edit-wish-list-item-modal/styles.css';
import {formToJson} from '@oracle-cx-commerce/react-components/utils';
import {getPriorityOptions} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/utils';
import PropTypes from 'prop-types';

const SuccessMessage = React.lazy(() =>
  import(
    '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/add-to-wish-list-success-message'
  )
);

/**
 * Provides edit action on Wish List
 * @param {*} props
 */
const EditWishListItemModal = props => {
  const {
    actionSave,
    actionCancel,
    textEditCommentQuantityAndPriority,
    showEditModal = false,
    toggleEditModal,
    labelEnterComments,
    cssOverride,
    closeLinkAltText,
    alertWishListUpdated,
    labelPriority,
    labelQuantityWanted,
    isSharedWishList,
    wishListProduct = {},
    wishListId
  } = props;

  const {action} = useContext(StoreContext);
  const commentInputParam = useRef();
  const priorityOptions = getPriorityOptions(props);
  const productSelection = {
    productDisplayName: wishListProduct.productName,
    productSalePrice: wishListProduct.price,
    productThumbImageURL: wishListProduct.thumbnailUrl,
    productVariantValues: wishListProduct.selectedOptions ? wishListProduct.selectedOptions : ''
  };

  const closeModal = useCallback(() => {
    toggleEditModal(wishListProduct.contentId, false);
  }, [toggleEditModal, wishListProduct.contentId]);
  /**
   * maxLength Check for number input
   * @param  {Event} event
   */
  const maxLengthCheck = event => {
    const inputValue = event.target.value;
    event.target.value = inputValue.replace(/\D/g, '');
    if (inputValue && inputValue.length > 3) {
      event.target.value = inputValue.slice(0, 3);
    }
  };

  /**
   * success callback method when edit wish list details form submitted
   */
  const onOk = useCallback(() => {
    closeModal();
    action('notify', {level: 'success', message: alertWishListUpdated});
  }, [closeModal, action, alertWishListUpdated]);

  /**
   * failure callback method for edit wish list details form submitted
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      closeModal();
      action('notify', {level: 'error', message});
    },
    [closeModal, action]
  );

  /**
   * Handler for addWishlistItemComments action invoked on editing/adding comment on wish List
   * @param {*} event
   */
  const handleEditWishListComment = formData => {
    try {
      const commentsPayload = {
        parentContentId: wishListProduct.contentId,
        comment: formData.wishListProductComments,
        wishlistId: wishListId
      };
      action('addWishlistItemComments', commentsPayload)
        .then(response => {
          if (response.ok === false) {
            onNotOk(response);
          } else {
            onOk();
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    } catch (error) {
      console.error(error);
    }
  };

  /**
   * Handler for updateWishlistProduct action invoked on submit of Edit wish List
   * @param {*} event
   */
  const handleEditWishListProduct = event => {
    event.preventDefault();
    action('notifyClearAll');
    const form = event.target;
    const formData = formToJson(form);
    try {
      if (formData.wishListProductComments) {
        handleEditWishListComment(formData);
      }
      const quantityPriorityPayload = {
        productDesiredPriority: formData.prioritySelection,
        productDesiredQuantity: formData.ProductQuantity,
        wishlistId: wishListId,
        contentId: wishListProduct.contentId
      };
      action('updateWishlistProduct', quantityPriorityPayload)
        .then(response => {
          if (response.ok === false) {
            onNotOk(response);
          } else {
            onOk();
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <Styled id="EditWishListItemModal" css={css}>
      {typeof window !== 'undefined' && (
        <Suspense fallback={null}>
          <Modal
            cssOverride={cssOverride}
            show={showEditModal}
            onClose={closeModal}
            closeIconTitle={closeLinkAltText}
            closeAriaLabel={closeLinkAltText}
            title={
              <>
                <span className="EditWishListItemModal__HeaderText">{textEditCommentQuantityAndPriority}</span>
              </>
            }
          >
            <div className="EditWishListItemModal__Wrapper">
              <Form onSubmit={handleEditWishListProduct} noValidate={true}>
                <SuccessMessage productSelection={productSelection} {...props} />
                <div className="EditWishListItemModal__InputElement">
                  {/* listDescription */}
                  <label htmlFor="wishListProductComments">{labelEnterComments}</label>
                  <textarea
                    type="text"
                    className="EditWishListItemModal__CommentTextarea"
                    id="wishListProductComments"
                    name="wishListProductComments"
                    data-testid="wishListProductComments"
                    autoCapitalize="sentences"
                    ref={commentInputParam}
                    rows="3"
                    maxLength="254"
                  />
                  <span className="validationMessage"></span>
                </div>
                {!isSharedWishList && (
                  <div className="EditWishListItemModal__QuantityInput">
                    <label htmlFor="ProductQuantity">{labelQuantityWanted}</label>
                    <div className="EditWishListItemModal__Quantity">
                      <div className="EditWishListItemModal__QuantityInput">
                        <input
                          type="text"
                          name="ProductQuantity"
                          className="EditWishListItemModal__QuantityInputText"
                          data-testid={`ProductQuantity`}
                          defaultValue={wishListProduct.quantityDesired}
                          min={1}
                          max={999}
                          onInput={maxLengthCheck}
                        />
                      </div>
                    </div>
                  </div>
                )}
                {!isSharedWishList && (
                  <div className="EditWishListItemModal__PriorityDropdown">
                    <label htmlFor="prioritySelection">{labelPriority}</label>
                    <Dropdown
                      defaultValue={wishListProduct.priority}
                      data-testid="prioritySelection"
                      aria-label={labelPriority}
                      name="prioritySelection"
                    >
                      {priorityOptions.map(priorityOption => (
                        <option
                          key={`${priorityOption.key}_${priorityOption.value}`}
                          aria-label={priorityOption.value}
                          label={priorityOption.value}
                          value={priorityOption.key}
                        >
                          {priorityOption.value}
                        </option>
                      ))}
                    </Dropdown>
                  </div>
                )}
                <div className="EditWishListItemModal__Buttons">
                  <button data-testid="submitButton" type="submit" className="EditWishListItemModal__SubmitButton">
                    {actionSave}
                  </button>
                  <button
                    data-testid="cancelButton"
                    type="button"
                    className={'secondary EditWishListItemModal__CancelButton'}
                    onClick={closeModal}
                  >
                    {actionCancel}
                  </button>
                </div>
              </Form>
            </div>
          </Modal>
        </Suspense>
      )}
    </Styled>
  );
};

EditWishListItemModal.propTypes = {
  /** The flag to indicate whether to show the modal or not*/
  showEditModal: PropTypes.bool,
  /** The id of the current wishlist of the modal in the UI */
  wishListId: PropTypes.string.isRequired,
  /** Callback function to be invoked when create/edit wish list modal needs to be opened or closed */
  toggleEditModal: PropTypes.func.isRequired,
  /** css class name to override styles (pass this only if you want to override default css style)*/
  cssOverride: PropTypes.string,
  /** The details of the current wishlist product item being edited in the UI */
  wishListProduct: PropTypes.shape({
    /** The Sku id of the variant */
    catRefId: PropTypes.string.isRequired,
    /** The quantity of the product in wishlist*/
    quantityDesired: PropTypes.string.isRequired,
    /** The id of the product */
    productId: PropTypes.string.isRequired,
    /** Display name of the product */
    productName: PropTypes.string,
    /** Thumbnail image URI of the product variant */
    thumbnailUrl: PropTypes.string,
    /** Product variant property values */
    selectedOptions: PropTypes.arrayOf(
      PropTypes.shape({
        /** The variant type of the product */
        optionName: PropTypes.string.isRequired,
        /** The variant value of the product */
        optionValue: PropTypes.string.isRequired
      })
    ),
    /** The path of the product description page*/
    path: PropTypes.string
  }).isRequired
};

EditWishListItemModal.defaultProps = {
  showEditModal: false,
  cssOverride: undefined
};

export default React.memo(EditWishListItemModal);
