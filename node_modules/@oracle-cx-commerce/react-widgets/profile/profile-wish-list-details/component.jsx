/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {PAGE_CART_LINK, PAGE_WISH_LISTS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import React, {Suspense, useCallback, useContext, useRef, useState} from 'react';
import {getCurrentOrder} from '@oracle-cx-commerce/commerce-utils/selector';

import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import HorizontalGearIcon from '@oracle-cx-commerce/react-components/icons/horizontal-gear';
import InviteFriendsModal from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/invite-friends-modal';
import PasswordIcon from '@oracle-cx-commerce/react-components/icons/password';
import Popover from '@oracle-cx-commerce/react-components/popover';
import ProfileWishListItemDetails from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/components/profile-wish-list-item-details';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import UnlockIcon from '@oracle-cx-commerce/react-components/icons/unlock';
import UsersIcon from '@oracle-cx-commerce/react-components/icons/users';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/styles.css';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/selectors';
import {useWishListData} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/hooks';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {getSortOptions} from '@oracle-cx-commerce/react-widgets/profile/profile-wish-list-details/utils';

const CreateEditWishListModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/create-edit-wish-list-modal')
);

const DeleteWishListDialog = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-wish-lists/components/delete-wish-list-dialog')
);

const MergeCartItemsModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/add-items-to-cart/components/merge-cart-items')
);

/**
 * Widget that displays wish list item related information
 * and allows to update them.
 */
const ProfileWishListDetails = props => {
  //resources
  const {
    textPrivate,
    textGroup,
    textShared,
    closeLinkAltText,
    textEditList,
    labelViewAllLists,
    textDeleteList,
    labelInviteFriends,
    labelAriaSortText,
    textRetrievingWishList,
    alertWishListUpdated,
    textNoAvailableProductWishLists
  } = props;

  //Fetching WishList data and Store context
  const goToPage = useNavigator();
  const {wishListId, wishList = {}, userId} = useComponentData();
  const sortOptions = getSortOptions(props);
  const isProductDeleted = useRef(false);

  const {selectedSort, setSelectedSort, transformedList, setTransformedList, fetchingData, setFetchingData} =
    useWishListData(sortOptions, isProductDeleted.current);

  const store = useContext(StoreContext);
  const {action, getState} = store;

  // local states

  const [currentItem, setCurrentItem] = useState();
  const [modalView, setModalView] = useState(false);
  const [showPopover, setShowPopover] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showInviteFriendsModal, setShowInviteFriendsModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const isSharedWishList = wishList.creatorId !== userId;

  const wishListsPage = PAGE_WISH_LISTS_LINK;

  /**
   * Method to transform Wish List item which is selected to add to cart
   */

  const fetchCartItemProperties = item => {
    const selectedItemsArray = [];
    const {productId, catRefId} = item;
    const cartItem = {
      quantity: item.quantityDesired,
      productId,
      catRefId
    };
    selectedItemsArray.push(cartItem);

    return selectedItemsArray;
  };

  /**
   * Method to close Merge cart modal
   */

  const closeModal = useCallback(() => {
    setModalView(false);
  }, []);

  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      closeModal();
      action('notify', {level: 'error', message});
    },
    [action, closeModal]
  );

  const onOk = useCallback(() => {
    goToPage(PAGE_CART_LINK);
  }, [goToPage]);

  /**
   * Method to add the selected wish list item to cart
   */

  const addSelectedItemsToCart = useCallback(
    async item => {
      try {
        const response = await action('addItemsToCart', {
          combineLineItems: 'yes',
          items: fetchCartItemProperties(item)
        });
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk(response);
        }
      } catch (error) {
        onNotOk(error);
      }
    },
    [action, onNotOk, onOk]
  );

  /**
   * Event handler on clicking Add Items To Cart
   */

  const onAddItemsClick = useCallback(
    item => {
      const isCartNonEmpty = getCurrentOrder(getState()).numberOfItems;
      if (isCartNonEmpty) {
        setCurrentItem(item);
        setModalView(true);
      } else {
        addSelectedItemsToCart(item);
      }
    },
    [getState, addSelectedItemsToCart]
  );

  /**
   * Handler to open/close Delete Wish List modal
   */
  const toggleDeleteWishlistModal = useCallback(() => {
    setShowDeleteModal(!showDeleteModal);
  }, [showDeleteModal]);

  /**
   * Handler to open/close Delete Wish List modal
   */
  const toggleInviteFriendsModal = useCallback(() => {
    setShowInviteFriendsModal(!showInviteFriendsModal);
  }, [showInviteFriendsModal]);

  /**
   * Handler to open/close Delete Wish List modal
   */
  const toggleEditModal = useCallback(() => {
    setShowEditModal(!showEditModal);
  }, [showEditModal]);

  /**
   * Method to navigate to Wish Lists page.
   */

  const goToWishListsPage = useCallback(() => {
    goToPage(wishListsPage);
  }, [goToPage, wishListsPage]);

  /**
   * Event handlers for the options in Wish List Details page.
   */
  const getWishListActions = () => {
    return (
      <React.Fragment>
        <li>
          <div
            role="button"
            tabIndex={0}
            onKeyPress={event => {
              if (event.key === 'Enter') {
                setShowPopover(false);
                event.preventDefault();
                goToWishListsPage();
              }
            }}
            onClick={() => {
              setShowPopover(false);
              goToWishListsPage();
            }}
          >
            {labelViewAllLists}
          </div>
        </li>
        {!isSharedWishList && (
          <li>
            <div
              role="button"
              tabIndex={0}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  setShowPopover(false);
                  toggleEditModal();
                }
              }}
              onClick={() => {
                setShowPopover(false);
                toggleEditModal();
              }}
            >
              {textEditList}
            </div>
          </li>
        )}
        {!isSharedWishList && (
          <li>
            <div
              role="button"
              tabIndex={0}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  setShowPopover(false);
                  toggleInviteFriendsModal();
                }
              }}
              onClick={() => {
                setShowPopover(false);
                toggleInviteFriendsModal();
              }}
            >
              {labelInviteFriends}
            </div>
          </li>
        )}
        {!isSharedWishList && (
          <li>
            <div
              role="button"
              tabIndex={0}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  toggleDeleteWishlistModal();
                }
              }}
              onClick={() => {
                toggleDeleteWishlistModal();
              }}
            >
              {textDeleteList}
            </div>
          </li>
        )}
      </React.Fragment>
    );
  };

  /**
   * Listens to the change in the status of sort drop-down.
   *
   * @param {*} event
   */
  const onSortChange = useCallback(
    event => {
      setSelectedSort(event.target.value);
      setFetchingData(true);
    },
    [setFetchingData, setSelectedSort]
  );

  /**
   * Success call back for the deleteWishlist action
   */
  const onDeleteWishListSuccess = useCallback(() => {
    isProductDeleted.current = true;
    toggleDeleteWishlistModal();

    goToWishListsPage();
  }, [goToWishListsPage, toggleDeleteWishlistModal]);

  /**
   * Success call back for the editWishlist action
   */
  const onEditWishListSuccess = useCallback(() => {
    toggleEditModal();
    setFetchingData(true);
    action('notify', {level: 'success', message: alertWishListUpdated});
  }, [action, alertWishListUpdated, setFetchingData, toggleEditModal]);

  return (
    <Styled id="ProfileWishListDetails" css={css}>
      <div className="ProfileWishListDetails__Heading">
        <div>
          <h1>{wishList.spaceName}</h1>
          {/* Private */}
          {wishList.accessLevel === '0' && (
            <div className="ProfileWishListDetails__AccessLevelIconContainer">
              <PasswordIcon className="ProfileWishListDetails__AccessLevelIcon" alt={textPrivate} title={textPrivate} />
              <span>{textPrivate}</span>
            </div>
          )}
          {/* Group */}
          {wishList.accessLevel === '2' && (
            <div className="ProfileWishListDetails__AccessLevelIconContainer">
              <UsersIcon className="ProfileWishListDetails__AccessLevelIcon" alt={textGroup} title={textGroup} />
              <span>{textGroup}</span>
            </div>
          )}
          {/* Shared */}
          {wishList.accessLevel === '1' && (
            <div className="ProfileWishListDetails__AccessLevelIconContainer">
              <UnlockIcon className="ProfileWishListDetails__AccessLevelIcon" alt={textShared} title={textShared} />
              <span>{textShared}</span>
            </div>
          )}
        </div>
        <div className="ProfileWishListDetails__Actions">
          <div className="ProfileWishListDetails__OptionsExpandIcon">
            <HorizontalGearIcon
              tabIndex={0}
              aria-label={''}
              data-testid={`ProfileWishListDetails-OptionsIcon-${wishListId}`}
              className="ProfileWishListDetails__HorizontalGearIcon"
              onKeyPress={event => (event.key === 'Enter' ? setShowPopover(!showPopover) : '')}
              onClick={() => {
                setShowPopover(!showPopover);
              }}
            />
            <Popover
              id={`Popover`}
              key={`Popover`}
              show={showPopover}
              title=""
              displayBackdrop={true}
              onClose={() => {
                setShowPopover(!showPopover);
              }}
              closeIconTitle={closeLinkAltText}
            >
              <ul>{getWishListActions()}</ul>
            </Popover>
          </div>
        </div>
      </div>
      {fetchingData && (
        <div className="ProfileWishListDetails__FetchingDataText">
          <span>{textRetrievingWishList}</span>
        </div>
      )}
      {wishList && transformedList && transformedList.length > 0 && (
        <div className="ProfileWishListDetails__ProductDetails">
          <div className="ProfileWishListDetails__SortByDate">
            <div>
              <Dropdown
                onChange={onSortChange}
                value={selectedSort}
                data-testid="sortOption"
                aria-label={labelAriaSortText}
              >
                {sortOptions.map(sortOption => (
                  <option
                    key={`${sortOption.sortTerm}:${sortOption.order}`}
                    aria-label={sortOption.display}
                    label={sortOption.display}
                    value={`${sortOption.sortTerm}:${sortOption.order}`}
                  >
                    {sortOption.display}
                  </option>
                ))}
              </Dropdown>
            </div>
          </div>
          <div className="ProfileWishListDetails__ProfileWishListItemDetails">
            <div className="ProfileWishListDetails__UpdateItem">
              {!fetchingData && (
                <div>
                  <ProfileWishListItemDetails
                    setFetchingData={setFetchingData}
                    setShowWishlistPopover={setShowPopover}
                    transformedList={transformedList}
                    wishListId={wishListId}
                    onAddItemsClick={onAddItemsClick}
                    setTransformedList={setTransformedList}
                    {...props}
                  />
                </div>
              )}
            </div>

            {typeof window !== 'undefined' && (
              <Suspense fallback={null}>
                <MergeCartItemsModal
                  showMergeCartItemsModal={modalView}
                  closeMergeCartItemsModal={closeModal}
                  addSelectedItemsToCartHandler={() => addSelectedItemsToCart(currentItem)}
                  {...props}
                ></MergeCartItemsModal>
              </Suspense>
            )}
          </div>
        </div>
      )}
      {wishList &&
        Object.keys(wishList).length > 0 &&
        wishList.products &&
        Object.keys(wishList.products).length === 0 &&
        !fetchingData && (
          <div className="ProfileWishListDetails__NoAvailableProductsDataText">
            <span>{textNoAvailableProductWishLists}</span>
          </div>
        )}
      <InviteFriendsModal
        toggleInviteFriendsModal={toggleInviteFriendsModal}
        showInviteFriendsModal={showInviteFriendsModal}
        currentWishListId={wishListId}
        currentWishListName={wishList.spaceName}
        {...props}
      ></InviteFriendsModal>
      {typeof window !== 'undefined' && (
        <Suspense fallback={null}>
          <DeleteWishListDialog
            toggleDeleteWishListModal={toggleDeleteWishlistModal}
            showDeleteModal={showDeleteModal}
            currentWishListId={wishListId}
            onDeleteWishListSuccess={onDeleteWishListSuccess}
            {...props}
          ></DeleteWishListDialog>
        </Suspense>
      )}
      {typeof window !== 'undefined' && (
        <Suspense fallback={null}>
          <CreateEditWishListModal
            openModal={showEditModal}
            title={textEditList}
            closeLinkAltText={closeLinkAltText}
            onCancel={toggleEditModal}
            wishListId={wishListId}
            onEditWishListComplete={onEditWishListSuccess}
            {...props}
          />
        </Suspense>
      )}
    </Styled>
  );
};

ProfileWishListDetails.propTypes = {};

ProfileWishListDetails.defaultProps = {};

export default ProfileWishListDetails;
