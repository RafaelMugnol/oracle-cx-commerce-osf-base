/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
/**
 * The method returns a sorted array containing localized values for sort options.
 * @param {*} locales An object containing translations for the sort options
 * @param {boolean} isShared A boolean indicating whether to include the sort options specific for shared lists
 * @returns {Array} A list of object of format `{sortTerm: string, order: string, display: string}`
 */
export const getPriorityOptions = locales => {
  const priorityOptions = [
    {
      key: 1,
      value: 'labelLow'
    },
    {
      key: 2,
      value: 'labelMedium'
    },
    {
      key: 3,
      value: 'labelHigh'
    }
  ];

  return priorityOptions.map(priorityChoice => {
    const option = {...priorityChoice};
    option['value'] = locales[`${priorityChoice.value}`];

    return option;
  });
};

/**
 * The method returns a sorted array containing localized values for sort options.
 * @param {*} locales An object containing translations for the sort options
 * @param {boolean} isShared A boolean indicating whether to include the sort options specific for shared lists
 * @returns {Array} A list of object of format `{sortTerm: string, order: string, display: string}`
 */
export const getSortOptions = locales => {
  const sortOptions = [
    {
      sortTerm: 'dateadded',
      order: 'desc',
      display: 'labelDateAdded'
    },
    {
      sortTerm: 'priority',
      order: 'desc',
      display: 'labelPrioritySort'
    }
  ];

  return sortOptions.map(sortChoice => {
    const option = {...sortChoice};
    option['display'] = locales[`${sortChoice.display}`];

    return option;
  });
};

/**
 * The method returns a sorted array containing localized values for sort options.
 * @param {*} locales An object containing translations for the sort options
 * @param {boolean} isShared A boolean indicating whether to include the sort options specific for shared lists
 * @returns {Array} A list of object of format `{sortTerm: string, order: string, display: string}`
 */
export const getInviteFriendsEmailString = ({emailList, subjectText, bodyText}) => {
  return `mailto:${emailList.join(';')}?subject=${encodeURIComponent(subjectText)}&body=${encodeURIComponent(
    bodyText
  )}`;
};
