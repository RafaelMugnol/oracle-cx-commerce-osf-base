/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import {getProduct, getSku} from '@oracle-cx-commerce/commerce-utils/selector';

/**
 * Computes the payload for `updatePurchaseListItems` from product selection data
 * @param {Object} productSelection The product selection passed to the component
 * @returns {Object} Computed payload
 */
export function getUpdatePurchaseListItems(productSelection) {
  let items = [];
  if (Array.isArray(productSelection)) {
    items = productSelection.map(selection => ({
      productId: selection.productId,
      catRefId: selection.skuId,
      op: 'add',
      quantityDesired: selection.quantity ? selection.quantity : 1
    }));
  } else if (typeof productSelection === 'object') {
    items = [
      {
        productId: productSelection.productId,
        catRefId: productSelection.skuId,
        op: 'add',
        quantityDesired: productSelection.quantity ? productSelection.quantity : 1
      }
    ];
  }

  return items;
}

function getDetailsFromProductAndSku(product, sku, quantity) {
  const skuId = sku.repositoryId,
    {variantToSkuLookup, variantOptionsSeed} = product,
    variantDetails = [];
  let thumbImageURLs = [null];

  // Thumbnail image
  if (sku.thumbImageURLs && sku.thumbImageURLs.length) {
    ({thumbImageURLs} = sku);
  } else if (product.thumbImageURLs && product.thumbImageURLs.length) {
    ({thumbImageURLs} = product);
  }

  // Variant details
  const optionsStr = Object.entries(variantToSkuLookup).find(item => item[1] === skuId)[0];
  (optionsStr ? optionsStr : '').split(';').forEach(option => {
    if (option) {
      const [key, value] = option.split('=');

      const optionDetails = variantOptionsSeed[key],
        {options} = optionDetails;

      const {optionName} = optionDetails;
      const optionValue = options.find(item => item.value === parseInt(value, 10))['name'];

      variantDetails.push({optionName, optionValue});
    }
  });

  return {
    productId: product.id,
    skuId: sku.repositoryId,
    productDisplayName: sku.displayName ? sku.displayName : product.displayName,
    productSalePrice: sku.salePrice ? sku.salePrice : sku.listPrice,
    productThumbImageURL: thumbImageURLs[0],
    productVariantValues: variantDetails,
    quantity
  };
}

function getDetailsFromCommerceItem(commerceItem) {
  return {
    productId: commerceItem.productId,
    skuId: commerceItem.catRefId,
    productDisplayName: commerceItem.displayName,
    productSalePrice: commerceItem.salePrice ? commerceItem.salePrice : commerceItem.listPrice,
    productThumbImageURL: commerceItem.primaryThumbImageURL,
    productVariantValues: commerceItem.variant,
    quantity: commerceItem.quantity
  };
}

/**
 * Computes details of products from the product selection data
 * @param {Object} state The Redux state
 * @param {Object} item A product selection item, consisting of either combination of product and sku ids, or a commerce item
 * @returns {Object} the product details comprising `productId`, `skuId`, `productDisplayName`, `productThumbImageURL`, etc.
 */
export function getProductDetails(state, item) {
  const {productId, skuId, quantity, commerceItem} = item;

  if (productId && skuId) {
    const product = getProduct(state, {productId});
    const sku = getSku(state, {skuId});

    if (!isEmptyObject(product) && !isEmptyObject(sku)) {
      return getDetailsFromProductAndSku(product, sku, quantity);
    }
  } else if (commerceItem) {
    if (!isEmptyObject(commerceItem)) {
      return getDetailsFromCommerceItem(commerceItem);
    }
  }

  return {};
}
