/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useState, useCallback, Suspense} from 'react';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {isAuthenticated, getPurchaseLists} from '@oracle-cx-commerce/commerce-utils/selector';
import Modal from '@oracle-cx-commerce/react-components/modal';
import ListIcon from '@oracle-cx-commerce/react-components/icons/list-alt';
import CheckCircleIcon from '@oracle-cx-commerce/react-components/icons/check-circle';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {useComponentData, useAutoOpen} from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/selectors';
import css from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/styles.css';

const NotLoggedIn = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/not-logged-in')
);
const ListPurchaseLists = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/list-purchase-lists')
);
const CreatePurchaseList = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/create-purchase-list')
);
const SuccessMessage = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/success-message')
);

const initalModalView = {
  show: false,
  title: '',
  content: () => null,
  params: {}
};

const AddToPurchaseListLink = props => (
  <button disabled={props.disabled} type="button" className="AddToPurchaseList__Link" onClick={props.handleClick}>
    <ListIcon className="AddToPurchaseList__Icon"></ListIcon>
    <span>{props.label}</span>
  </button>
);

const AddToPurchaseListButton = props => (
  <button
    disabled={props.disabled}
    type="button"
    className="AddToPurchaseList__Button secondary"
    onClick={props.handleClick}
  >
    <span>{props.label}</span>
  </button>
);

/**
 * Widget that shows a "Add to Purchase List" link or an "Add Selected Items to Purchase List"
 * button depending on a selection of products (a combination of product and sku ids, or commerce items)
 * provided through `ProductSelectionContext`.
 *
 * @param props
 */
const AddToPurchaseList = props => {
  // contexts
  const productSelection = useComponentData();
  const {getState, action} = useContext(StoreContext);

  // local states
  const [modalView, setModalView] = useState(initalModalView);

  // texts
  const {
    labelAddToPurchaseList = '',
    labelAddSelectedToPurchaseList = '',
    closeLinkAltText = '',
    headerLoginOrCreateAccount = '',
    headerAddToPurchaseList = '',
    headerCreatePurchaseList = '',
    headerAddedToPurchaseList = ''
  } = props;

  const authenticated = useSelector(isAuthenticated);

  // event handlers
  const onCancel = useCallback(() => {
    setModalView(initalModalView);
  }, []);

  const onAddToPurchaseListComplete = useCallback(
    response => {
      if (response.ok) {
        setModalView({
          show: true,
          title: (
            <span>
              <CheckCircleIcon className="AddToPurchaseList__SuccessIcon"></CheckCircleIcon>
              <span id="AddToPurchaseListModal__Header">{headerAddedToPurchaseList}</span>
            </span>
          ),
          content: SuccessMessage,
          params: {
            purchaseListId: response.data.id
          }
        });
      } else {
        action('notify', {level: 'error', message: response.error.message});
      }
    },
    [action, headerAddedToPurchaseList]
  );

  const onNewPurchaseListClick = useCallback(() => {
    setModalView({
      show: true,
      title: <span id="AddToPurchaseListModal__Header">{headerCreatePurchaseList}</span>,
      content: CreatePurchaseList,
      params: {
        onAddToPurchaseListComplete,
        onCancel
      }
    });
  }, [onAddToPurchaseListComplete, onCancel, headerCreatePurchaseList]);

  const onAddToPurchaseListClick = useCallback(() => {
    if (!authenticated) {
      setModalView({
        show: true,
        title: <span id="AddToPurchaseListModal__Header">{headerLoginOrCreateAccount}</span>,
        content: NotLoggedIn,
        params: {}
      });
    } else {
      action('listPurchaseLists').then(() => {
        const purchaseLists = getPurchaseLists(getState());
        if (purchaseLists && Object.keys(purchaseLists).length) {
          setModalView({
            show: true,
            title: <span id="AddToPurchaseListModal__Header">{headerAddToPurchaseList}</span>,
            content: ListPurchaseLists,
            params: {
              onAddToPurchaseListComplete,
              onCancel,
              onNewPurchaseListClick
            }
          });
        } else {
          setModalView({
            show: true,
            title: <span id="AddToPurchaseListModal__Header">{headerCreatePurchaseList}</span>,
            content: CreatePurchaseList,
            params: {
              onAddToPurchaseListComplete,
              onCancel
            }
          });
        }
      });
    }
  }, [
    action,
    authenticated,
    getState,
    onAddToPurchaseListComplete,
    onCancel,
    onNewPurchaseListClick,
    headerAddToPurchaseList,
    headerCreatePurchaseList,
    headerLoginOrCreateAccount
  ]);

  useAutoOpen(onAddToPurchaseListClick);

  return (
    <Styled id="AddToPurchaseList" css={css}>
      <div className="AddToPurchaseList">
        {
          // Multiple product selections
          productSelection && Array.isArray(productSelection) && (
            <AddToPurchaseListButton
              disabled={productSelection.length === 0}
              label={labelAddSelectedToPurchaseList}
              handleClick={onAddToPurchaseListClick}
            ></AddToPurchaseListButton>
          )
        }

        {
          // Single product selection
          productSelection && !Array.isArray(productSelection) && typeof productSelection === 'object' && (
            <AddToPurchaseListLink
              disabled={!(productSelection.productId && productSelection.skuId)}
              label={labelAddToPurchaseList}
              handleClick={onAddToPurchaseListClick}
            ></AddToPurchaseListLink>
          )
        }

        {typeof window !== 'undefined' && (
          <Modal
            show={modalView.show}
            onClose={onCancel}
            closeIconTitle={closeLinkAltText}
            closeAriaLabel={closeLinkAltText}
            title={modalView.title}
          >
            <div aria-live="polite">
              <Suspense fallback={null}>
                <modalView.content productSelection={productSelection} {...modalView.params} {...props} />
              </Suspense>
            </div>
          </Modal>
        )}
      </div>
    </Styled>
  );
};

AddToPurchaseList.propTypes = {};

AddToPurchaseList.defaultProps = {};

export default AddToPurchaseList;
