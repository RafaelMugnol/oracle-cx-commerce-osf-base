/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useState, useCallback, useContext} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {noop, t} from '@oracle-cx-commerce/utils/generic';
import Form from '@oracle-cx-commerce/react-components/form';
import Alert from '@oracle-cx-commerce/react-components/alert';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/create-purchase-list/styles.css';
import {getUpdatePurchaseListItems} from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/utils';
import PropTypes from 'prop-types';

/**
 * Component to show a create purchase list dialog.
 *
 * @param props
 */
const CreatePurchaseList = props => {
  const {action} = useContext(StoreContext);

  const {
    labelListName = '',
    alertDuplicatePurchaseList = '',
    actionSave = '',
    actionCancel = '',
    productSelection = [],
    onAddToPurchaseListComplete = noop,
    onCancel = noop
  } = props;

  const [formData, setFormData] = useState({
    purchaseListName: ''
  });
  const [formError, setFormError] = useState('');
  const [inProgress, setInProgress] = useState(false);

  const onOk = useCallback(
    response => {
      onAddToPurchaseListComplete({
        ok: true,
        data: {
          id: response.json.id
        }
      });
    },
    [onAddToPurchaseListComplete]
  );

  const onNotOk = useCallback(
    response => {
      if (response.error.errorCode === '64111') {
        setFormError(t(alertDuplicatePurchaseList, {purchaseListName: formData.purchaseListName}));
      } else {
        onAddToPurchaseListComplete(response);
      }
    },
    [alertDuplicatePurchaseList, formData.purchaseListName, onAddToPurchaseListComplete]
  );

  const handleFormDataChange = event => {
    setFormData({...formData, [event.target.name]: event.target.value});
  };

  const onSubmit = useCallback(() => {
    setInProgress(true);

    action('createPurchaseList', {
      name: formData.purchaseListName,
      items: getUpdatePurchaseListItems(productSelection)
    })
      .then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onOk(response);
        }
      })
      .catch(error => {
        onNotOk({
          ok: false,
          error
        });
      })
      .finally(() => {
        setInProgress(false);
      });
  }, [action, formData, onNotOk, onOk, productSelection]);

  return (
    <Styled id="AddToPurchaseListModal__CreatePurchaseList" css={css}>
      <div
        className="AddToPurchaseListModal__CreatePurchaseList"
        role="region"
        aria-labelledby="AddToPurchaseListModal__Header"
      >
        <Form onSubmit={onSubmit} setInProgress={setInProgress} noValidate>
          {formError && <Alert id="Login__Alert" type="error" message={formError} />}

          <div className="AddToPurchaseListModal__CreatePurchaseListListName">
            <label htmlFor="purchaseListName">{labelListName}</label>
            <input
              id="purchaseListName"
              type="text"
              name="purchaseListName"
              autoCapitalize="words"
              value={formData.purchaseListName}
              onChange={handleFormDataChange}
              required
              maxLength="254"
            />
            <span className="validationMessage"></span>
          </div>

          <div className="AddToPurchaseListModal__CreatePurchaseListButtons">
            <button type="submit" disabled={inProgress}>
              {actionSave}
            </button>
            <button type="button" disabled={inProgress} className="secondary" onClick={onCancel}>
              {actionCancel}
            </button>
          </div>
        </Form>
      </div>
    </Styled>
  );
};

CreatePurchaseList.propTypes = {
  productSelection: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.shape({
        /** The id of the product */
        productId: PropTypes.string.isRequired,
        /** The sku id of the variant */
        skuId: PropTypes.string.isRequired,
        /** Display name of the product */
        productDisplayName: PropTypes.string,
        /** Sale price of the product variant */
        productSalePrice: PropTypes.number,
        /** Thumbnail image URI of the product variant */
        productThumbImageURL: PropTypes.string,
        /** Product variant property values */
        productVariantValues: PropTypes.arrayOf(
          PropTypes.shape({
            /** The variant type of the product */
            optionName: PropTypes.string.isRequired,
            /** The variant value of the product */
            optionValue: PropTypes.string.isRequired
          })
        ),
        /** Quantity to be added in the purchase list */
        quantity: PropTypes.number
      }).isRequired
    ).isRequired,
    PropTypes.shape({
      /** The id of the product */
      productId: PropTypes.string.isRequired,
      /** The sku id of the variant */
      skuId: PropTypes.string.isRequired,
      /** Display name of the product */
      productDisplayName: PropTypes.string,
      /** Sale price of the product variant */
      productSalePrice: PropTypes.number,
      /** Thumbnail image URI of the product variant */
      productThumbImageURL: PropTypes.string,
      /** Product variant property values */
      productVariantValues: PropTypes.arrayOf(
        PropTypes.shape({
          /** The variant type of the product */
          optionName: PropTypes.string.isRequired,
          /** The variant value of the product */
          optionValue: PropTypes.string.isRequired
        })
      ),
      /** Quantity to be added in the purchase list */
      quantity: PropTypes.number
    }).isRequired
  ]).isRequired,
  /** Callback function to be invoked with response of createPurchaseList action call */
  onAddToPurchaseListComplete: PropTypes.func.isRequired,
  /** Callback function to be invoked in case user cancels creating new purchase list */
  onCancel: PropTypes.func.isRequired
};

CreatePurchaseList.defaultProps = {};

export default CreatePurchaseList;
