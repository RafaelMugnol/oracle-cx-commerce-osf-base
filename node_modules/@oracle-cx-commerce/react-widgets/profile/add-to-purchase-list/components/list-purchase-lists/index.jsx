/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {getPurchaseListRepository} from '@oracle-cx-commerce/commerce-utils/selector';
import {t, noop} from '@oracle-cx-commerce/utils/generic';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/components/list-purchase-lists/styles.css';
import {getUpdatePurchaseListItems} from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/utils';
import PropTypes from 'prop-types';

const PurchaseListItem = props => {
  const {actionAdd = '', labelAddToPurchaseListName = '', id = '', name = '', onAdd} = props;

  return (
    <div className="AddToPurchaseListModal__PurchaseListRow">
      <div className="AddToPurchaseListModal__PurchaseListTitle">{name}</div>
      <button
        type="button"
        className="AddToPurchaseListModal__PurchaseListAdd"
        aria-label={t(labelAddToPurchaseListName, {purchaseListName: name})}
        onClick={() => onAdd(id)}
      >
        {actionAdd}
      </button>
    </div>
  );
};

/**
 * Component to show a list of user's purchase lists
 *
 * @param props
 */
const ListPurchaseLists = props => {
  const {action} = useContext(StoreContext);
  const {
    actionCreateNewPurchaseList = '',
    purchaseLists = {},
    productSelection = [],
    onNewPurchaseListClick = noop,
    onAddToPurchaseListComplete = noop
  } = props;

  const allPurchaseLists = Object.values(purchaseLists);

  // event handlers
  const onAdd = id => {
    const payload = {
      purchaseListId: id,
      items: getUpdatePurchaseListItems(productSelection)
    };

    action('updatePurchaseListItems', payload).then(response => {
      if (response.ok) {
        onAddToPurchaseListComplete({
          ok: true,
          data: {
            id
          }
        });
      } else {
        onAddToPurchaseListComplete(response);
      }
    });
  };

  return (
    <Styled id="AddToPurchaseListModal__ListPurchaseLists" css={css}>
      <div
        className="AddToPurchaseListModal__ListPurchaseLists"
        role="region"
        aria-labelledby="AddToPurchaseListModal__Header"
      >
        <div className="AddToPurchaseListModal__PurchaseLists">
          {allPurchaseLists.map(purchaseList => (
            <PurchaseListItem key={purchaseList.id} {...props} {...purchaseList} onAdd={onAdd} />
          ))}
        </div>

        <button type="button" className="AddToPurchaseListModal__NewPurchaseList" onClick={onNewPurchaseListClick}>
          {actionCreateNewPurchaseList}
        </button>
      </div>
    </Styled>
  );
};

ListPurchaseLists.propTypes = {
  purchaseLists: PropTypes.objectOf(
    PropTypes.shape({
      /** The id of the purchase list */
      id: PropTypes.string.isRequired,
      /** Name of the purchase list */
      name: PropTypes.string.isRequired
    })
  ).isRequired,
  /** List of product information that need to be added to the purchase list */
  productSelection: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.shape({
        /** The id of the product */
        productId: PropTypes.string.isRequired,
        /** The sku id of the variant */
        skuId: PropTypes.string.isRequired,
        /** Display name of the product */
        productDisplayName: PropTypes.string,
        /** Sale price of the product variant */
        productSalePrice: PropTypes.number,
        /** Thumbnail image URI of the product variant */
        productThumbImageURL: PropTypes.string,
        /** Product variant property values */
        productVariantValues: PropTypes.arrayOf(
          PropTypes.shape({
            /** The variant type of the product */
            optionName: PropTypes.string.isRequired,
            /** The variant value of the product */
            optionValue: PropTypes.string.isRequired
          })
        ),
        /** Quantity to be added in the purchase list */
        quantity: PropTypes.number
      }).isRequired
    ).isRequired,
    PropTypes.shape({
      /** The id of the product */
      productId: PropTypes.string.isRequired,
      /** The sku id of the variant */
      skuId: PropTypes.string.isRequired,
      /** Display name of the product */
      productDisplayName: PropTypes.string,
      /** Sale price of the product variant */
      productSalePrice: PropTypes.number,
      /** Thumbnail image URI of the product variant */
      productThumbImageURL: PropTypes.string,
      /** Product variant property values */
      productVariantValues: PropTypes.arrayOf(
        PropTypes.shape({
          /** The variant type of the product */
          optionName: PropTypes.string.isRequired,
          /** The variant value of the product */
          optionValue: PropTypes.string.isRequired
        })
      ),
      /** Quantity to be added in the purchase list */
      quantity: PropTypes.number
    }).isRequired
  ]).isRequired,
  /** Callback function to be invoked on click new purchase link */
  onNewPurchaseListClick: PropTypes.func.isRequired,
  /** Callback function to be invoked with the response of updatePurchaseListItems action */
  onAddToPurchaseListComplete: PropTypes.func.isRequired
};

ListPurchaseLists.defaultProps = {};

export default connect(getPurchaseListRepository)(ListPurchaseLists);
