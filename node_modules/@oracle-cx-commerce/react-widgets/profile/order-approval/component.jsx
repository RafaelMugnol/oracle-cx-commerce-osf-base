/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ContainerContext, OrderContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useState} from 'react';

import PropTypes from 'prop-types';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/order-approval/styles.css';
import {getProfileData} from '@oracle-cx-commerce/react-widgets/profile/order-approval/selectors';

/**
 * Widget that displays the option to Approve or Reject a Pending Approval Order/scheduled Order.
 *
 * @param props
 */
const OrderApproval = props => {
  //resources
  const {
    currentOrganization,
    isApprover,
    labelApproveOrder,
    labelRejectOrder,
    labelApproverComments,
    textOrderApprovedMessage,
    textOrderRejectedMessage,
    textScheduledOrderApprovedMessage,
    textScheduledOrderRejectedMessage
  } = props;
  const PENDING_APPROVAL = 'PENDING_APPROVAL',
    PENDING_APPROVAL_TEMPLATE = 'PENDING_APPROVAL_TEMPLATE';

  const [approverMessage, updateApproverMessage] = useState('');

  const {id, state, organizationId} = useContext(OrderContext);
  const {action} = useContext(StoreContext);
  const scheduledOrder = useContext(ContainerContext) || {};
  const {templateOrderId} = scheduledOrder;
  const isScheduledOrder = useCallback(() => {
    return templateOrderId && templateOrderId === id;
  }, [templateOrderId, id]);

  const isOfSameOrganization = useCallback(() => {
    return organizationId === currentOrganization;
  }, [organizationId, currentOrganization]);

  const isPendingApproval = useCallback(() => {
    return state === PENDING_APPROVAL || state === PENDING_APPROVAL_TEMPLATE;
  }, [state]);

  const onOkApproveOrder = useCallback(() => {
    action('notify', {
      level: 'success',
      message: isScheduledOrder() ? textScheduledOrderApprovedMessage : textOrderApprovedMessage
    });
  }, [action, isScheduledOrder, textOrderApprovedMessage, textScheduledOrderApprovedMessage]);

  const onOkRejectOrder = useCallback(() => {
    action('notify', {
      level: 'success',
      message: isScheduledOrder() ? textScheduledOrderRejectedMessage : textOrderRejectedMessage
    });
  }, [action, isScheduledOrder, textOrderRejectedMessage, textScheduledOrderRejectedMessage]);

  const onNotOk = useCallback(
    response => {
      action('notify', {level: 'error', message: response.error && response.error.message});
    },
    [action]
  );

  const onApprove = useCallback(() => {
    action('approveOrder', {orderId: id, approverMessage, ignorePriceWarnings: true}).then(response => {
      if (response.ok === false) {
        // Callback - action is resolved with !ok status
        onNotOk(response);
      } else {
        onOkApproveOrder(response);
      }
    });
  }, [action, approverMessage, id, onNotOk, onOkApproveOrder]);

  const onReject = useCallback(() => {
    action('rejectOrder', {orderId: id, approverMessage}).then(response => {
      if (response.ok === false) {
        // Callback - action is resolved with !ok status
        onNotOk(response);
      } else {
        onOkRejectOrder(response);
      }
    });
  }, [action, approverMessage, id, onNotOk, onOkRejectOrder]);

  return (
    <Styled id="OrderApproval" css={css}>
      {isPendingApproval() && isOfSameOrganization() && isApprover && (
        <div className="OrderApproval">
          <div className="OrderApproval__ReasonField">
            <h3>{labelApproverComments}</h3>
            <textarea
              id={`reason-${id}`}
              type="text"
              name="reason"
              value={approverMessage}
              aria-label={labelApproverComments}
              onChange={e => updateApproverMessage(e.target.value)}
            />
          </div>

          <button
            type="button"
            onClick={onApprove}
            className="OrderApproval__ApproveButton"
            aria-label={labelApproveOrder}
          >
            {labelApproveOrder}
          </button>

          <button
            type="button"
            onClick={onReject}
            className="OrderApproval__RejectButton"
            aria-label={labelRejectOrder}
          >
            {labelRejectOrder}
          </button>
        </div>
      )}
    </Styled>
  );
};

OrderApproval.propTypes = {
  /**
   * organizationId of the current selected Organization.
   */
  currentOrganization: PropTypes.string
};

OrderApproval.defaultProps = {
  currentOrganization: null
};

export default connect(getProfileData)(OrderApproval);
