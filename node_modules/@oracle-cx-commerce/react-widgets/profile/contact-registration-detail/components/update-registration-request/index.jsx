/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import Link, {useNavigator} from '@oracle-cx-commerce/react-components/link';
import React, {useCallback, useContext, useState} from 'react';

import ApproveRegistrationRequestModal from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/approve-registration-request-modal';
import Form from '@oracle-cx-commerce/react-components/form';
import {PAGE_CONTACT_REGISTRATION_REQUESTS_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import RejectRegistrationRequestModal from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/reject-registration-request-modal';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/update-registration-request/styles.css';

/**
 * This component is used to update the registration request
 *
 * @param props
 */
const UpdateRegistrationRequest = props => {
  const {
    actionCancel,
    labelOk,
    actionSave,
    registrationId,
    selectedRegistrationStatus,
    isRejected,
    contactRequest,
    labelRejectionComments,
    alertContactRequestUpdated
  } = props;
  const [inProgress, setInProgress] = useState(false);
  const [showApprovalModal, setShowApprovalModal] = useState(false);
  const [showRejectModal, setShowRejectModal] = useState(false);

  const goToPage = useNavigator();
  const {action} = useContext(StoreContext);

  /**
   * success callback of updateContactRegistrationRequest.
   */
  const onOk = useCallback(() => {
    action('notify', {level: 'success', message: alertContactRequestUpdated});
    goToPage(PAGE_CONTACT_REGISTRATION_REQUESTS_LINK);
  }, [action, alertContactRequestUpdated, goToPage]);

  /**
   * failure callback of updateContactRegistrationRequest.
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      setInProgress(false);
      action('notify', {level: 'error', message});
    },
    [action, setInProgress]
  );

  const handleUpdateContactRegistrationRequestAction = useCallback(
    (actionName, payload, event) => {
      event.preventDefault();
      action('notifyClearAll');
      action(actionName, {...payload})
        .then(response => {
          if (response.ok === false) {
            onNotOk(response);
          } else {
            onOk();
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    },
    [action, onNotOk, onOk]
  );

  const closeApproveRejectModal = useCallback(() => {
    setShowApprovalModal(false);
    setShowRejectModal(false);
  }, []);

  const handleOnSubmitForm = event => {
    // Based on the registration status value, call the appropriate handler
    let actionName = '';
    let payload = {};
    if (selectedRegistrationStatus === 'accept') {
      setShowApprovalModal(true);
    } else if (selectedRegistrationStatus === 'reject') {
      setShowRejectModal(true);
    } else {
      actionName = 'updateContactRegistrationRequest';
      payload = {contactRequestId: registrationId, status: selectedRegistrationStatus};
      handleUpdateContactRegistrationRequestAction(actionName, payload, event);
    }
  };

  return (
    <Styled id="UpdateRegistrationRequest" css={css}>
      <>
        {!isRejected && (
          <div className="UpdateRegistrationRequest__Buttons">
            <Form onOk={onOk} onNotOk={onNotOk} setInProgress={setInProgress} onSubmit={handleOnSubmitForm} noValidate>
              <div>
                <button
                  type="submit"
                  className="UpdateRegistrationRequest__SubmitButton"
                  aria-label={actionSave}
                  disabled={inProgress}
                >
                  {actionSave}
                </button>
              </div>
            </Form>

            <Link
              href={PAGE_CONTACT_REGISTRATION_REQUESTS_LINK}
              className="UpdateRegistrationRequest__LinkToRegistrationRequests"
              aria-label={actionCancel}
            >
              {actionCancel}
            </Link>
          </div>
        )}
        {isRejected && (
          <div>
            {contactRequest.approverComments && (
              <div className="UpdateRegistrationRequest__Comments">
                <div className="UpdateRegistrationRequest__NotesLabel">{labelRejectionComments}</div>
                <div className="UpdateRegistrationRequest__NotesValue">{contactRequest.approverComments}</div>
              </div>
            )}

            <button type="submit" className="UpdateRegistrationRequest__OkButton" aria-label={labelOk} onClick={onOk}>
              {labelOk}
            </button>
          </div>
        )}
        <div>
          {
            <ApproveRegistrationRequestModal
              showApproveModal={showApprovalModal}
              closeApproveRejectModal={closeApproveRejectModal}
              handleUpdateContactRegistrationRequestAction={handleUpdateContactRegistrationRequestAction}
              {...props}
            />
          }
        </div>
        <div>
          <RejectRegistrationRequestModal
            showRejectModal={showRejectModal}
            closeApproveRejectModal={closeApproveRejectModal}
            handleUpdateContactRegistrationRequestAction={handleUpdateContactRegistrationRequestAction}
            {...props}
          />
        </div>
      </>
    </Styled>
  );
};

UpdateRegistrationRequest.propTypes = {
  /**
   * The registration id which is used in the URL
   */
  registrationId: PropTypes.string.isRequired,
  /**
   * The status of the contact request
   */
  selectedRegistrationStatus: PropTypes.string.isRequired,
  /**
   * The callback to identify if the contact request state is rejected
   */
  isRejected: PropTypes.func.isRequired,
  /**
   * The object containing contact request is read from the redux state
   * ProfileRepository->contactRequests->id
   */
  contactRequest: PropTypes.shape({
    approverComments: PropTypes.string
  })
};

UpdateRegistrationRequest.defaultProps = {
  contactRequest: {
    approverComments: ''
  }
};

export default UpdateRegistrationRequest;
