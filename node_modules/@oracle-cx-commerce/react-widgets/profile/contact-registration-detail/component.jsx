/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useState} from 'react';

import ContactRegistrationRequestInformation from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/contact-registation-request-information';
import PropTypes from 'prop-types';
import RegistrationStatusDropdown from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/registration-status-dropdown';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import UpdateRegistrationRequest from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/components/update-registration-request';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/contact-registration-detail/selectors';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Component to display the contact registration details
 *
 * @param props
 */

const ContactRegistrationDetail = props => {
  const {isUserLoggedIn, headingRegistrationRequest, textRegistrationRequestRejected, registrationId, contactRequest} =
    props;
  const {status: contactStatus, id: contactId} = contactRequest;
  const [selectedRegistrationStatus, setSelectedRegistrationStatus] = useState(contactStatus);
  const {action} = useContext(StoreContext);

  const isRejected = useCallback(() => {
    const status = selectedRegistrationStatus ? selectedRegistrationStatus : contactStatus;
    if (status.toUpperCase() === textRegistrationRequestRejected.toUpperCase()) {
      return true;
    }

    return false;
  }, [contactStatus, selectedRegistrationStatus, textRegistrationRequestRejected]);

  /**
   * This method takes the status value and opens a modal if the status value is accept or reject.
   * @param {*} status
   */
  const handleStatusChange = useCallback(
    status => {
      setSelectedRegistrationStatus(status);
    },
    [setSelectedRegistrationStatus]
  );

  /**
   * Failure call back for the getContactRegistrationRequest action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  /**
   * Get the registration request details for the specific registration id
   */
  useEffect(() => {
    if (registrationId && (isEmptyObject(contactRequest) || contactRequest.approvedBy === undefined)) {
      action('getContactRegistrationRequest', {contactRequestId: registrationId})
        .then(response => {
          if (response.ok === false) {
            onNotOk(response);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    }
  }, [action, contactRequest, onNotOk, registrationId]);

  return (
    <Styled id="ContactRegistrationDetail" css={css}>
      {isUserLoggedIn && (
        <>
          <div className="ContactRegistrationDetail">
            {contactRequest && contactId && (
              <div>
                <h1>{headingRegistrationRequest}</h1>
                <ContactRegistrationRequestInformation contactRequest={contactRequest} {...props} />
                {!isRejected() && (
                  <RegistrationStatusDropdown
                    selectedRegistrationStatus={
                      selectedRegistrationStatus || contactRequest ? selectedRegistrationStatus || contactStatus : ''
                    }
                    onRegistrationStatusChange={handleStatusChange}
                    {...props}
                  />
                )}
                <UpdateRegistrationRequest
                  registrationId={registrationId}
                  selectedRegistrationStatus={
                    selectedRegistrationStatus || contactRequest ? selectedRegistrationStatus || contactStatus : ''
                  }
                  isRejected={isRejected()}
                  {...props}
                />
              </div>
            )}
          </div>
        </>
      )}
    </Styled>
  );
};

ContactRegistrationDetail.propTypes = {
  /**
   * The string needed to display registration request heading
   */
  headingRegistrationRequest: PropTypes.string.isRequired,
  /**
   * The string needed to display rejected state
   */
  textRegistrationRequestRejected: PropTypes.string.isRequired,
  /**
   * The Id of the contact request specified in the url
   */
  registrationId: PropTypes.string.isRequired,
  /**
   * This value is used to check if the user is logged in
   */
  isUserLoggedIn: PropTypes.string.isRequired,
  /**
   * This value indicates the state of the contact request
   * new, review, rejected, moreInfoNeeded
   */
  contactStatus: PropTypes.string.isRequired,
  /**
   * The contact Id to indicate the contactRequest id
   */
  contactId: PropTypes.string.isRequired
};

export default connect(getComponentData)(ContactRegistrationDetail);
