/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import LoadMore, {LOAD_MORE} from '@oracle-cx-commerce/react-components/load-more';
import React, {useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';

import AddressBookCard from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/address-book-card';
import AddressListView from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/address-list-view';
import Collapsible from '@oracle-cx-commerce/react-components/collapsible';
import CreateAddressButton from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/create-address-button';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/account-address-book/styles.css';
import PropTypes from 'prop-types';
import AddressSearch from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/address-search';
import {
  getAddressManagerRoles,
  listAddresses,
  filterDefaultAddresses,
  getSortedAddressIds
} from '@oracle-cx-commerce/react-components/utils/address';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/account-address-book/selectors';
import {t} from '@oracle-cx-commerce/utils/generic';

/**
 * Widget to list and manage organization addresses.
 * @param {Object} props the properties object
 */
const AccountAddressBook = props => {
  // Resources
  const {
    textAccountAddressBook,
    textDefaultAddresses,
    textProfileAddresses,
    textInheritedAddresses,
    textAddressesForThisAccount,
    labelNoDefaultAddressesAvailable,
    labelNoProfileAddressesAvailable,
    labelNoAccountAddressesAvailable,
    labelNoInheritedAddressesAvailable,
    textLoadMoreAccountAddress,
    textLoadMoreProfileAddress,
    textLoadMoreInheritedAddress,
    textLoading,
    labelFirstName,
    labelLastName,
    labelCompanyName,
    labelAddressLine1,
    labelZipCode,
    textDefaultAddressResultForSearchTerm,
    textProfileAddressResultForSearchTerm,
    textAccountAddressResultForSearchTerm,
    textInheritedAddressResultForSearchTerm,
    textDefaultAddressResultForSearchTermInSearchField,
    textProfileAddressResultForSearchTermInSearchField,
    textAccountAddressResultForSearchTermInSearchField,
    textInheritedAddressResultForSearchTermInSearchField
  } = props;

  const store = useContext(StoreContext);
  const {action} = store;

  const {
    isUserLoggedIn,
    contactInfos = {},
    currentOrganization,
    roles = [],
    isGetOrganizationDefaultAddressInProgress,
    numberOfAddressesToLoad = 12
  } = props;

  const {secondaryAddresses = []} = currentOrganization;

  const [shippingAddress, setShippingAddress] = useState();
  const [billingAddress, setBillingAddress] = useState();

  const [accountAddressIds, setAccountAddressIds] = useState([]);
  const [profileAddressIds, setProfileAddressIds] = useState([]);
  const [inheritedAddressIds, setInheritedAddressIds] = useState([]);

  // A flag to keep address action popover toggling
  const [showAddressActions, setShowAddressActions] = useState(new Map());

  // A flag to reload page when filters applied
  const [resetProfilePage, setResetProfilePage] = useState(false);
  const [resetAccountPage, setResetAccountPage] = useState(false);
  const [resetInheritedPage, setResetInheritedPage] = useState(false);
  // A string to keep the typed search string
  const [searchTerm, setSearchTerm] = useState('');
  const [searchField, setSearchField] = useState('');

  //A flag to check whether an address is deleted
  const [isProfileAddressDeleted, setIsProfileAddressDeleted] = useState(false);
  const [isAccountAddressDeleted, setIsAccountAddressDeleted] = useState(false);
  const [organizationDefaultAddress, setOrganizationDefaultAddress] = useState(secondaryAddresses);

  const addressManagerRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  const loadProfileAddresses = async payloadOffset => {
    const payload = {limit: numberOfAddressesToLoad, offset: payloadOffset};
    setResetProfilePage(true);
    if (isProfileAddressDeleted) {
      setIsProfileAddressDeleted(false);
      payload.offset = profileAddressIds.length;
    }

    return listAddresses({
      store,
      payload,
      isListProfileAddresses: true,
      searchTerm,
      searchField,
      addressIds: profileAddressIds,
      setAddressIds: setProfileAddressIds,
      setResetPage: setResetProfilePage
    });
  };

  const loadAccountAddresses = async payloadOffset => {
    const payload = {limit: numberOfAddressesToLoad, offset: payloadOffset};
    setResetAccountPage(true);
    if (isAccountAddressDeleted) {
      setIsAccountAddressDeleted(false);
      payload.offset = accountAddressIds.length;
    }

    return listAddresses({
      store,
      payload,
      searchTerm,
      searchField,
      addressIds: accountAddressIds,
      setAddressIds: setAccountAddressIds,
      setResetPage: setResetAccountPage
    });
  };

  const loadInheritedAddresses = async payloadOffset => {
    const payload = {limit: numberOfAddressesToLoad, offset: payloadOffset, include: 'inheritedOnly'};
    setResetInheritedPage(true);

    return listAddresses({
      store,
      payload,
      searchTerm,
      searchField,
      addressIds: inheritedAddressIds,
      setAddressIds: setInheritedAddressIds,
      setResetPage: setResetInheritedPage
    });
  };

  /**
   * This object maps the searchField and the labels.
   */
  const searchFieldNames = useMemo(
    () => ({
      firstName: labelFirstName,
      lastName: labelLastName,
      companyName: labelCompanyName,
      address1: labelAddressLine1,
      postalCode: labelZipCode
    }),
    [labelAddressLine1, labelCompanyName, labelFirstName, labelLastName, labelZipCode]
  );

  /* Method will reset the local states */
  const onSearchSubmit = useCallback(value => {
    setAccountAddressIds([]);
    setProfileAddressIds([]);
    setInheritedAddressIds([]);
    setResetProfilePage(true);
    setResetAccountPage(true);
    setResetInheritedPage(true);
    setSearchTerm(value);
  }, []);

  /* Method will return a boolean if valid shipping address available to render */
  const displayShippingAddress = () => {
    return (
      contactInfos &&
      shippingAddress &&
      contactInfos[shippingAddress] &&
      filterDefaultAddresses({address: contactInfos[shippingAddress], searchTerm, searchField})
    );
  };
  /* Method will return a boolean if valid billing address available to render */
  const displayBillingAddress = () => {
    return (
      contactInfos &&
      billingAddress &&
      contactInfos[billingAddress] &&
      filterDefaultAddresses({address: contactInfos[billingAddress], searchTerm, searchField})
    );
  };
  /* Method will return a text to display the searchTerm and searchField */
  const SearchAddressMessage = item => {
    return (
      /* eslint-disable react/no-danger */
      searchTerm && (
        <div className="AccountAddressBook__SearchSummaryContainer">
          <span
            dangerouslySetInnerHTML={{
              __html: t(item.message, {
                SEARCHTERM: searchTerm,
                SEARCHFIELD: searchFieldNames[searchField]
              })
            }}
          />
        </div>
      )
    );
  };

  /* Method will trigger the filter actions whenever there is a change in searchField or searchTerm */
  const onSearchFieldSelect = ({searchField, searchTerm}) => {
    setSearchField(searchField);
    onSearchSubmit(searchTerm);
  };

  useEffect(() => {
    action('getOrganizationDefaultAddresses').then(response => {
      if (response.json && response.json.secondaryAddresses) {
        const {secondaryAddresses} = response.json;
        const secondaryAddressIds = secondaryAddresses.map(address => address.address.id);
        setOrganizationDefaultAddress(secondaryAddressIds);
      }
    });
  }, [action]);

  useEffect(() => {
    if (currentOrganization) {
      setShippingAddress(currentOrganization.shippingAddress);
      setBillingAddress(currentOrganization.billingAddress);
    }
  }, [currentOrganization]);

  const checkIsProfileAddress = useCallback(
    addressId => {
      return profileAddressIds.includes(addressId);
    },
    [profileAddressIds]
  );

  const checkInheritedAddress = useCallback(
    (organizationDefaultAddress, shippingAddress) => {
      return organizationDefaultAddress.includes(shippingAddress) || checkIsProfileAddress(shippingAddress);
    },
    [checkIsProfileAddress]
  );

  const handleDeleteAddressModalClose = useCallback(
    (isDeleteSuccessful, isProfileAddress, addressId) => {
      if (isDeleteSuccessful === true) {
        if (isProfileAddress) {
          const updatedProfileAddressIds = profileAddressIds.filter(id => id !== addressId);
          setProfileAddressIds(updatedProfileAddressIds);
          setIsProfileAddressDeleted(true);
        } else {
          const updatedContactInfoIds = accountAddressIds.filter(id => id !== addressId);
          setAccountAddressIds(updatedContactInfoIds);
          setIsAccountAddressDeleted(true);
        }
      }
    },
    [accountAddressIds, profileAddressIds]
  );

  const hideAllPopover = useCallback(
    addressId => {
      showAddressActions.forEach(function (value, key) {
        if (key !== addressId && value === true) {
          setShowAddressActions(new Map(showAddressActions.set(key, !showAddressActions.get(key))));
        }
      });
    },
    [showAddressActions]
  );

  const handlePopoverToggle = useRef(addressId => {
    hideAllPopover(addressId);
    setShowAddressActions(new Map(showAddressActions.set(addressId, !showAddressActions.get(addressId))));
  });

  const getCollapsibleTitle = title => {
    return <h2>{title}</h2>;
  };

  const sortedProfileAddressIds = useMemo(() => {
    return getSortedAddressIds({contactInfos, addressIds: profileAddressIds});
  }, [contactInfos, profileAddressIds]);

  const sortedAccountAddressIds = useMemo(() => {
    return getSortedAddressIds({contactInfos, addressIds: accountAddressIds});
  }, [contactInfos, accountAddressIds]);

  const sortedInheritedAddressIds = useMemo(() => {
    return getSortedAddressIds({contactInfos, addressIds: inheritedAddressIds});
  }, [contactInfos, inheritedAddressIds]);

  return (
    <Styled id="AccountAddressBook" css={css}>
      {isUserLoggedIn && (
        <div className="AccountAddressBook">
          <h1>{textAccountAddressBook}</h1>
          <div className="AccountAddressBook__CreateAddressButtonSearchBarContainer">
            <CreateAddressButton {...props} />
            <div className="AccountAddressBook__SearchBar">
              <AddressSearch
                className={`AccountAddressBook__SearchBarContainer`}
                searchTerm={searchTerm}
                setSearchTerm={setSearchTerm}
                setSearchField={setSearchField}
                onSearchSubmit={onSearchSubmit}
                onSearchFieldSelect={onSearchFieldSelect}
                searchFieldNames={searchFieldNames}
                {...props}
              ></AddressSearch>
            </div>
          </div>
          <div className="AccountAddressBook__AddressesList">
            {/* Default Addresses */}
            <Collapsible expanded={true} title={getCollapsibleTitle(textDefaultAddresses)}>
              {searchTerm && (
                <SearchAddressMessage
                  message={
                    searchField
                      ? textDefaultAddressResultForSearchTermInSearchField
                      : textDefaultAddressResultForSearchTerm
                  }
                />
              )}
              {isGetOrganizationDefaultAddressInProgress === 0 && (
                <>
                  {(displayShippingAddress() || displayBillingAddress()) && (
                    <div className="AccountAddressBook__List">
                      {displayShippingAddress() && (
                        <AddressBookCard
                          {...props}
                          itemId={shippingAddress}
                          shippingAddress={shippingAddress}
                          billingAddress={billingAddress}
                          itemType="ShippingAddress"
                          showShippingBadge={true}
                          showBillingBadge={true}
                          showMoreAction={
                            (addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin) &&
                            checkInheritedAddress(organizationDefaultAddress, shippingAddress)
                          }
                          isProfileAddress={checkIsProfileAddress(shippingAddress)}
                          handleDeleteAddressModalClose={handleDeleteAddressModalClose}
                          handlePopoverToggle={handlePopoverToggle.current}
                          showMenuPopover={showAddressActions.get(`ShippingAddress_${shippingAddress}`)}
                        ></AddressBookCard>
                      )}
                      {billingAddress !== shippingAddress && displayBillingAddress() && (
                        <AddressBookCard
                          {...props}
                          shippingAddress={shippingAddress}
                          billingAddress={billingAddress}
                          itemId={billingAddress}
                          itemType="BillingAddress"
                          showShippingBadge={true}
                          showBillingBadge={true}
                          showMoreAction={
                            (addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin) &&
                            checkInheritedAddress(organizationDefaultAddress, billingAddress)
                          }
                          isProfileAddress={checkIsProfileAddress(billingAddress)}
                          handleDeleteAddressModalClose={handleDeleteAddressModalClose}
                          handlePopoverToggle={handlePopoverToggle.current}
                          showMenuPopover={showAddressActions.get(`BillingAddress_${billingAddress}`)}
                        ></AddressBookCard>
                      )}
                    </div>
                  )}
                  {!displayShippingAddress() && !displayBillingAddress() && (
                    <div className="AccountAddressBook__List">
                      <div className="AddressListView__NoAddressLabel">
                        <span>{labelNoDefaultAddressesAvailable}</span>
                      </div>
                    </div>
                  )}
                </>
              )}
            </Collapsible>

            <Collapsible expanded={false} title={getCollapsibleTitle(textProfileAddresses)}>
              {searchTerm && (
                <SearchAddressMessage
                  message={
                    searchField
                      ? textProfileAddressResultForSearchTermInSearchField
                      : textProfileAddressResultForSearchTerm
                  }
                />
              )}
              <AddressListView
                {...props}
                addressIds={sortedProfileAddressIds}
                labelNoAddresses={labelNoProfileAddressesAvailable}
                itemType="ProfileAddress"
                showShippingBadge={false}
                showBillingBadge={false}
                showMoreAction={addressManagerRoles.isProfileAddrManager}
                checkIsProfileAddress={checkIsProfileAddress}
                handleDeleteAddressModalClose={handleDeleteAddressModalClose}
                handlePopoverToggle={handlePopoverToggle.current}
                showAddressActions={showAddressActions}
              ></AddressListView>
              <LoadMore
                paginationType={LOAD_MORE}
                numberOfItemsToLoad={numberOfAddressesToLoad}
                resetPage={resetProfilePage}
                handleLoadMore={loadProfileAddresses}
                loadMoreLabel={textLoadMoreProfileAddress}
                loadMoreLoadingLabel={textLoading}
              ></LoadMore>
            </Collapsible>

            <Collapsible expanded={false} title={getCollapsibleTitle(textAddressesForThisAccount)}>
              {searchTerm && (
                <SearchAddressMessage
                  message={
                    searchField
                      ? textAccountAddressResultForSearchTermInSearchField
                      : textAccountAddressResultForSearchTerm
                  }
                />
              )}
              <AddressListView
                {...props}
                addressIds={sortedAccountAddressIds}
                labelNoAddresses={labelNoAccountAddressesAvailable}
                itemType="AccountAddress"
                shippingAddress={shippingAddress}
                billingAddress={billingAddress}
                showShippingBadge={true}
                showBillingBadge={true}
                showMoreAction={addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin}
                checkIsProfileAddress={checkIsProfileAddress}
                handleDeleteAddressModalClose={handleDeleteAddressModalClose}
                handlePopoverToggle={handlePopoverToggle.current}
                showAddressActions={showAddressActions}
              ></AddressListView>
              <LoadMore
                paginationType={LOAD_MORE}
                numberOfItemsToLoad={numberOfAddressesToLoad}
                resetPage={resetAccountPage}
                handleLoadMore={loadAccountAddresses}
                loadMoreLabel={textLoadMoreAccountAddress}
                loadMoreLoadingLabel={textLoading}
              ></LoadMore>
            </Collapsible>

            <Collapsible expanded={false} title={getCollapsibleTitle(textInheritedAddresses)}>
              {searchTerm && (
                <SearchAddressMessage
                  message={
                    searchField
                      ? textInheritedAddressResultForSearchTermInSearchField
                      : textInheritedAddressResultForSearchTerm
                  }
                />
              )}
              <AddressListView
                {...props}
                addressIds={sortedInheritedAddressIds}
                labelNoAddresses={labelNoInheritedAddressesAvailable}
                itemType="InheritedAddress"
                shippingAddress={shippingAddress}
                billingAddress={billingAddress}
                showShippingBadge={false}
                showBillingBadge={false}
                showMoreAction={false}
                checkIsProfileAddress={checkIsProfileAddress}
                handleDeleteAddressModalClose={handleDeleteAddressModalClose}
                handlePopoverToggle={handlePopoverToggle.current}
                showAddressActions={showAddressActions}
              ></AddressListView>
              <LoadMore
                paginationType={LOAD_MORE}
                numberOfItemsToLoad={numberOfAddressesToLoad}
                resetPage={resetInheritedPage}
                handleLoadMore={loadInheritedAddresses}
                loadMoreLabel={textLoadMoreInheritedAddress}
                loadMoreLoadingLabel={textLoading}
              ></LoadMore>
            </Collapsible>
          </div>
        </div>
      )}
    </Styled>
  );
};

AccountAddressBook.propTypes = {
  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired,

  /** Default organization address action completion status */
  isGetOrganizationDefaultAddressInProgress: PropTypes.number.isRequired,

  /** Number of address to be returned in each list address call */
  numberOfAddressesToLoad: PropTypes.number,

  /** Flag to show if user loggedIn */
  isUserLoggedIn: PropTypes.bool.isRequired,

  // eslint-disable-next-line spellcheck/spell-checker
  /**
   * The contactInfos (address) object from redux state(ProfileRepository->contactInfos)
   */
  contactInfos: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string.isRequired,
      city: PropTypes.string.isRequired,
      state: PropTypes.string.isRequired,
      postalCode: PropTypes.string.isRequired,
      country: PropTypes.string.isRequired,
      phoneNumber: PropTypes.string
    })
  ),

  /** Users current organization object from redux state(ProfileRepository->organizations)*/
  currentOrganization: PropTypes.shape({
    active: PropTypes.bool,
    repositoryId: PropTypes.string.isRequired
  }).isRequired
};

AccountAddressBook.defaultProps = {
  contactInfos: {},
  numberOfAddressesToLoad: 12
};

export default connect(getComponentData)(AccountAddressBook);
