/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  PAGE_ADD_ACCOUNT_ADDRESS_LINK,
  PAGE_ADD_PROFILE_ADDRESS_LINK,
  PAGE_EDIT_ACCOUNT_ADDRESS_LINK,
  PAGE_EDIT_PROFILE_ADDRESS_LINK
} from '@oracle-cx-commerce/commerce-utils/constants';
import React, {useCallback, useContext, useMemo, useState} from 'react';

import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import HorizontalGearIcon from '@oracle-cx-commerce/react-components/icons/horizontal-gear';
import Popover from '@oracle-cx-commerce/react-components/popover';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/more-address-actions/styles.css';
import {getAddressManagerRoles} from '@oracle-cx-commerce/react-components/utils/address';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Component to display address actions popover and horizontal gear icon.
 * @param {Object} props the properties object
 */
const MoreAddressActions = props => {
  const {
    actionEdit,
    actionDelete,
    textAddressActions,
    actionRemoveDefaultShippingAddress,
    actionRemoveDefaultBillingAddress,
    actionMakeDefaultShippingAddress,
    actionMakeDefaultBillingAddress,
    actionCopyAsProfileAddress,
    actionCopyAsAccountAddress,
    closeLinkAltText,
    headingDeleteProfileAddress,
    headingDeleteAccountAddress,
    textAddressDeletionMessage,
    textConfirmAddressDeletionMessage,
    actionConfirm,
    actionCancel
  } = props;

  const {
    id,
    itemId,
    itemType,
    contactInfos,
    roles,
    shippingAddress,
    billingAddress,
    isProfileAddress,
    handlePopoverToggle,
    cssOverride,
    handleDeleteAddressModalClose,
    showMenuPopover
  } = props;
  const {action} = useContext(StoreContext);
  const goToPage = useNavigator();

  const addressManagerRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  const makeDefaultShippingAddress = (addressId, popoverKey) => {
    handlePopoverToggle(popoverKey);
    const isDefaultBillingAddress = addressId === billingAddress;
    if (addressId === shippingAddress) {
      /* This block executes when removed default shipping address */
      action('updateOrganizationAddress', {
        addressId,
        ...contactInfos[addressId],
        isDefaultBillingAddress,
        isDefaultShippingAddress: false
      });
    } else {
      action('updateOrganizationAddress', {addressId, isDefaultBillingAddress, isDefaultShippingAddress: true});
    }
  };

  const makeDefaultBillingAddress = (addressId, popoverKey) => {
    handlePopoverToggle(popoverKey);
    const isDefaultShippingAddress = addressId === shippingAddress;
    if (addressId === billingAddress) {
      /* This block executes when removed default billing address */
      action('updateOrganizationAddress', {
        addressId,
        ...contactInfos[addressId],
        isDefaultShippingAddress,
        isDefaultBillingAddress: false
      });
    } else {
      action('updateOrganizationAddress', {addressId, isDefaultShippingAddress, isDefaultBillingAddress: true});
    }
  };

  const copyAsProfileAddress = (addressId, popoverKey) => {
    handlePopoverToggle(popoverKey);
    goToPage(`${PAGE_ADD_PROFILE_ADDRESS_LINK}?addressId=${addressId}&isProfileAddress=${isProfileAddress}`);
  };

  const copyAsAccountAddress = (addressId, popoverKey) => {
    handlePopoverToggle(popoverKey);
    goToPage(`${PAGE_ADD_ACCOUNT_ADDRESS_LINK}?addressId=${addressId}&isProfileAddress=${isProfileAddress}`);
  };

  const handleEditAddress = (addressId, isProfileAddress) => {
    if (isProfileAddress) {
      goToPage(`${PAGE_EDIT_PROFILE_ADDRESS_LINK}?addressId=${addressId}`);
    } else {
      goToPage(`${PAGE_EDIT_ACCOUNT_ADDRESS_LINK}?addressId=${addressId}`);
    }
  };

  const [showDeleteAddressModal, setShowDeleteAddressModal] = useState(false);

  const confirmCallback = useCallback(() => {
    action(isProfileAddress ? 'deleteProfileAddress' : 'deleteOrganizationAddress', {
      addressId: itemId
    }).then(response => {
      setShowDeleteAddressModal(false);
      if (response.ok) {
        handleDeleteAddressModalClose(true, isProfileAddress, itemId);
      } else {
        handleDeleteAddressModalClose(false, isProfileAddress, itemId);
      }
    });
  }, [action, handleDeleteAddressModalClose, isProfileAddress, itemId]);

  const cancelCallback = useCallback(() => {
    setShowDeleteAddressModal(false);
    handleDeleteAddressModalClose(false, isProfileAddress, itemId);
  }, [handleDeleteAddressModalClose, isProfileAddress, itemId]);

  const popoverKey = `${itemType}_${itemId}`;
  const getAddressActions = (itemType, itemId) => {
    return (
      <React.Fragment>
        <li>
          <div
            role="button"
            tabIndex={0}
            className="MoreAddressActions__Edit"
            key={`MoreActionEdit_${itemId}`}
            onKeyPress={event => {
              if (event.key === 'Enter') {
                handlePopoverToggle(popoverKey);
                handleEditAddress(itemId, isProfileAddress);
              }
            }}
            onClick={() => {
              handlePopoverToggle(popoverKey);
              handleEditAddress(itemId, isProfileAddress);
            }}
          >
            {actionEdit}
          </div>
        </li>
        {!isProfileAddress && (
          <li>
            <div
              role="button"
              tabIndex={0}
              className="MoreAddressActions__DefaultShipping"
              key={`MoreActionShipping_${itemId}`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  makeDefaultShippingAddress(itemId, popoverKey);
                }
              }}
              onClick={() => {
                makeDefaultShippingAddress(itemId, popoverKey);
              }}
            >
              {itemId === shippingAddress ? actionRemoveDefaultShippingAddress : actionMakeDefaultShippingAddress}
            </div>
          </li>
        )}
        {!isProfileAddress && (
          <li>
            <div
              role="button"
              tabIndex={0}
              className="MoreAddressActions__DefaultBilling"
              key={`MoreActionBilling_${itemId}`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  makeDefaultBillingAddress(itemId, popoverKey);
                }
              }}
              onClick={() => {
                makeDefaultBillingAddress(itemId, popoverKey);
              }}
            >
              {itemId === billingAddress ? actionRemoveDefaultBillingAddress : actionMakeDefaultBillingAddress}
            </div>
          </li>
        )}
        {addressManagerRoles.isProfileAddrManager && (
          <li>
            <div
              role="button"
              tabIndex={0}
              className="MoreAddressActions__CopyAsProfile"
              key={`MoreActionCopyAsProfileAddress_${itemId}`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  copyAsProfileAddress(itemId, popoverKey);
                }
              }}
              onClick={() => {
                copyAsProfileAddress(itemId, popoverKey);
              }}
            >
              {actionCopyAsProfileAddress}
            </div>
          </li>
        )}
        {(addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin) && (
          <li>
            <div
              role="button"
              tabIndex={0}
              className="MoreAddressActions__CopyAsAccount"
              key={`MoreActionCopyAsAccountAddress_${itemId}`}
              onKeyPress={event => {
                if (event.key === 'Enter') {
                  copyAsAccountAddress(itemId, popoverKey);
                }
              }}
              onClick={() => {
                copyAsAccountAddress(itemId, popoverKey);
              }}
            >
              {actionCopyAsAccountAddress}
            </div>
          </li>
        )}
        <li>
          <div
            role="button"
            tabIndex={0}
            className="MoreAddressActions__Delete"
            key={`MoreActionDelete_${itemId}`}
            onKeyPress={event => {
              if (event.key === 'Enter') {
                handlePopoverToggle(popoverKey);
                setShowDeleteAddressModal(true);
              }
            }}
            onClick={() => {
              handlePopoverToggle(popoverKey);
              setShowDeleteAddressModal(true);
            }}
          >
            {actionDelete}
          </div>
        </li>
      </React.Fragment>
    );
  };

  return (
    <Styled id="MoreAddressActions" css={css}>
      <ConfirmationDialog
        id={id}
        cssOverride={cssOverride}
        title={isProfileAddress ? headingDeleteProfileAddress : headingDeleteAccountAddress}
        closeAriaLabel={closeLinkAltText}
        closeIconTitle={closeLinkAltText}
        alertMessage={textAddressDeletionMessage}
        confirmMessage={textConfirmAddressDeletionMessage}
        labelConfirm={actionConfirm}
        labelCancel={actionCancel}
        confirmCallback={confirmCallback}
        cancelCallback={cancelCallback}
        closeCallback={cancelCallback}
        show={showDeleteAddressModal}
      />
      <div className="MoreAddressActions__Icon">
        <HorizontalGearIcon
          tabIndex={0}
          aria-label={textAddressActions}
          className="MoreAddressActions__HorizontalGearIcon"
          onKeyPress={event => (event.key === 'Enter' ? handlePopoverToggle(popoverKey) : '')}
          onClick={() => {
            handlePopoverToggle(popoverKey);
          }}
        />
        <Popover
          id={`Popover_${popoverKey}`}
          key={`Popover_${popoverKey}`}
          className="MoreAddressActions__Popover"
          show={showMenuPopover}
          title=""
          onClose={() => {
            handlePopoverToggle(popoverKey);
          }}
          closeIconTitle={closeLinkAltText}
        >
          <ul>{getAddressActions(itemType, itemId)}</ul>
        </Popover>
      </div>
    </Styled>
  );
};

MoreAddressActions.propTypes = {
  /** Address id */
  id: PropTypes.string.isRequired,

  /** Address id */
  itemId: PropTypes.string.isRequired,

  /** Type of address account or profile */
  itemType: PropTypes.string.isRequired,

  // eslint-disable-next-line spellcheck/spell-checker
  /**
   * The contactInfos (address) object from redux state(ProfileRepository->contactInfos)
   */
  contactInfos: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string.isRequired,
      city: PropTypes.string.isRequired,
      state: PropTypes.string.isRequired,
      postalCode: PropTypes.string.isRequired,
      country: PropTypes.string.isRequired,
      phoneNumber: PropTypes.string
    })
  ),

  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired,

  /** Default shipping address id */
  shippingAddress: PropTypes.string,

  /**  Default billing address id */
  billingAddress: PropTypes.string,

  /** True if it's profile address */
  isProfileAddress: PropTypes.bool.isRequired,

  /** Toggles address action popover */
  handlePopoverToggle: PropTypes.func.isRequired,

  /** Class name to override css  */
  cssOverride: PropTypes.string,

  /** Callback function to close delete address model */
  handleDeleteAddressModalClose: PropTypes.func.isRequired,

  /** Flag to show address actions popover */
  showMenuPopover: PropTypes.bool
};

MoreAddressActions.defaultProps = {
  contactInfos: {},
  shippingAddress: '',
  billingAddress: '',
  cssOverride: undefined,
  showMenuPopover: false
};

export default MoreAddressActions;
