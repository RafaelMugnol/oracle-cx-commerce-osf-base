/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useRef, useState, useEffect} from 'react';
import SearchIcon from '@oracle-cx-commerce/react-components/icons/search';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {noop, t} from '@oracle-cx-commerce/utils/generic';
import css from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/address-search/styles.css';
import Popover from '@oracle-cx-commerce/react-components/popover';
import PropTypes from 'prop-types';

/**
 * Component that closes the search value in the input box.
 */
const ClearButton = props => {
  const {setSearchField, setShowFieldNamesPanel, setSearchTerm, onSearchSubmit, searchTerm} = props;
  const [derviedClass, setDerivedClass] = useState(
    `ClearButton${searchTerm ? '  ClearButton--visible' : ' ClearButton--hidden'}`
  );
  useEffect(() => {
    setDerivedClass(`${searchTerm && searchTerm !== '' ? 'ClearButton--visible' : 'ClearButton--hidden'}`);
  }, [derviedClass, searchTerm]);
  /**
   * Updating the parent components search filter.
   */
  const clearSearchBox = () => {
    setDerivedClass('ClearButton--hidden');
    setShowFieldNamesPanel(false);
    setSearchTerm('');
    setSearchField('');
    onSearchSubmit('');
  };

  return (
    <div className={`ClearButton ${derviedClass}`}>
      <input type="reset" className="ClearButton__Reset" onClick={clearSearchBox}></input>
    </div>
  );
};

/**
 * This component is used to fetch the list based on the input term provided.
 * The input term is passed to the parent component.
 * This component, can also clear the search term using the close button.
 * @param {*} props  Includes props from the parent component
 */
const AddressSearch = props => {
  const {
    closeLinkAltText,
    searchIconAltText,
    textFilterByNameOrAddress,
    textAddressFilterFieldName,
    className = '',
    size = '20',
    searchTerm,
    setSearchTerm,
    setSearchField,
    onSearchSubmit,
    onSearchFieldSelect = noop,
    searchFieldNames = []
  } = props;

  /**
   * searchRef is used to handle the scenario of paste the keyword in search bar
   */
  const searchRef = useRef('');

  /**
   * showFieldNamesPanel is used to control the field names panel visibility.
   */
  const [showFieldNamesPanel, setShowFieldNamesPanel] = useState(false);

  /**
   * This is an eventHandler method, which set the search field panel visible.
   * @param {*} event
   */
  const onInputFocus = () => {
    setShowFieldNamesPanel(true);
  };

  /**
   * This is an eventHandler method, which sets the searchTerm value in the parent component.
   * @param {*} event
   */
  const handleKeyDown = event => {
    if (event.key === 'Enter') {
      onSearchSubmit(event.target.value);
    } else {
      setSearchTerm(event.target.value);
    }
  };

  /**
   * This is an eventHandler method, which sets the searchTerm value in the parent component.
   * @param {*} event
   */
  const handleValueChange = event => {
    onSearchSubmit(event.target.value);
  };

  /**
   * This is an eventHandler method, which sets the searchTerm and searchField value in the parent component.
   * @param {*} event
   */
  const handleSearchFieldSelect = value => {
    setShowFieldNamesPanel(false);
    if (searchRef.current.value !== '') {
      onSearchFieldSelect({searchField: value, searchTerm: searchRef.current.value});
    }
  };

  return (
    <Styled css={css}>
      <div className={`AddressSearch__Container ${className}`} data-testid={'account-address-book-search'}>
        <SearchIcon
          role="button"
          onClick={onSearchSubmit}
          aria-label={searchIconAltText}
          className="AddressSearch__SearchIcon"
        ></SearchIcon>
        <label htmlFor={'account-address-book-search'}>
          <input
            type="search"
            className="AddressSearch__SearchText"
            id={'account-address-book-search'}
            autoComplete="off"
            placeholder={textFilterByNameOrAddress}
            size={size}
            value={searchTerm}
            aria-label={textFilterByNameOrAddress}
            onChange={handleValueChange}
            onKeyDown={handleKeyDown}
            onFocus={onInputFocus}
            ref={searchRef}
          ></input>
        </label>
        <Popover
          id={`Popover_AccountAddressBookSearch`}
          key={`Popover_AccountAddressBookSearch`}
          className="MoreAddressActions__Popover"
          show={showFieldNamesPanel}
          title=""
          displayBackdrop={true}
          onClose={() => {
            setShowFieldNamesPanel(false);
          }}
          closeIconTitle={closeLinkAltText}
        >
          <div className="AccountAddressBook__SearchFieldContainer">
            <strong>{searchRef.current.value}</strong>
            <ul className="AccountAddressBook__SearchFields">
              {Object.keys(searchFieldNames).map(searchField => (
                <li key={searchField}>
                  <div
                    role="button"
                    tabIndex={0}
                    key={searchField}
                    onKeyPress={event => {
                      if (event.key === 'Enter') {
                        handleSearchFieldSelect(searchField);
                      }
                    }}
                    onClick={() => {
                      handleSearchFieldSelect(searchField);
                    }}
                  >
                    <span
                      // eslint-disable-next-line react/no-danger
                      dangerouslySetInnerHTML={{
                        __html: t(textAddressFilterFieldName, {
                          SEARCHTERM: '',
                          SEARCHFIELD: searchFieldNames[searchField]
                        })
                      }}
                    />
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </Popover>
        <ClearButton
          searchTerm={searchRef.current.value}
          setSearchTerm={setSearchTerm}
          onSearchSubmit={onSearchSubmit}
          setSearchField={setSearchField}
          setShowFieldNamesPanel={setShowFieldNamesPanel}
        />
      </div>
    </Styled>
  );
};

ClearButton.propTypes = {
  /**
   * The search input callback function
   */
  onSearchSubmit: PropTypes.func.isRequired,
  /**
   * The search value
   */
  searchTerm: PropTypes.string
};

ClearButton.defaultProps = {
  searchTerm: ''
};

AddressSearch.propTypes = {
  /**
   * The search input text box
   */
  onSearchSubmit: PropTypes.func
};

AddressSearch.defaultProps = {
  onSearchSubmit: ''
};
export default AddressSearch;
