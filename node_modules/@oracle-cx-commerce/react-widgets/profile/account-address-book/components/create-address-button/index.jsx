/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  PAGE_ADD_ACCOUNT_ADDRESS_LINK,
  PAGE_ADD_PROFILE_ADDRESS_LINK
} from '@oracle-cx-commerce/commerce-utils/constants';
import React, {useMemo, useState} from 'react';

import Plus from '@oracle-cx-commerce/react-components/icons/plus';
import PropTypes from 'prop-types';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/account-address-book/components/create-address-button/styles.css';
import {getAddressManagerRoles} from '@oracle-cx-commerce/react-components/utils/address';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * Component to display create new addresses drop-down or button.
 * @param {Object} props the properties object
 */
const CreateAddressButton = props => {
  const {textAccountAddress, textProfileAddress, textNew, labelAddNewAddress} = props;
  const {roles} = props;

  // A flag to display buttons based on role and re-set the drop-down after address-type selection
  const [selectNewAddress, setSelectNewAddress] = useState('new');
  const goToPage = useNavigator();

  const addressManagerRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  const handleAddNewAddress = event => {
    setSelectNewAddress('new');
    if (event.target.value === 'profileAddress') {
      goToPage(PAGE_ADD_PROFILE_ADDRESS_LINK);
    } else {
      goToPage(PAGE_ADD_ACCOUNT_ADDRESS_LINK);
    }
  };

  if (addressManagerRoles.isAccountAddrManager && addressManagerRoles.isProfileAddrManager) {
    return (
      <Styled id="CreateAddressButton" css={css}>
        <div className="CreateAddressButton__NewAddress">
          <select
            className="CreateAddressButton__AddNewDropdown"
            name="addNewAddress"
            defaultValue={selectNewAddress}
            onChange={handleAddNewAddress}
            tabIndex={0}
            aria-label={`${labelAddNewAddress}`}
          >
            <option className="hiddenOption" key="new" value="new">
              + {textNew}
            </option>
            <option key="profileAddress" value="profileAddress">
              {textProfileAddress}
            </option>
            <option key="accountAddress" value="accountAddress">
              {textAccountAddress}
            </option>
          </select>
        </div>
      </Styled>
    );
  }
  if (addressManagerRoles.isAccountAddrManager || addressManagerRoles.isAdmin) {
    return (
      <Styled id="CreateAddressButton" css={css}>
        <div className="CreateAddressButton__NewAddress">
          <button
            id="new-address-button"
            type="button"
            onClick={() => goToPage(PAGE_ADD_ACCOUNT_ADDRESS_LINK)}
            className="CreateAddressButton__NewAddressButton"
            aria-label={`${textNew} ${textAccountAddress}`}
            tabIndex={0}
          >
            <div className="CreateAddressButton__PlusIconContainer">
              <Plus className="Icon CreateAddressButton__PlusIcon"></Plus>
            </div>
            <div className="CreateAddressButton__PlusIconLabel">
              {textNew} {textAccountAddress}
            </div>
          </button>
        </div>
      </Styled>
    );
  }
  if (addressManagerRoles.isProfileAddrManager) {
    return (
      <Styled id="CreateAddressButton" css={css}>
        <div className="CreateAddressButton__NewAddress">
          <button
            type="button"
            onClick={() => goToPage(PAGE_ADD_PROFILE_ADDRESS_LINK)}
            className="CreateAddressButton__NewAddressButton"
            aria-label={`${textNew} ${textProfileAddress}`}
            tabIndex={0}
          >
            <div className="CreateAddressButton__PlusIconContainer">
              <Plus className="CreateAddressButton__PlusIcon"></Plus>
            </div>
            <div className="CreateAddressButton__PlusIconLabel">
              {textNew} {textProfileAddress}
            </div>
          </button>
        </div>
      </Styled>
    );
  }

  return null;
};

CreateAddressButton.propTypes = {
  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.objectOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ).isRequired
};

export default CreateAddressButton;
