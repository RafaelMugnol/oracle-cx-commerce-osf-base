/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';

import Img from '@oracle-cx-commerce/react-components/img';
import {ReturnItemContext} from '@oracle-cx-commerce/react-widgets/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-return-request-items/components/return-item-details/styles.css';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';

export const ReturnItemImage = () => {
  const {returnItem} = useContext(ReturnItemContext);

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ReturnRequestItem__Image">
        <Img src={returnItem.primaryThumbImageURL} alt={returnItem.primaryImageAltText} size="xsmall" />
      </div>
    </Styled>
  );
};

export const ReturnItemName = () => {
  const {returnItem = {}} = useContext(ReturnItemContext);

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ReturnRequestItem__Name">{returnItem.displayName}</div>
    </Styled>
  );
};

export const ReturnItemPrice = props => {
  const {returnItem = {}, priceListGroup = {}} = useContext(ReturnItemContext);
  const {alertPriceUnavailable} = props;
  const OPTIONS = {style: 'currency'};

  let tmpPriceListGroup = priceListGroup;
  // eslint-disable-next-line spellcheck/spell-checker
  // useNumberFormatter fails when currencyCode is not present.
  if (!priceListGroup.currency || !priceListGroup.currency.currencyCode) {
    tmpPriceListGroup = {};
  }

  const formatCurrency = useNumberFormatter(OPTIONS, tmpPriceListGroup);

  // helpers
  /**
   * Formats price and displays alternate text if null price
   * @param  {Number} price Price
   * @param  {String} altPriceMsg Alternate text when price is unavailable
   * @return {String} formattedPrice Formatted price based on locale
   */
  const formatPrice = ({price, altPriceMsg}) => {
    return price ? formatCurrency(price) : altPriceMsg;
  };

  /**
   * Formats price and displays alternate text if null price
   * @param  {Number} price Price
   * @return {String} formattedPrice formattedPrice Formatted price based on locale
   */
  const formatPriceWithAltMsg = price => {
    return formatPrice({price, altPriceMsg: alertPriceUnavailable});
  };

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ReturnRequestItem__Price">
        {(returnItem.detailedItemPriceInfo &&
          returnItem.detailedItemPriceInfo.length > 1 &&
          returnItem.detailedItemPriceInfo.map((itemPrice, index) => (
            // eslint-disable-next-line react/no-array-index-key
            <div key={index} className="ReturnRequestItem__PriceBreakUp">
              {itemPrice.quantity}
              <span className="ReturnRequestItem__PriceBreakUpAtRate">{props.messageAtTheRate}</span>
              {formatPriceWithAltMsg(itemPrice.detailedUnitPrice)}
            </div>
          ))) ||
          (returnItem.detailedItemPriceInfo &&
            returnItem.detailedItemPriceInfo[0] &&
            formatPriceWithAltMsg(returnItem.detailedItemPriceInfo[0].detailedUnitPrice)) ||
          formatPriceWithAltMsg(returnItem.unitPrice)}
      </div>
    </Styled>
  );
};

export const ReturnItemQuantity = props => {
  const {returnItem = {}} = useContext(ReturnItemContext);
  const {labelReturnQuantity} = props;

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ReturnItemQuantity">
        <div className="ReturnRequestItemQuantity_Label">{labelReturnQuantity}</div>
        <div className="ReturnRequestItem__Quantity">{returnItem.quantityToReturn}</div>
      </div>
    </Styled>
  );
};

export const ReturnItemReason = props => {
  const {returnItem = {}} = useContext(ReturnItemContext);
  const {labelReturnReason} = props;

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div>
        <span className="ReturnRequestItemReturnReason__Label">{labelReturnReason}</span>
        <span className="ReturnRequestItem__ReturnReason">{returnItem.returnReason}</span>
      </div>
    </Styled>
  );
};

export const ProfileReturnRequestItemsTableHeader = props => {
  const {textItemDetails, textItemPrice, textQuantity} = props;

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ProfileReturnRequestItemsTableHeader">
        <div className="ProfileReturnRequestItemsTableHeader__ItemDetailsHeading">{textItemDetails}</div>
        <div className="ProfileReturnRequestItemsTableHeader__ItemPriceHeading">{textItemPrice}</div>
        <div className="ProfileReturnRequestItemsTableHeader__QuantityContainer">
          <div className="ProfileReturnRequestItemsTableHeader__ItemQunatityHeading">{textQuantity}</div>
        </div>
      </div>
    </Styled>
  );
};

export const ReturnItemVariants = props => {
  const {returnItem = {}} = useContext(ReturnItemContext);
  const {textVariantName} = props;

  return (
    <Styled id="ProfileReturnItemDetails" css={css}>
      <div className="ReturnRequestItem__Productvariants">
        {(returnItem.skuOptionInfo || []).map(
          variant =>
            variant.optionValue && (
              <div key={variant.optionName}>
                <span>{t(textVariantName, {variantName: variant.optionName})}</span>
                <span>{variant.optionValue}</span>
              </div>
            )
        )}
      </div>
    </Styled>
  );
};
