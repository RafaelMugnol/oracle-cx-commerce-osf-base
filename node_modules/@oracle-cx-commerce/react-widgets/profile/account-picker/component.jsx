/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {Suspense, useCallback, useContext, useEffect, useRef, useState} from 'react';

import CaretDownIcon from '@oracle-cx-commerce/react-components/icons/caret-down';
import Img from '@oracle-cx-commerce/react-components/img';
import OrganizationSelectorModal from '@oracle-cx-commerce/react-widgets/profile/account-picker/components/organization-select-modal';
import OrganizationSelectorPortal from '@oracle-cx-commerce/react-widgets/profile/account-picker/components/organization-selector-portal';
import Popover from '@oracle-cx-commerce/react-components/popover';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/profile/account-picker/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/profile/account-picker/selectors';

const initialModalView = {
  show: false
};

/**
 * A component for showing organizations name and logo that a profile is part of.
 * Also provides an option to select other organizations that this profile is part of.
 *
 * @param props
 */
const AccountPicker = props => {
  const {
    isUserLoggedIn,
    currentOrganizationId,
    labelChange,
    labelSelectAccount,
    closeLinkAltText,
    organizationName,
    organizationLogoURL,
    organizationLists: allOrganizations
  } = props;
  const {action} = useContext(StoreContext);
  const [organizationLists, setOrganizationLists] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [showAccountPickerPopover, setShowAccountPickerPopover] = useState(initialModalView);
  const [showOrganizationSelector, setShowOrganizationSelector] = useState(false);
  const triggerAction = useRef(true);
  const node = useRef();

  const handleClick = useCallback(e => {
    if (node.current && !node.current.contains(e.target)) {
      setShowAccountPickerPopover({
        show: false
      });
    }
  }, []);

  const showOrganizationSelectModal = useCallback(() => {
    setShowModal(true);
  }, [setShowModal]);

  const closeOrganizationSelectModal = useCallback(() => {
    setShowModal(false);
  }, [setShowModal]);

  const toggleAccountPickerPopover = useCallback(() => {
    setShowAccountPickerPopover({
      show: showAccountPickerPopover.show ? false : true
    });
  }, [showAccountPickerPopover.show]);

  /**
   * To call listOrganization endpoint to fetch list of valid organizations that the current user is member of.
   * The endpoint returns only valid organizations specific to the current site.
   * To close the pop-over when click is performed outside the popover
   */
  useEffect(() => {
    // add when mounted
    document.addEventListener('mousedown', handleClick);
    if (isUserLoggedIn && triggerAction.current) {
      triggerAction.current = false;
      action('listOrganizations')
        .then(response => {
          if (!response.ok) action('notify', {level: 'error', message: response.error.message});
          else {
            const {
              json: {items = []}
            } = response;
            const idArray = items.map(item => item.repositoryId);
            const filteredOrgs = allOrganizations.filter(org => idArray.indexOf(org.repositoryId) !== -1);
            setOrganizationLists(filteredOrgs);
            setShowOrganizationSelector(filteredOrgs.length > 1 ? true : false);
          }
        })
        .catch(response => {
          action('notify', {level: 'error', message: response.error.message});
        });
    }

    // return function to be called when unmounted
    return () => {
      document.removeEventListener('mousedown', handleClick);
    };
  });

  return (
    <Styled className="AccountPicker" id="AccountPicker" css={css}>
      {isUserLoggedIn && currentOrganizationId && (
        <div className="AccountPicker__Display">
          {!showOrganizationSelector && (
            <>
              <div className="AccountPicker__NameAndLogo">
                <div className="AccountPicker__CompanyLogo">
                  {<Img src={organizationLogoURL} alt={organizationName} title={organizationName} size="xsmall"></Img>}
                </div>
                <div className="AccountPicker__CompanyName">
                  <span>{organizationName}</span>
                </div>
              </div>
            </>
          )}
          {showOrganizationSelector && (
            <>
              <div ref={node} className="AccountPicker__Desktop">
                <div
                  onClick={toggleAccountPickerPopover}
                  onKeyPress={toggleAccountPickerPopover}
                  role="none"
                  className="AccountPicker__CompanyLogo AccountPicker__Click"
                >
                  {<Img src={organizationLogoURL} alt={organizationName} title={organizationName} size="xsmall"></Img>}
                </div>
                <div
                  onClick={toggleAccountPickerPopover}
                  onKeyPress={toggleAccountPickerPopover}
                  role="none"
                  className="AccountPicker__CompanyName AccountPicker__Click"
                >
                  <span>{organizationName}</span>
                </div>
                <div className="AccountPicker__Button">
                  <span
                    onKeyPress={toggleAccountPickerPopover}
                    className="AccountPicker__Caret"
                    onClick={toggleAccountPickerPopover}
                    role="none"
                  >
                    <CaretDownIcon />
                  </span>
                  {typeof window !== 'undefined' && (
                    <Suspense fallback={null}>
                      <Popover
                        show={showAccountPickerPopover.show}
                        title={labelSelectAccount}
                        onClose={() => setShowAccountPickerPopover(false)}
                        closeIconTitle={closeLinkAltText}
                        closeAriaLabel={closeLinkAltText}
                      >
                        {<OrganizationSelectorPortal {...props} organizationLists={organizationLists} />}
                      </Popover>
                    </Suspense>
                  )}
                </div>
              </div>
              <div className="AccountPicker__Mobile">
                <div
                  onClick={showOrganizationSelectModal}
                  onKeyPress={showOrganizationSelectModal}
                  role="button"
                  tabIndex="0"
                  className="AccountPicker__CompanyLogo AccountPicker__Click"
                >
                  {<Img src={organizationLogoURL} alt={organizationName} title={organizationName} size="xsmall"></Img>}
                </div>
                <div
                  onClick={showOrganizationSelectModal}
                  onKeyPress={showOrganizationSelectModal}
                  role="button"
                  tabIndex="0"
                  className="AccountPicker__CompanyName AccountPicker__Click"
                >
                  <span>{organizationName}</span>
                </div>
                <div className="AccountPicker__Button">
                  <button
                    aria-label={labelChange}
                    className="AccountPicker__ChangeButton AccountPicker__ButtonLabel"
                    onClick={showOrganizationSelectModal}
                    type="button"
                  >
                    {labelChange}
                  </button>
                </div>
                <OrganizationSelectorModal
                  show={showModal}
                  onClose={closeOrganizationSelectModal}
                  {...props}
                  organizationLists={organizationLists}
                />
              </div>
            </>
          )}
        </div>
      )}
    </Styled>
  );
};

AccountPicker.propTypes = {
  /**
   * This value is used to check if the user is logged in
   */
  isUserLoggedIn: PropTypes.bool,
  /**
   * This value is used to indicate the current organization id of a B2B user
   */
  currentOrganizationId: PropTypes.string,
  /**
   * This value is used to indicate the organization name of a B2B user
   */
  organizationName: PropTypes.string.isRequired,
  /**
   * This value is used to indicate the organization logo of a B2B account
   */
  organizationLogoURL: PropTypes.string,
  /**
   * Flag to indicate that a B2B user is associated with multiple accounts
   */
  displayOrganizationSelector: PropTypes.bool
};

AccountPicker.defaultProps = {
  isUserLoggedIn: false,
  currentOrganizationId: undefined,
  displayOrganizationSelector: false,
  organizationLogoURL: ''
};
export default connect(getComponentData)(AccountPicker);
