/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useEffect, useState} from 'react';

import {PAGE_HOME_LINK} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import PropTypes from 'prop-types';
import Search from '@oracle-cx-commerce/react-widgets/profile/contact-registration-requests/components/search';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/account-picker/components/account-dropdown/styles.css';

const CURRENT_ORGANIZATION = 'currentOrganization';

const AccountDropdown = props => {
  const {
    textFilterByAccountName,
    currentOrganizationId,
    onOrganizationChange,
    numberOfOrganizationToShow,
    textNoMatchesFound,
    textRetrievingAccounts,
    organizationLists
  } = props;

  const [orgLists, setOrgLists] = useState([]);
  const {action} = useContext(StoreContext);
  const [searchTerm, setSearchTerm] = useState('');
  const [processing, setProcessing] = useState(false);

  useEffect(() => {
    if (currentOrganizationId && organizationLists.length > 0) {
      setOrgLists(organizationLists.slice(0, numberOfOrganizationToShow));
    }
  }, [currentOrganizationId, numberOfOrganizationToShow, organizationLists]);

  /**
   * Failure call back for the listOrganizations action
   */
  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      action('notify', {level: 'error', message});
    },
    [action]
  );

  /**
   * Listens to the change in the input search field
   * @param {*} searchValue
   */
  const searchByAccountName = useCallback(
    searchValue => {
      setOrgLists([]);
      setSearchTerm(searchValue);
      setProcessing(true);
      const q = `name co "${searchValue}"`;
      const params = {q};
      params.limit = numberOfOrganizationToShow;
      action('listOrganizations', params)
        .then(response => {
          setProcessing(false);
          if (response.ok === false) {
            action('notify', {level: 'error', message: action.error.message});
          } else {
            const {json} = response;
            setOrgLists(json.items);
          }
        })
        .catch(error => {
          onNotOk({error});
        });
    },
    [action, numberOfOrganizationToShow, onNotOk]
  );

  const onChange = event => {
    onOrganizationChange(event.target.value);
  };

  const afterSelectingOrganization = newOrganization => {
    const url = `${PAGE_HOME_LINK}?${CURRENT_ORGANIZATION}=${newOrganization}`;
    location.assign(url);
  };

  const highLightSearchWord = (name, query) => {
    if (query && query.length > 0) {
      const regex = new RegExp(`(${query})`, 'gi');

      return name.replace(regex, '<strong>$1</strong>');
    }

    return name.toString();
  };

  return (
    <Styled className="AccountDropdown" id="AccountDropdown" css={css}>
      <Search
        searchInput={searchByAccountName}
        placeholderLabel={textFilterByAccountName}
        nameValue="account-name-search"
        {...props}
      />
      <hr></hr>
      <ul value={currentOrganizationId} onChange={onChange} className="AccountDropdown__List">
        {orgLists &&
          orgLists.length > 0 &&
          orgLists.map(organizationList => (
            <li key={organizationList.repositoryId}>
              <button
                onClick={() => afterSelectingOrganization(organizationList.repositoryId)}
                aria-label={organizationList.name}
                className="AccountPicker__ChangeButton AccountDropdown__Padding"
                type="button"
              >
                {
                  // eslint-disable-next-line react/no-danger
                  <p dangerouslySetInnerHTML={{__html: highLightSearchWord(organizationList.name, searchTerm)}} />
                }
              </button>
            </li>
          ))}
        {orgLists && orgLists.length < 1 && (
          <li>
            <p className="AccountDropdown__Text">{processing ? textRetrievingAccounts : textNoMatchesFound}</p>
          </li>
        )}
      </ul>
    </Styled>
  );
};

AccountDropdown.propTypes = {
  /**
   * The current Organization id of the b2b user
   */
  currentOrganizationId: PropTypes.string.isRequired,
  /**
   * A callback function
   */
  onOrganizationChange: PropTypes.func.isRequired,
  /**
   * The config property to indicate the number of organization to show in the modal
   */
  numberOfOrganizationToShow: PropTypes.string.isRequired,
  /**
   * The organizationLists  object from redux state(ProfileRepository->organizations)
   */
  organizationLists: PropTypes.arrayOf(
    PropTypes.shape({
      /**
       * Organization Id
       */
      repositoryId: PropTypes.string.isRequired,
      /**
       * Used to indicate the name of the organization
       */
      name: PropTypes.string.isRequired
    })
  )
};

AccountDropdown.defaultProps = {
  organizationLists: []
};
export default React.memo(AccountDropdown);
