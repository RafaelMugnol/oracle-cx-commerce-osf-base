/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import React from 'react';
import {t} from '@oracle-cx-commerce/utils/generic';
import ProfileOrder from '@oracle-cx-commerce/react-widgets/profile/profile-order-history/components/profile-order';
import Card from '@oracle-cx-commerce/react-components/card';
import Pagination from '@oracle-cx-commerce/react-components/pagination/standard';
import {buildQuerySQLPram, getOrder} from '@oracle-cx-commerce/react-widgets/profile/profile-order-history/utils';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-order-history/components/profile-order-list/styles.css';

const {useCallback, useContext, useEffect, useRef, useState} = React;

/**
 * A component for listing profile related order.
 * New orders are loaded on click of Show More orders
 */
const ProfileOrderList = props => {
  const [orderIds, setOrderIds] = useState([]);
  const [maxNumberOfOrders, setMaxNumberOfOrders] = useState(0);
  const [currentOffset, setCurrentOffset] = useState(0);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const {action} = useContext(StoreContext);
  const [showWidget, setShowWidget] = useState(false);
  const {profileId, siteId, displayThumbnails, numberOfOrderToLoad, orderType, showPagination = false} = props;

  const count = useRef(0);
  const q = useRef('');

  const getOrderCallBack = useCallback(
    (recentOrderIds, response) => {
      setShowWidget(true);
      setLoadingOrders(false);
      if (recentOrderIds && recentOrderIds.length > 0) setOrderIds([...orderIds, ...recentOrderIds]);
      if (response && response.json) setMaxNumberOfOrders(response.json.totalResults);
    },
    [orderIds]
  );

  const onPageChange = useCallback(
    newOffset => {
      q.current = buildQuerySQLPram(profileId, siteId, null, orderType);
      getOrder(q.current, newOffset, parseInt(numberOfOrderToLoad, 10), action, displayThumbnails, recentOrderIds => {
        setCurrentOffset(newOffset);
        if (recentOrderIds && recentOrderIds.length > 0) setOrderIds(recentOrderIds);
        scrollTo({top: 0, left: 0});
      });
    },
    [action, displayThumbnails, numberOfOrderToLoad, orderType, profileId, siteId]
  );

  useEffect(() => {
    if (profileId && count.current === 0 && numberOfOrderToLoad) {
      count.current++;
      q.current = buildQuerySQLPram(profileId, null, null, orderType);
      getOrder(q.current, 0, parseInt(numberOfOrderToLoad, 10), action, displayThumbnails, getOrderCallBack);
    }
  }, [action, getOrderCallBack, profileId, displayThumbnails, numberOfOrderToLoad, siteId, orderType]);

  return (
    <Styled id="ProfileOrderList" css={css}>
      <div className="ProfileOrderList">
        {showWidget && (
          <>
            <div className="ProfileOrderList__OrdersList">
              {(orderIds.length > 0 &&
                orderIds.map(orderId => (
                  <Card key={orderId}>
                    <ProfileOrder orderId={orderId} {...props}></ProfileOrder>
                  </Card>
                ))) || <div>{props.messageNoOrderAssociated}</div>}
            </div>
            {orderIds.length > 0 && maxNumberOfOrders > orderIds.length && !showPagination && (
              <div className="ProfileOrderList__LoadMoreWrapper">
                <button
                  type="button"
                  onClick={() => {
                    getOrder(
                      q.current,
                      orderIds.length - 1,
                      parseInt(props.numberOfOrderToLoad, 10),
                      action,
                      props.displayThumbnails,
                      getOrderCallBack
                    );
                    setLoadingOrders(true);
                  }}
                  className="secondary ProfileOrderList__LoadMore"
                  disabled={loadingOrders}
                >
                  {loadingOrders
                    ? props.textRetrievingOrders
                    : t(props.actionShowMoreOrders, {ORDERSCOUNT: props.numberOfOrderToLoad})}
                </button>
              </div>
            )}
            {orderIds.length > 0 && showPagination && (
              <div className="ProfileOrderList__PaginationWrapper">
                <Pagination
                  currentOffset={currentOffset}
                  limit={numberOfOrderToLoad}
                  totalRecords={maxNumberOfOrders}
                  onPageChange={onPageChange}
                />
              </div>
            )}
          </>
        )}
      </div>
    </Styled>
  );
};

export default ProfileOrderList;
