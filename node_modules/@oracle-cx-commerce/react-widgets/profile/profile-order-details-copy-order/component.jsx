/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useState} from 'react';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getOrderData} from '@oracle-cx-commerce/react-widgets/profile/profile-order-details-copy-order/selectors';
import MergeCartItemsModal from '@oracle-cx-commerce/react-widgets/profile/add-items-to-cart/components/merge-cart-items';
import HorizontalGearIcon from '@oracle-cx-commerce/react-components/icons/horizontal-gear';
import {PAGE_CART_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/profile/profile-order-details-copy-order/styles.css';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import Popover from '@oracle-cx-commerce/react-components/popover';

/**
 * Widget that shows a "Copy Order" link on Order details page
 * On clicking the link, All the items of the order will be added to cart
 */
const ProfileOrderDetailsCopyOrder = props => {
  const goToPage = useNavigator();

  //contexts
  const {action} = useContext(StoreContext);

  // local states
  const [modalView, setModalView] = useState(false);
  const [popOver, showPopover] = useState(false);

  const {textCopyOrder, closeLinkAltText, orderId, incompleteOrderId, currentOrder} = props;

  //callbacks

  const closeModal = useCallback(() => {
    setModalView(false);
  }, [setModalView]);

  const onNotOk = useCallback(
    ({error: {message = ''} = {}} = {}) => {
      closeModal();
      action('notify', {level: 'error', message});
    },
    [action, closeModal]
  );

  const onOk = useCallback(() => {
    goToPage(PAGE_CART_LINK);
  }, [goToPage]);

  const copyOrderItemsToCart = useCallback(async () => {
    try {
      const copyOrderPayload = {
        orderId,
        exclude: {
          commerceItem: ['priceInfo', 'externalPriceDetails', 'backOrderQuantity', 'preOrderQuantity'],
          order: [
            'approverMessages',
            'approvalSystemMessages',
            'quoteInfo',
            'approverIds',
            'submittedDate',
            'originOfOrder',
            'createdByOrderId',
            'priceInfo',
            'externalOrderPriceDetails',
            'cancelReason'
          ]
        }
      };
      incompleteOrderId && (copyOrderPayload['incompleteOrderId'] = incompleteOrderId);
      const response = await action('copyOrder', copyOrderPayload);
      if (response.ok === false) {
        onNotOk(response);
      } else {
        onOk(response);
      }
    } catch (error) {
      onNotOk(error);
    }
  }, [action, incompleteOrderId, onNotOk, onOk, orderId]);

  //event handlers
  const onCopyOrderClick = useCallback(() => {
    const isCartNonEmpty = currentOrder.numberOfItems;
    if (isCartNonEmpty) {
      setModalView(true);
    } else {
      copyOrderItemsToCart();
    }
  }, [copyOrderItemsToCart, currentOrder.numberOfItems]);

  const handlePopoverToggle = useCallback(() => {
    showPopover(v => !v);
  }, [showPopover]);

  const CopyOrderDesktopView = () => {
    return (
      <button
        type="button"
        className="ProfileOrderDetailsCopyOrder__DesktopView__Link"
        aria-label={textCopyOrder}
        onClick={onCopyOrderClick}
        onKeyPress={event => {
          if (event.key === 'Enter') {
            onCopyOrderClick();
          }
        }}
      >
        {textCopyOrder}
      </button>
    );
  };

  const CopyOrderMobileView = () => {
    return (
      <div className="ProfileOrderDetailsCopyOrder__MobileView">
        <HorizontalGearIcon
          tabIndex={0}
          aria-label={textCopyOrder}
          className="ProfileOrderDetailsCopyOrder__MobileView__HorizontalGearIcon"
          onKeyPress={event => (event.key === 'Enter' ? handlePopoverToggle() : '')}
          onClick={() => {
            handlePopoverToggle();
          }}
        />
        <Popover
          id={'idCopy'}
          key={`keyCopy`}
          className="ProfileOrderDetailsCopyOrder__MobileView__Popover"
          show={popOver}
          title=""
          onClose={() => {
            handlePopoverToggle();
          }}
          closeIconTitle={closeLinkAltText}
        >
          <button
            type="button"
            className="ProfileOrderDetailsCopyOrder__MobileView__Link"
            aria-label={textCopyOrder}
            onClick={onCopyOrderClick}
            onKeyPress={event => {
              if (event.key === 'Enter') {
                onCopyOrderClick();
              }
            }}
          >
            {textCopyOrder}
          </button>
        </Popover>
      </div>
    );
  };

  return (
    <Styled id="ProfileOrderDetailsCopyOrder" css={css}>
      <div className="ProfileOrderDetailsCopyOrder">
        <CopyOrderMobileView />
        <CopyOrderDesktopView />
        {typeof window !== 'undefined' && (
          <MergeCartItemsModal
            showMergeCartItemsModal={modalView}
            closeMergeCartItemsModal={closeModal}
            addSelectedItemsToCartHandler={copyOrderItemsToCart}
            {...props}
          ></MergeCartItemsModal>
        )}
      </div>
    </Styled>
  );
};
export default connect(getOrderData)(ProfileOrderDetailsCopyOrder);
