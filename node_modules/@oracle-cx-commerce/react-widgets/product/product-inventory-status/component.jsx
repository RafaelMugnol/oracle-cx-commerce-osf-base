/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CheckIcon from '@oracle-cx-commerce/react-components/icons/check';

import InfoCircle from '@oracle-cx-commerce/react-components/icons/info-circle';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import TimesIcon from '@oracle-cx-commerce/react-components/icons/times';
import css from '@oracle-cx-commerce/react-widgets/product/product-inventory-status/styles.css';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/product/product-inventory-status/selectors';

/**
 * A widget that displays inventory status of a selected sku/product, based on currently set inventory location
 */
const ProductInventoryStatus = props => {
  //labels
  const {
    textInStock,
    textOutOfStock,
    textPreOrderable,
    textBackOrderable,
    textSelectOptionOnline,
    textPreOrderableWithAvailabilityDate,
    textBackOrderableWithAvailabilityDate
  } = props;

  // selector
  const {availabilityDate, stockStatus, isPickupInStoreOptionSelected, selectedStore, orderableQuantity} =
    useComponentData();

  const statusValues = {
    IN_STOCK: {IconType: CheckIcon, label: textInStock, className: 'InStock'},
    OUT_OF_STOCK: {IconType: TimesIcon, label: textOutOfStock, className: 'OutOfStock'},
    PREORDERABLE: {
      IconType: CheckIcon,
      label: availabilityDate
        ? t(textPreOrderableWithAvailabilityDate, {
            availabilityDate
          })
        : textPreOrderable,
      className: 'InStock'
    },
    BACKORDERABLE: {
      IconType: CheckIcon,
      label: availabilityDate
        ? t(textBackOrderableWithAvailabilityDate, {
            availabilityDate
          })
        : textBackOrderable,
      className: 'InStock'
    },
    DEFAULT: {IconType: InfoCircle, label: textSelectOptionOnline, className: 'Unselected'}
  };

  const {IconType, label, className} =
    statusValues[orderableQuantity === 0 ? 'OUT_OF_STOCK' : stockStatus] || statusValues.DEFAULT;

  return (
    <Styled id="ProductInventoryStatus" css={css}>
      {(isPickupInStoreOptionSelected === false ||
        (isPickupInStoreOptionSelected === true && selectedStore.locationId)) && (
        <div className="ProductInventoryStatus">
          <IconType className={`ProductInventoryStatus__Icon--${className}`} title={label} />
          <span className={`ProductInventoryStatus__Icon--${className}`}>{label}</span>
        </div>
      )}
    </Styled>
  );
};

export default ProductInventoryStatus;
