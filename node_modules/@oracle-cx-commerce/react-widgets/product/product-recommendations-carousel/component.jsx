/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useEffect, useMemo} from 'react';
import css from '@oracle-cx-commerce/react-widgets/product/product-recommendations-carousel/styles.css';
import GenericCarousel from '@oracle-cx-commerce/react-components/generic-carousel';
import ProductItem from '@oracle-cx-commerce/react-widgets/product/product-recommendations-carousel/components/product-item';
import PropTypes from 'prop-types';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import {
  isMobile,
  getProducts,
  getRecommendations,
  getRecommendationsSet
} from '@oracle-cx-commerce/commerce-utils/selector';
import {t} from '@oracle-cx-commerce/utils/generic';

/**
 * This component is used to render the product recommendations as a Carousel.
 * @param props
 */
const ProductRecommendationsCarousel = props => {
  const {widgetId, headingProductRecommendations} = props;

  const mobile = useSelector(isMobile);
  const recommendations = useSelector(getRecommendations, {widgetId});
  const {recSetId} = useSelector(getRecommendationsSet, {widgetId});
  const products = useSelector(getProducts);
  const {action} = useContext(StoreContext);

  useEffect(() => {
    if (recommendations && recommendations.length > 0) {
      // Exclude relatedProducts to reduce the size of the response and
      // to workaround an issue with variants if any of the recommended products
      // has a related product that is currently being viewed on a PDP page.
      const payload = {productIds: recommendations, exclude: 'items.relatedProducts'};

      action('listProducts', payload);
    }
  }, [action, recommendations]);
  const slides = [];

  useMemo(() => {
    recommendations
      .map(productId => products[productId])
      .filter(product => product != null)
      .forEach(product => {
        slides.push(<ProductItem {...props} product={product} recSetId={recSetId} />);
      });
  }, [recommendations, products, slides, recSetId, props]);

  if (slides.length === 0) {
    return null;
  }

  return (
    <Styled id="ProductRecommendationsCarousel" css={css}>
      {recommendations && recommendations.length > 0 && (
        <div className="ProductRecommendationsCarousel">
          <div className="ProductRecommendationsCarousel__Heading">{t(headingProductRecommendations)}</div>
          <div className="ProductRecommendationsCarousel_Content">
            <GenericCarousel
              slides={slides}
              mobile={mobile}
              showIndicator={false}
              isAutoSlide={false}
              itemsPerSlideDesktop={4}
              itemsPerSlideMobile={1}
            />
          </div>
        </div>
      )}
    </Styled>
  );
};

ProductRecommendationsCarousel.propTypes = {
  /** The id of the widget */
  widgetId: PropTypes.string.isRequired,

  /** A text snippet displayed above the product recommendations */
  headingProductRecommendations: PropTypes.string.isRequired
};

export default ProductRecommendationsCarousel;
