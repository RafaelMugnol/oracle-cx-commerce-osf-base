/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useEffect, useRef, useState} from 'react';

import Modal from '@oracle-cx-commerce/react-components/modal';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {ContainerContext, ProductContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import StoreSearchForm from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-form';
import StoreSearchResults from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-results';
import StoreSearchResultsFilter from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-results-filter';
import {getSkuInventory} from '@oracle-cx-commerce/commerce-utils/selector';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-locator/styles.css';
import {IN_STOCK, PREORDERABLE, BACKORDERABLE, OUT_OF_STOCK} from '@oracle-cx-commerce/commerce-utils/constants/cart';

/** Constants */
const stockStatuses = {
  IN_STOCK,
  PREORDERABLE,
  BACKORDERABLE,
  OUT_OF_STOCK
};

/**
 * Component to show available locations for store pickup.
 */

const StoreLocator = props => {
  const {
    cssOverride = '',
    closeLinkAltText,
    textStoresFilter,
    textStoreSearchResults,
    labelFindAStore,
    headingStoreLocator,
    textStoreSearchHelper,
    storeSettings,
    setStoreSettings,
    storeLocatorLinkRef,
    shippingGroups = {},
    shippingGroupId = '',
    shippingGroupCommerceItem = {}
  } = props;

  const {action} = useContext(StoreContext);

  const {id: productId} = useContext(ProductContext);

  const {selections = {}, setSelections} = useContext(ContainerContext);
  const {skuId = null, selectedQuantity = 0, qty = 1} = selections;

  /**
   * Sku Inventory information.
   */
  const skuInventory = useSelector(getSkuInventory, {skuId});

  /** Component's State */
  const [displayInStockStores, setDisplayInStockStores] = useState(false);

  const queryInputParam = useRef();

  /**
   * Hides the Store Locator Modal
   */
  const hideStoreLocatorOverlay = () => {
    if (queryInputParam.current) {
      queryInputParam.current.value = '';
    }

    setDisplayInStockStores(false);
    setStoreSettings(prevState => {
      return {
        ...prevState,
        stores: {},
        searchComplete: false,
        displayStoreSelectorModal: false
      };
    });
    if (storeLocatorLinkRef.current) {
      storeLocatorLinkRef.current.focus();
    }
  };

  const renderStoreSearchResults = () => {
    return (
      <StoreSearchResults
        {...props}
        skuInventory={skuInventory}
        skuId={skuId}
        selectedQuantity={selectedQuantity}
        qty={qty}
        setSelections={setSelections}
        stockStatuses={stockStatuses}
        displayInStockStores={displayInStockStores}
        hideStoreLocatorOverlay={hideStoreLocatorOverlay}
      />
    );
  };
  /**
   * Toggles the Filtering of search results for displaying stores with inventory in stock only.
   */
  const toggleDisplayInStockStores = () => {
    setDisplayInStockStores(!displayInStockStores);
    renderStoreSearchResults();
  };

  useEffect(() => {
    if (Object.keys(storeSettings.stores).length > 0 && storeSettings.getStockStatusCompleted === false) {
      action('getStockStatus', {
        products: [`${productId}:${skuId}`],
        locationIds: [`${Object.keys(storeSettings.stores).toString(',')}`],
        actualStockStatus: true
      }).then(response => {
        if (response.ok === true) {
          setStoreSettings(prevState => {
            return {
              ...prevState,
              searchComplete: true,
              getStockStatusCompleted: true
            };
          });
        }
      });
    }
  }, [action, storeSettings.stores, productId, skuId, setStoreSettings, storeSettings.getStockStatusCompleted]);

  return (
    <Styled id="StoreLocator" css={css}>
      <Modal
        show={storeSettings.displayStoreSelectorModal}
        closeIconTitle={closeLinkAltText}
        closeArialLabel={closeLinkAltText}
        onClose={hideStoreLocatorOverlay}
        title={
          <div className="StoreSelector__Title">
            <h1> {headingStoreLocator} </h1>
          </div>
        }
        cssOverride={cssOverride}
      >
        <div className="StoreSelector__SearchForm">
          <StoreSearchForm
            {...props}
            storeSettings={storeSettings}
            setStoreSettings={setStoreSettings}
            labelFindAStore={labelFindAStore}
            queryInputParam={queryInputParam}
            skuId={skuId}
            productId={productId}
            textStoreSearchHelper={textStoreSearchHelper}
          />
        </div>

        <StoreSearchResultsFilter
          displayInStockStores={displayInStockStores}
          toggleDisplayInStockStores={toggleDisplayInStockStores}
          textStoresFilter={textStoresFilter}
          textStoreSearchResults={textStoreSearchResults}
          stores={storeSettings.stores}
          stockStatuses={stockStatuses}
          skuInventory={skuInventory}
          displayStoreSelectorModal={storeSettings.displayStoreSelectorModal}
          searchComplete={storeSettings.searchComplete}
          queryInputParam={queryInputParam}
          skuId={skuId}
          selectedQuantity={selectedQuantity}
          qty={qty}
          shippingGroups={shippingGroups}
          shippingGroupId={shippingGroupId}
          shippingGroupCommerceItem={shippingGroupCommerceItem}
        />

        <div className="StoreSelector__SearchResults">{storeSettings.searchComplete && renderStoreSearchResults()}</div>
      </Modal>
    </Styled>
  );
};
export default React.memo(StoreLocator);
