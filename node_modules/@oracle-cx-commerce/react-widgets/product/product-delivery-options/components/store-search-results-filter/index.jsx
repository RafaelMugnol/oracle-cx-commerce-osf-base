/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';

import Styled from '@oracle-cx-commerce/react-components/styled';
import ToggleSwitch from '@oracle-cx-commerce/react-components/toggle-switch';
import {validateQty} from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/utils';
import css from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-results-filter/styles.css';
import {t} from '@oracle-cx-commerce/utils/generic';

/**
 * Displays pickup in stores search results filter switch and results text.
 */
const StoreSearchResultsFilter = props => {
  const {
    displayInStockStores,
    displayStoreSelectorModal,
    toggleDisplayInStockStores,
    textStoresFilter,
    textStoreSearchResults,
    stores,
    stockStatuses,
    skuInventory,
    searchComplete,
    queryInputParam,
    skuId,
    shippingGroups = {},
    shippingGroupCommerceItem = {},
    selectedQuantity,
    qty,
    shippingGroupId = '',
    orderLimit
  } = props;

  //const selectedQty = selectedQuantity === 0 ? qty : selectedQuantity;
  /**
   * Returns the total number of store search results with inventory in stock only.
   */
  const getInstockResultsCount = () => {
    let instockTotal = 0;
    let selectedQty = 0;
    if (selectedQuantity >= 1) {
      selectedQty = selectedQuantity;
    } else if (shippingGroupCommerceItem && shippingGroupCommerceItem.quantity) {
      selectedQty = shippingGroupCommerceItem.quantity;
    } else {
      selectedQty = qty;
    }
    Object.keys(stores).map(locationId => {
      const {isQtyValid} = validateQty(
        //shippingGroupCommerceItem.quantity ? shippingGroupCommerceItem.quantity : selectedQuantity,
        selectedQty,
        skuInventory[locationId] ? skuInventory[locationId].orderableQuantity : null,
        locationId,
        skuId,
        shippingGroups,
        shippingGroupId,
        orderLimit
      );
      instockTotal =
        displayInStockStores === true &&
        skuInventory[locationId] &&
        isQtyValid &&
        (skuInventory[locationId].stockStatus === stockStatuses.IN_STOCK ||
          skuInventory[locationId].stockStatus === stockStatuses.BACKORDERABLE ||
          skuInventory[locationId].stockStatus === stockStatuses.PREORDERABLE)
          ? instockTotal + 1
          : instockTotal;

      return instockTotal;
    });

    return instockTotal;
  };

  return (
    <Styled id="StoreSearchResultsFilter" css={css}>
      <div className="StoreSearchResultsFilter">
        <div className="StoreSearchResultsFilter__IconWithText">
          <ToggleSwitch
            data-testid={'instock-stores-filter'}
            isOn={displayInStockStores}
            label={textStoresFilter}
            tabIndex={displayStoreSelectorModal ? 0 : -1}
            onChange={toggleDisplayInStockStores}
          />
          <span className="StoreSearchResultsFilter__HelperText">{textStoresFilter}</span>
        </div>

        <div aria-live="polite" role="status" aria-atomic="true">
          {searchComplete && (
            <>
              {
                <div
                  className="StoreSearchResultsFilter__message"
                  // eslint-disable-next-line react/no-danger
                  dangerouslySetInnerHTML={{
                    __html: t(textStoreSearchResults, {
                      storeCount: !displayInStockStores ? Object.keys(stores).length : getInstockResultsCount(),
                      searchText: queryInputParam.current.value
                    })
                  }}
                ></div>
              }
            </>
          )}
        </div>
      </div>
    </Styled>
  );
};

export default React.memo(StoreSearchResultsFilter);
