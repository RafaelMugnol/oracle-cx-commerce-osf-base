/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import CheckIcon from '@oracle-cx-commerce/react-components/icons/check';
import Styled from '@oracle-cx-commerce/react-components/styled';
import TimesIcon from '@oracle-cx-commerce/react-components/icons/times';
import WarningIcon from '@oracle-cx-commerce/react-components/icons/warning';
import {ContainerContext} from '@oracle-cx-commerce/react-ui/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-result-item/styles.css';

/**
 * Displays pickup in stores search result item.
 */
const StoreSearchResultItem = props => {
  /** Locale Texts */
  const {
    isFirstItem,
    isDeliveryMethodChanged,
    textSelect,
    stockAvailabilityMessage,
    isStockInsuffiecient,
    textOutOfStock
  } = props;

  const {store, hideStoreLocatorOverlay, displayStoreSelectorModal} = props;
  const {name, address1, address2, city, postalCode, phoneNumber, stateAddress} = store;

  let stockInfoClassName = '';

  if (textOutOfStock) {
    stockInfoClassName = 'StoreSearchResultItem__OutOfStock';
  } else if (!isStockInsuffiecient) {
    stockInfoClassName = 'StoreSearchResultItem__InStock';
  } else {
    stockInfoClassName = 'StoreSearchResultItem__InSufficientStock';
  }

  const {setSelections} = useContext(ContainerContext);
  /**
   * Handles the Pick up in store selection for the current line item or product.
   * Sets the selected store information on Store Settings and Selections state objects.
   * @param {*} selectedStore - Object which contains the information of the selected store.
   */
  const handleStoreSelection = selectedStore => {
    setSelections(prevState => {
      return {
        ...prevState,
        selectedStore,
        isPickupInStoreOptionSelected: true,
        isDeliveryMethodChanged: true
      };
    });
    hideStoreLocatorOverlay();
  };

  return (
    <Styled id="StoreSearchResultItem" css={css}>
      <div
        className={`${isFirstItem ? 'StoreSearchResultFirstItem' : 'StoreSearchResultItem'} ${
          isDeliveryMethodChanged ? 'SelectedItem' : ''
        }`}
      >
        <address className="StoreSearchResultItem__StoreAddress">
          <div>{`${name}`}</div>
          <div>{`${address1}, ${address2}`}</div>
          <div>{`${city}, ${postalCode}, ${stateAddress}`}</div>
          <span>{phoneNumber}</span>
        </address>
        {textSelect && (
          <div className="StoreSearchResultItem__SelectStore">
            <div className="StoreSearchResultItem__Button">
              <button
                className="secondary"
                type="button"
                tabIndex={displayStoreSelectorModal ? 0 : -1}
                data-testid={`select-${name}`}
                disabled={textOutOfStock || isStockInsuffiecient ? true : false}
                onClick={() => {
                  handleStoreSelection(store);
                }}
              >
                {textSelect}
              </button>
            </div>
            <div className={stockInfoClassName}>
              {stockAvailabilityMessage && !textOutOfStock ? (
                <>
                  {isStockInsuffiecient ? (
                    <WarningIcon className={'StoreSearchResultItem__InSufficientStock--Icon'} />
                  ) : (
                    <CheckIcon className={'StoreSearchResultItem__InStock--Icon'} />
                  )}
                  {` ${stockAvailabilityMessage}`}
                </>
              ) : (
                <>
                  <TimesIcon className={'StoreSearchResultItem__OutOfStock--Icon'} /> {` ${textOutOfStock}`}
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </Styled>
  );
};

export default React.memo(StoreSearchResultItem);
