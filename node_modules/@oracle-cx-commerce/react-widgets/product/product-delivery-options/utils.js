/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {arrayToMap} from '@oracle-cx-commerce/utils/generic';
import {
  SHIPPING_GROUP_HARDGOOD,
  SHIPPING_GROUP_IN_STORE_PICKUP
} from '@oracle-cx-commerce/commerce-utils/constants/shipping';

export const getShippingItemRelationships = shippingGroups => {
  let shippingItemRelationships = [];
  let relationshipCount = 0;
  if (shippingGroups) {
    (Object.values(shippingGroups) || []).forEach(({shippingGroupId, items}) => {
      let retObj = {shippingGroupId};
      (items || []).forEach(({commerceId, quantity}) => {
        relationshipCount++;
        const relationshipId = `R${relationshipCount}`;
        retObj = {...retObj, commerceId, quantity, relationshipId};
        shippingItemRelationships.push(retObj);
      });
    });
  }
  shippingItemRelationships = arrayToMap(shippingItemRelationships, 'relationshipId');

  return shippingItemRelationships;
};

/**
 * Get item quantity from existing shipping groups
 */
export const getLocationBasedItemQtyFromSGs = ({
  locationId = 'default',
  skuId,
  shippingGroups,
  shippingGroupId: currentShippingGroupId,
  isSplitShipping = false,
  invalidItemsOnQuantityChange = {}
}) => {
  let itemQtyInCart = 0;
  let locationBasedCommerceItem = null;
  let hardgoodSGCommerceItemTotalQty = 0;
  //check for the existing shipping group type of the current item
  if (Object.keys(shippingGroups).length > 0) {
    Object.keys(shippingGroups).forEach(function (shippingGroupId) {
      shippingGroups[shippingGroupId].items.forEach(function (item) {
        if (item.catRefId === skuId) {
          if (shippingGroups[shippingGroupId].type === SHIPPING_GROUP_HARDGOOD) {
            if (isSplitShipping && shippingGroupId === currentShippingGroupId) {
              hardgoodSGCommerceItemTotalQty = hardgoodSGCommerceItemTotalQty + 0;
            } else {
              // First Check for any invalid qty items based on current commerce item exist in cart
              const invalidItemKeys = Object.keys(invalidItemsOnQuantityChange).filter(function (propertyName) {
                return propertyName.indexOf(item.commerceId) !== -1;
              });
              if (invalidItemKeys.length > 0) {
                // Now instead of original item qty, add the previously invalid item qty if exists
                const invalidItemKey = `${shippingGroupId}${item.commerceId}`;
                const invalidItemQty = invalidItemsOnQuantityChange[invalidItemKey]
                  ? invalidItemsOnQuantityChange[invalidItemKey].quantity
                  : null;
                if (invalidItemQty) {
                  hardgoodSGCommerceItemTotalQty = hardgoodSGCommerceItemTotalQty + invalidItemQty;
                } else {
                  hardgoodSGCommerceItemTotalQty = hardgoodSGCommerceItemTotalQty + item.quantity;
                }
              } else {
                hardgoodSGCommerceItemTotalQty = hardgoodSGCommerceItemTotalQty + item.quantity;
              }
            }
          } else if (
            shippingGroupId !== currentShippingGroupId &&
            locationId &&
            shippingGroups[shippingGroupId].type === SHIPPING_GROUP_IN_STORE_PICKUP &&
            shippingGroups[shippingGroupId].store.locationId === locationId
          ) {
            locationBasedCommerceItem = item;
          }
        }
      });
    });
    if (locationBasedCommerceItem) {
      itemQtyInCart = locationBasedCommerceItem.quantity;
    } else if (locationId === 'default') {
      itemQtyInCart = hardgoodSGCommerceItemTotalQty;
    }
  }

  return itemQtyInCart;
};

/**
 * Returns true if quantity of item added passes below rules
 * 1. more than 0
 * 2. less than qtyAvailable which is (Lower value of (Inventory Count - Stock Threshold Value) OR Order Limit )
 *
 * @param  {String} qty Quantity to be added to cart
 * @return {Object} Object with Quantity validation data
 */
export const validateQty = (
  selectedQty,
  orderableQuantity,
  locationId,
  skuId,
  shippingGroups,
  shippingGroupId,
  orderLimit
) => {
  const qtyAdded = selectedQty ? parseInt(selectedQty, 10) : 0;
  const itemQtyInCart = getLocationBasedItemQtyFromSGs({shippingGroups, shippingGroupId, locationId, skuId});
  const qtyAvailable = orderableQuantity && orderableQuantity > 0 ? orderableQuantity : 1;
  const maxQtyAllowed = orderLimit && orderLimit < qtyAvailable ? orderLimit : qtyAvailable;

  return {
    isQtyValid: qtyAdded && qtyAdded > 0 && qtyAdded + itemQtyInCart <= maxQtyAllowed,
    maxQtyAllowed,
    itemQtyInCart
  };
};
