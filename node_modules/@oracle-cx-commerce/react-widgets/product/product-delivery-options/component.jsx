/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useRef, useState} from 'react';
import {ContainerContext, ProductContext} from '@oracle-cx-commerce/react-ui/contexts';
import DeliveryOption from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/delivery-option';
import StoreLocatorLink from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-locator-link';
import StoreLocator from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-locator';
import StoreSearchResultItem from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-result-item';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/selectors';
import css from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/styles.css';

/**
 * Displays the store pickup and home delivery options
 */
const ProductDeliveryOptions = props => {
  /** Labels and Resource Texts */
  const {actionSelectStore, actionChangeStore, labelHomeDelivery, labelPickUpInStore} = props;
  const {shippingGroupId = null} = props;

  /** Container Context Data */
  const {selections = {}, setSelections} = useContext(ContainerContext);
  const {skuId = null, selectedStore = {}, isPickupInStoreOptionSelected = false} = selections;

  /** Product Context Data */
  const {id: productId} = useContext(ProductContext);

  /** Sku Data */
  const {configurableProduct, configurableSku, onlineOnlyProduct, onlineOnlySku, shippingGroups, orderLimit} =
    useComponentData(productId, skuId);

  const storeDefaultValues = {
    stores: {},
    searchComplete: false,
    displayStoreSelectorModal: false,
    currentQueryForLocations: null,
    getStockStatusCompleted: false
  };

  const [storeSettings, setStoreSettings] = useState(storeDefaultValues);
  const storeLocatorLinkRef = useRef();

  /**
   * Handles the Home Delivery Option Selection by invoking the relate items to shipping group action.
   */
  const setHomeDeliveryOption = useCallback(() => {
    setStoreSettings(prevState => {
      return {
        ...prevState,
        stores: {},
        searchComplete: false
      };
    });
    setSelections(prevState => {
      return {
        ...prevState,
        isPickupInStoreOptionSelected: false,
        isDeliveryMethodChanged: true
      };
    });
  }, [setSelections]);

  /**
   * Handles the selection of Pick up in store option.
   */
  const setPickupInStoreOption = useCallback(() => {
    setSelections(prevState => {
      return {
        ...prevState,
        isPickupInStoreOptionSelected: true,
        isQuantityValidated: false
      };
    });
  }, [setSelections]);

  return (
    <Styled id="ProductDeliveryOptions" css={css}>
      {skuId && !onlineOnlyProduct && !onlineOnlySku && !configurableProduct && !configurableSku && (
        <div className="ProductDeliveryOptions">
          {/* Home Delivery Option */}
          <DeliveryOption
            id={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-HomeDelivery`}
            name={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-DeliveryOption`}
            onClick={setHomeDeliveryOption}
            data-testid={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-HomeDelivery`}
            label={labelHomeDelivery}
            isOptionSelected={!isPickupInStoreOptionSelected}
          />

          {/* Pickup In Store Option */}
          <DeliveryOption
            id={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-PickupInStore`}
            name={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-DeliveryOption`}
            onClick={setPickupInStoreOption}
            label={labelPickUpInStore}
            isOptionSelected={isPickupInStoreOptionSelected}
            storeLocatorLink={
              <StoreLocatorLink
                actionChangeStore={actionChangeStore}
                actionSelectStore={actionSelectStore}
                data-testid={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-${
                  selectedStore.locationId ? `ChangeStore` : `SelectStore`
                }`}
                selectedStore={selectedStore}
                storeSettings={storeSettings}
                storeLocatorLinkRef={storeLocatorLinkRef}
                setStoreSettings={setStoreSettings}
              />
            }
          />

          <StoreLocator
            {...props}
            orderLimit={orderLimit}
            shippingGroups={shippingGroups}
            storeSettings={storeSettings}
            storeLocatorLinkRef={storeLocatorLinkRef}
            setStoreSettings={setStoreSettings}
          />

          {selectedStore.locationId && (
            <StoreSearchResultItem
              isFirstItem={true}
              isDeliveryMethodChanged={true}
              store={selectedStore}
              textSelect={''}
            />
          )}
        </div>
      )}
    </Styled>
  );
};

export default ProductDeliveryOptions;
