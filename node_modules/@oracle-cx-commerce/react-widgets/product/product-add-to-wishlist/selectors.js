/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ProductSelectionContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {getComponentData, getCurrentPageId, getProduct, getSku} from '@oracle-cx-commerce/commerce-utils/selector';
import {useContext, useEffect} from 'react';

import {access} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {getDetailsFromProductAndSku} from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/utils';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Custom React hook to compute product details from the information provided through `ProductSelectionContext`
 */
export const useComponentData = () => {
  const {getState} = useContext(StoreContext);
  const {productSelection} = useContext(ProductSelectionContext);
  const {productId, skuId, quantity, commerceItem, shippingGroups, shippingGroupId, setTriggerRemoveItem} =
    productSelection;

  if (productId && skuId) {
    const product = getProduct(getState(), {productId});
    const sku = getSku(getState(), {skuId});

    if (!isEmptyObject(product) && !isEmptyObject(sku)) {
      return getDetailsFromProductAndSku(product, sku, quantity);
    }
  } else if (commerceItem) {
    if (!isEmptyObject(commerceItem)) {
      return {
        productId: commerceItem.productId,
        skuId: commerceItem.catRefId,
        productDisplayName: commerceItem.displayName,
        productSalePrice: commerceItem.salePrice ? commerceItem.salePrice : commerceItem.listPrice,
        productThumbImageURL: commerceItem.primaryThumbImageURL,
        productVariantValues: commerceItem.variant,
        quantity: commerceItem.quantity,
        shippingGroups,
        shippingGroupId,
        commerceItem,
        setTriggerRemoveItem
      };
    }
  }

  return {};
};

/**
 * Custom React hook to automatically open ProductAddToWishList modal after login
 */
export const useAutoOpen = handler => {
  let autoOpen = false;
  const {action, getState} = useContext(StoreContext);

  const componentData = getComponentData(getState());
  const currentPageId = getCurrentPageId(getState());
  const wishListAccessDetails = useSelector(access);

  if (
    componentData['pages'] &&
    componentData['pages'][currentPageId] &&
    componentData['pages'][currentPageId]['showAddToWishList']
  ) {
    autoOpen = true;
  }

  //hook that listens for autoOpen flag and access details of wishlist
  useEffect(() => {
    if (autoOpen && !isEmptyObject(wishListAccessDetails)) {
      handler();

      action('saveComponentData', {
        pages: {
          [getCurrentPageId(getState())]: {
            showAddToWishList: false
          }
        }
      });
    }
  }, [action, autoOpen, getState, handler, wishListAccessDetails]);
};
