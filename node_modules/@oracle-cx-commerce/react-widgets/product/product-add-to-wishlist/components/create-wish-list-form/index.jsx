/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useState} from 'react';
import {access, getWishList} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {isEmptyObject, noop, t} from '@oracle-cx-commerce/utils/generic';

import Alert from '@oracle-cx-commerce/react-components/alert';
import Form from '@oracle-cx-commerce/react-components/form';
import PasswordIcon from '@oracle-cx-commerce/react-components/icons/password';
import PropTypes from 'prop-types';
import Radio from '@oracle-cx-commerce/react-components/radio';
import UnlockIcon from '@oracle-cx-commerce/react-components/icons/unlock';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import UsersIcon from '@oracle-cx-commerce/react-components/icons/users';
import css from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/create-wish-list-form/styles.css';
import {getUpdateWishListItems} from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/utils';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Component to show a create wishlist dialog.
 *
 * @param props
 */
const CreateWishListForm = props => {
  //context
  const {action, getState} = useContext(StoreContext);

  const {
    labelListName = '',
    alertDuplicateWishList = '',
    actionSave = '',
    actionCancel = '',
    wishlistAccessLevelPrivateHelpText = '',
    wishlistAccessLevelGroupHelpText = '',
    wishlistAccessLevelSharedHelpText = '',
    headingWishlistPrivacySettings = '',
    textCreateWishListDescription = '',
    textPrivate = '',
    textGroup = '',
    textShared = '',
    productSelection = [],
    onEditWishListComplete = noop,
    onAddToWishListComplete = noop,
    onCancel = noop,
    wishListId = ''
  } = props;

  //selector
  const wishList = useSelector(getWishList, {id: wishListId});
  const initialFormData = () => {
    if (wishListId) {
      return {wishListName: wishList.spaceName, accessLevel: wishList.accessLevel};
    }

    return {
      wishListName: '',
      accessLevel: 0
    };
  };
  const [formData, setFormData] = useState(initialFormData());
  const [formError, setFormError] = useState('');
  const [inProgress, setInProgress] = useState(false);

  const handleFormDataChange = event => {
    setFormData({...formData, [event.target.name]: event.target.value});
  };

  /**
   * Error callback of create wishlist action
   */
  const onNotOk = useCallback(
    response => {
      if (response.error.errorCode === '64111') {
        setFormError(t(alertDuplicateWishList, {wishListName: formData.wishListName}));
      } else {
        onAddToWishListComplete(response);
      }
    },
    [alertDuplicateWishList, formData.wishListName, onAddToWishListComplete]
  );

  /**
   * Method that creates a new wishlist and adds the product to the created wishlist
   */
  const createAndAddWishList = useCallback(() => {
    setInProgress(true);
    const wishListSiteId = access(getState()).siteId || '';

    action('createWishlist', {
      siteId: wishListSiteId,
      wishlistName: formData.wishListName,
      wishlistDescription: textCreateWishListDescription,
      accessLevel: formData.accessLevel
    })
      .then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else if (!isEmptyObject(productSelection)) {
          const wishlistId = response.json.spaceId;
          const wishlistName = response.json.spaceName;
          const payload = {
            wishlistId,
            ...getUpdateWishListItems(productSelection)
          };

          action('addProductToWishlist', payload).then(response => {
            if (response.ok) {
              onAddToWishListComplete({
                ok: true,
                data: {
                  id: wishlistId,
                  wishlistName
                },
                json: response.json
              });
            } else {
              onAddToWishListComplete(response);
            }
          });
        } else {
          onAddToWishListComplete({
            ok: true,
            data: {
              id: response.json.spaceId
            },
            json: response.json
          });
        }
      })
      .catch(error => {
        onNotOk({
          ok: false,
          error
        });
      })
      .finally(() => {
        setInProgress(false);
      });
  }, [
    action,
    formData.accessLevel,
    formData.wishListName,
    getState,
    onAddToWishListComplete,
    onNotOk,
    productSelection,
    textCreateWishListDescription
  ]);

  /**
   * Method that gets the updated wishlist details and triggers update wishlist action
   */
  const editWishListDetails = useCallback(() => {
    try {
      const payload = {
        wishlistId: wishListId,
        wishlistName: formData.wishListName,
        accessLevel: formData.accessLevel,
        wishlistDescription: wishList.spaceDescription
      };
      action('updateWishlist', payload).then(response => {
        if (response.ok === false) {
          onNotOk(response);
        } else {
          onEditWishListComplete();
        }
      });
    } catch (error) {
      console.log(error);
    }
  }, [
    action,
    formData.accessLevel,
    formData.wishListName,
    onEditWishListComplete,
    onNotOk,
    wishList.spaceDescription,
    wishListId
  ]);

  /**
   * On Submit Handler that determines to invoke either create or edit wishlist method
   */
  const onSubmit = useCallback(() => {
    if (wishListId === '') {
      createAndAddWishList();
    } else {
      editWishListDetails();
    }
  }, [createAndAddWishList, editWishListDetails, wishListId]);

  return (
    <Styled id="CreateWishListForm" css={css}>
      <div className="CreateWishListForm" role="region" aria-labelledby="AddToWishListModal__Header">
        <Form setInProgress={setInProgress} noValidate>
          {formError && <Alert id="Login__Alert" type="error" message={formError} />}

          <div className="CreateWishListForm__CreateWishListName">
            <label htmlFor="WishListName">{labelListName}</label>
            <input
              id="WishListName"
              data-testid="WishListName"
              type="text"
              name="wishListName"
              autoCapitalize="words"
              value={formData.wishListName}
              onChange={handleFormDataChange}
              required
              maxLength="254"
            />
            <span className="validationMessage"></span>
          </div>

          <h3 className="CreateWishListForm__PrivacySettingsHeading">{headingWishlistPrivacySettings}</h3>
          <div className="CreateWishListForm__AccessLevelContainer">
            <Radio
              id="WishListAccessLevel_Private"
              className="CreateWishListForm__ChoseAccessLevel"
              name="accessLevel"
              value={0}
              onChange={handleFormDataChange}
              onClick={noop}
              defaultChecked={formData.accessLevel === '0' ? true : false}
              labelText={
                <span>
                  {textPrivate}
                  <PasswordIcon />
                </span>
              }
            />
            <span className="CreateWishListForm__ChoseAccessLevelHelpText">{wishlistAccessLevelPrivateHelpText}</span>
          </div>

          <div className="CreateWishListForm__AccessLevelContainer">
            <Radio
              id="WishListAccessLevel_Group"
              className="CreateWishListForm__ChoseAccessLevel"
              name="accessLevel"
              value={2}
              onChange={handleFormDataChange}
              onClick={noop}
              defaultChecked={formData.accessLevel === '2' ? true : false}
              labelText={
                <span>
                  {textGroup}
                  <UsersIcon />
                </span>
              }
            />
            <span className="CreateWishListForm__ChoseAccessLevelHelpText">{wishlistAccessLevelGroupHelpText}</span>
          </div>

          <div className="CreateWishListForm__AccessLevelContainer">
            <Radio
              id="WishListAccessLevel_Shared"
              className="CreateWishListForm__ChoseAccessLevel"
              name="accessLevel"
              value={1}
              onChange={handleFormDataChange}
              onClick={noop}
              defaultChecked={formData.accessLevel === '1' ? true : false}
              labelText={
                <span>
                  {textShared}
                  <UnlockIcon />
                </span>
              }
            />
            <span className="CreateWishListForm__ChoseAccessLevelHelpText">{wishlistAccessLevelSharedHelpText}</span>
          </div>

          <div className="CreateWishListForm__CreateWishListFormButtons">
            <button type="submit" onClick={onSubmit} disabled={inProgress}>
              {actionSave}
            </button>
            <button type="button" disabled={inProgress} className="secondary" onClick={onCancel}>
              {actionCancel}
            </button>
          </div>
        </Form>
      </div>
    </Styled>
  );
};

CreateWishListForm.propTypes = {
  productSelection: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.shape({
        /** The id of the product */
        productId: PropTypes.string.isRequired,
        /** The sku id of the variant */
        skuId: PropTypes.string.isRequired,
        /** Display name of the product */
        productDisplayName: PropTypes.string,
        /** Sale price of the product variant */
        productSalePrice: PropTypes.number,
        /** Thumbnail image URI of the product variant */
        productThumbImageURL: PropTypes.string,
        /** Product variant property values */
        productVariantValues: PropTypes.arrayOf(
          PropTypes.shape({
            /** The variant type of the product */
            optionName: PropTypes.string.isRequired,
            /** The variant value of the product */
            optionValue: PropTypes.string.isRequired
          })
        ),
        /** Quantity to be added in the  wishlist */
        quantity: PropTypes.number
      }).isRequired
    ).isRequired,
    PropTypes.shape({
      /** The id of the product */
      productId: PropTypes.string.isRequired,
      /** The sku id of the variant */
      skuId: PropTypes.string.isRequired,
      /** Display name of the product */
      productDisplayName: PropTypes.string,
      /** Sale price of the product variant */
      productSalePrice: PropTypes.number,
      /** Thumbnail image URI of the product variant */
      productThumbImageURL: PropTypes.string,
      /** Product variant property values */
      productVariantValues: PropTypes.arrayOf(
        PropTypes.shape({
          /** The variant type of the product */
          optionName: PropTypes.string.isRequired,
          /** The variant value of the product */
          optionValue: PropTypes.string.isRequired
        })
      ),
      /** Quantity to be added in the wishlist */
      quantity: PropTypes.number
    }).isRequired
  ]),
  /** Callback function to be invoked with response of CreateWishList action call */
  onAddToWishListComplete: PropTypes.func.isRequired,
  /** Callback function to be invoked in case user cancels creating new purchase list */
  onCancel: PropTypes.func.isRequired
};

CreateWishListForm.defaultProps = {
  productSelection: undefined
};

export default CreateWishListForm;
