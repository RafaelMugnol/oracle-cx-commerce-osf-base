/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import {noop, t} from '@oracle-cx-commerce/utils/generic';

import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {SuccessMessage} from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/add-to-wish-list-success-message';
import css from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/list-wish-lists/styles.css';
import {getUpdateWishListItems} from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/utils';
import {getWishlists} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';

/**
 * Component that displays each Wish List Item
 * @param {*} props
 */
const WishListItem = props => {
  const {actionAdd = '', labelAddToWishListName = '', spaceId = '', spaceName = '', onAdd = noop} = props;

  return (
    <div className="AddToWishListModal__WishListRow">
      <div className="AddToWishListModal__WishListTitle">{spaceName}</div>
      <button
        type="button"
        className="AddToWishListModal__WishListAdd"
        data-testid={`addtoWishList-${spaceId}`}
        aria-label={t(labelAddToWishListName, {WishListName: spaceName})}
        onClick={() => onAdd(spaceId, spaceName)}
      >
        {actionAdd}
      </button>
    </div>
  );
};

/**
 * Component to show a list of user's wishlists
 *
 * @param props
 */
const ListWishLists = props => {
  const {action} = useContext(StoreContext);
  const {
    actionCreateNewWishList = '',
    productSelection = [],
    moveToWishList = false,
    onNewWishListClick = noop,
    onAddToWishListComplete = noop,
    setTriggerRemoveItem = noop
  } = props;

  const allWishlists = Object.values(useSelector(getWishlists) || {});

  // event handlers
  const onAdd = (id, name) => {
    const payload = {
      wishlistId: id,
      ...getUpdateWishListItems(productSelection)
    };

    if (moveToWishList) {
      setTriggerRemoveItem(false);
    }
    action('addProductToWishlist', payload).then(response => {
      if (response.ok) {
        onAddToWishListComplete({
          ok: true,
          data: {
            id,
            wishlistName: name
          },
          json: response.json
        });
      } else {
        onAddToWishListComplete(response);
      }
    });
  };

  return (
    <Styled id="ListWishLists" css={css}>
      <div className="ListWishLists" role="region" aria-labelledby="AddToWishListModal__Header">
        <SuccessMessage {...props} />
        <div className="ListWishLists__WishLists">
          {allWishlists.map(wishList => (
            <WishListItem key={wishList.spaceId} {...props} {...wishList} onAdd={onAdd} />
          ))}
        </div>

        <button type="button" className="ListWishLists__NewWishList" onClick={onNewWishListClick}>
          {actionCreateNewWishList}
        </button>
      </div>
    </Styled>
  );
};

ListWishLists.propTypes = {
  WishLists: PropTypes.objectOf(
    PropTypes.shape({
      /** The id of the wishlist */
      id: PropTypes.string.isRequired,
      /** Name of the wishlist */
      name: PropTypes.string.isRequired
    })
  ).isRequired,
  /** List of product information that need to be added to the wishlist */
  productSelection: PropTypes.oneOfType([
    PropTypes.arrayOf(
      PropTypes.shape({
        /** The id of the product */
        productId: PropTypes.string.isRequired,
        /** The sku id of the variant */
        skuId: PropTypes.string.isRequired,
        /** Display name of the product */
        productDisplayName: PropTypes.string,
        /** Sale price of the product variant */
        productSalePrice: PropTypes.number,
        /** Thumbnail image URI of the product variant */
        productThumbImageURL: PropTypes.string,
        /** Product variant property values */
        productVariantValues: PropTypes.arrayOf(
          PropTypes.shape({
            /** The variant type of the product */
            optionName: PropTypes.string.isRequired,
            /** The variant value of the product */
            optionValue: PropTypes.string.isRequired
          })
        ),
        /** Quantity to be added in the wishlist */
        quantity: PropTypes.number
      }).isRequired
    ).isRequired,
    PropTypes.shape({
      /** The id of the product */
      productId: PropTypes.string.isRequired,
      /** The sku id of the variant */
      skuId: PropTypes.string.isRequired,
      /** Display name of the product */
      productDisplayName: PropTypes.string,
      /** Sale price of the product variant */
      productSalePrice: PropTypes.number,
      /** Thumbnail image URI of the product variant */
      productThumbImageURL: PropTypes.string,
      /** Product variant property values */
      productVariantValues: PropTypes.arrayOf(
        PropTypes.shape({
          /** The variant type of the product */
          optionName: PropTypes.string.isRequired,
          /** The variant value of the product */
          optionValue: PropTypes.string.isRequired
        })
      ),
      /** Quantity to be added in the wishlist */
      quantity: PropTypes.number
    }).isRequired
  ]).isRequired,
  /** Callback function to be invoked on click new wishlist link */
  onNewWishListClick: PropTypes.func.isRequired,
  /** Callback function to be invoked with the response of updateWishListItems action */
  onAddToWishListComplete: PropTypes.func.isRequired
};

ListWishLists.defaultProps = {};

export default ListWishLists;
