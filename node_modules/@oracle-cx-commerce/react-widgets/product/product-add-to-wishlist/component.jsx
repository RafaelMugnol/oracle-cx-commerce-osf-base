/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useContext, useState} from 'react';
import {access, getWishlists} from '@oracle-cx-commerce/commerce-utils/selector/wishlists';
import {noop, t} from '@oracle-cx-commerce/utils/generic';
import {
  useAutoOpen,
  useComponentData
} from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/selectors';

import CheckCircleIcon from '@oracle-cx-commerce/react-components/icons/check-circle';
import ListIcon from '@oracle-cx-commerce/react-components/icons/list-alt';
import Modal from '@oracle-cx-commerce/react-components/modal';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/styles.css';
import {isAuthenticated} from '@oracle-cx-commerce/commerce-utils/selector';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import PropTypes from 'prop-types';

const WishListLoginModal = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/wish-list-login-modal')
);
const ListWishLists = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/list-wish-lists')
);
const CreateWishListForm = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/create-wish-list-form')
);
const AddToWishListSuccessMessage = React.lazy(() =>
  import(
    '@oracle-cx-commerce/react-widgets/product/product-add-to-wishlist/components/add-to-wish-list-success-message'
  )
);

const AddToWishListLink = props => (
  <button disabled={props.disabled} type="button" className="ProductAddToWishList__Link" onClick={props.handleClick}>
    <ListIcon className="ProductAddToWishList__Icon"></ListIcon>
    <span>{props.label}</span>
  </button>
);

/**
 * Widget that shows a "Add to WishList" link
 * Depends on selection of product (a combination of product and sku ids, or commerce item)
 * provided through `ProductSelectionContext`.
 *
 * @param props
 */
const ProductAddToWishList = props => {
  // contexts
  const productSelection = useComponentData();
  const {getState, action} = useContext(StoreContext);
  const {setTriggerRemoveItem = noop, productDisplayName} = productSelection;

  //initial state of the modal
  const initalModalView = {
    show: false,
    title: '',
    content: () => null,
    params: {}
  };

  // local states
  const [modalView, setModalView] = useState(initalModalView);

  // locales
  const {
    labelAddToWishList = '',
    actionMoveToWishList = '',
    alertItemAlreadyInWishlist = '',
    closeLinkAltText = '',
    headerLoginOrCreateAccount = '',
    headerAddToWishList = '',
    headerCreateWishList = '',
    headerAddedToWishList = '',
    alertMoveToWishListSuccess = '',
    moveToWishList = false
  } = props;

  //selector
  const authenticated = useSelector(isAuthenticated);

  // event handlers
  /**
   * Function to close the modal view
   */
  const onCancel = useCallback(() => {
    setModalView(initalModalView);
  }, [initalModalView]);

  /**
   * Success callback function that gets invoked after an item is moved to wishlist from cart
   * Removes item from the cart and success notification will be displayed
   */
  const onMoveToWishListComplete = useCallback(
    (productDisplayName, wishlistName) => {
      setTriggerRemoveItem(true);
      action('notify', {
        level: 'success',
        message: t(alertMoveToWishListSuccess, {
          PRODUCTNAME: productDisplayName,
          WISHLISTNAME: wishlistName
        })
      });
    },
    [action, alertMoveToWishListSuccess, setTriggerRemoveItem]
  );

  /**
   * Callback function that gets invoked after an item is added to wishlist
   */
  const onAddToWishListComplete = useCallback(
    response => {
      if (response.ok) {
        const {data = {}} = response;
        const {id = '', wishlistName = ''} = data;
        //If the item is already in the wishlist, response code is 200.1
        if (((response.json || {}).response || {}).code.indexOf('200') === 0) {
          setModalView(initalModalView);
          if (moveToWishList) {
            onMoveToWishListComplete(productDisplayName, wishlistName);
          } else {
            action('notify', {level: 'success', message: alertItemAlreadyInWishlist});
          }
        } else if (moveToWishList) {
          setModalView(initalModalView);
          onMoveToWishListComplete(productDisplayName, wishlistName);
        } else {
          setModalView({
            show: true,
            title: (
              <span>
                <CheckCircleIcon className="ProductAddToWishList__SuccessIcon"></CheckCircleIcon>
                <span id="AddToWishListModal__Header">{headerAddedToWishList}</span>
              </span>
            ),
            content: AddToWishListSuccessMessage,
            params: {
              wishListId: id
            }
          });
        }
      } else {
        action('notify', {level: 'error', message: response.error.message});
      }
    },
    [
      action,
      alertItemAlreadyInWishlist,
      headerAddedToWishList,
      initalModalView,
      moveToWishList,
      onMoveToWishListComplete,
      productDisplayName
    ]
  );

  /**
   * Function that gets invoked when create new wishlist is clicked
   */
  const onNewWishListClick = useCallback(() => {
    setModalView({
      show: true,
      title: <span id="AddToWishListModal__Header">{headerCreateWishList}</span>,
      content: CreateWishListForm,
      params: {
        onAddToWishListComplete,
        onCancel
      }
    });
  }, [onAddToWishListComplete, onCancel, headerCreateWishList]);

  /**
   * Function that gets invoked when add to wishlist is clicked
   *
   * If user is not authenticated, displays a login modal
   * If user is authenticated and if there are wishlists already exists, displays list wishlists modal
   * If user is authenticated and there are no wishlists, displays a create new wishlist modal
   */
  const onAddToWishListClick = useCallback(() => {
    if (!authenticated) {
      setModalView({
        show: true,
        title: <span id="AddToWishListModal__Header">{headerLoginOrCreateAccount}</span>,
        content: WishListLoginModal,
        params: {}
      });
    } else {
      const wishListSiteId = access(getState()).siteId || '';
      const payload = {
        siteId: wishListSiteId
      };
      action('listWishlists', payload).then(response => {
        if (response.ok) {
          const wishLists = getWishlists(getState());
          if (wishLists && Object.keys(wishLists).length) {
            setModalView({
              show: true,
              title: <span id="AddToWishListModal__Header">{headerAddToWishList}</span>,
              content: ListWishLists,
              params: {
                onAddToWishListComplete,
                onCancel,
                onNewWishListClick,
                setTriggerRemoveItem,
                moveToWishList
              }
            });
          } else {
            setModalView({
              show: true,
              title: <span id="AddToWishListModal__Header">{headerCreateWishList}</span>,
              content: CreateWishListForm,
              params: {
                onAddToWishListComplete,
                onCancel
              }
            });
          }
        } else {
          const {error = {}} = response;
          action('notify', {level: 'error', message: error.message});
        }
      });
    }
  }, [
    authenticated,
    headerLoginOrCreateAccount,
    getState,
    action,
    headerAddToWishList,
    onAddToWishListComplete,
    onCancel,
    onNewWishListClick,
    setTriggerRemoveItem,
    moveToWishList,
    headerCreateWishList
  ]);

  //custom hook to automatically open the modal when the user redirects after login
  useAutoOpen(onAddToWishListClick);

  return (
    <Styled id="ProductAddToWishList" css={css}>
      <div className="ProductAddToWishList">
        <AddToWishListLink
          disabled={!(productSelection.productId && productSelection.skuId)}
          label={moveToWishList ? actionMoveToWishList : labelAddToWishList}
          handleClick={onAddToWishListClick}
        ></AddToWishListLink>

        {typeof window !== 'undefined' && (
          <Modal
            show={modalView.show}
            onClose={onCancel}
            closeIconTitle={closeLinkAltText}
            closeArialLabel={closeLinkAltText}
            title={modalView.title}
          >
            <div aria-live="polite">
              <Suspense fallback={null}>
                <modalView.content productSelection={productSelection} {...modalView.params} {...props} />
              </Suspense>
            </div>
          </Modal>
        )}
      </div>
    </Styled>
  );
};

ProductAddToWishList.propTypes = {
  /** Flag to show move to wishlist label */
  moveToWishList: PropTypes.bool.isRequired
};

ProductAddToWishList.defaultProps = {};

export default ProductAddToWishList;
