/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
/* eslint-disable jsx-a11y/no-onchange */
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useContext, useCallback, useState} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/product/product-quantity/styles.css';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/product/product-quantity/selectors';
import Quantity from '@oracle-cx-commerce/react-components/quantity';
import {getTotalItemQuantityFromOtherSGs} from '@oracle-cx-commerce/react-components/utils/cart';

//constants
const ZERO_QTY = 0;

/**
 * Product Quantity widget
 */
const ProductQuantity = props => {
  // contexts
  const {getState} = useContext(StoreContext);
  const [validationMsg, setValidationMsg] = useState(null);
  const [quantity, setQuantity] = useState(1);

  //resources
  const {labelProductQuantity, textMaxOrderQtyExceeded, textMinOrderQtyRequired, alertTotalItemQuantityExceeded} =
    props;

  // selectors
  const {
    shippingGroups,
    selectedStore,
    isPickupInStoreOptionSelected,
    skuId,
    orderableQuantity,
    orderLimit,
    previousQty = 1,
    productId,
    setSelections
  } = useComponentData(getState());

  /**
   * Validates the quantity and updates the context.
   * @param  {Number} parsedQty
   */
  const validateAndNotifyQtyUpdate = useCallback(
    parsedQty => {
      if (skuId) {
        let validationText = null;
        const qtyAvailable = orderableQuantity && orderableQuantity > ZERO_QTY ? orderableQuantity : 1;
        const maxQtyAllowed = orderLimit && orderLimit < qtyAvailable ? orderLimit : qtyAvailable;
        const itemQtyInCart = getTotalItemQuantityFromOtherSGs({
          skuId,
          selectedStore,
          isPickupInStoreOptionSelected,
          shippingGroups
        });
        let qtyToUpdate = ZERO_QTY;
        if (parsedQty <= 0) {
          validationText = t(textMinOrderQtyRequired, {quantity: 1});
        } else if (parsedQty > maxQtyAllowed) {
          validationText = t(textMaxOrderQtyExceeded, {quantity: maxQtyAllowed});
        } else if (parsedQty + itemQtyInCart > maxQtyAllowed) {
          validationText = t(alertTotalItemQuantityExceeded, {
            stockAvailable: maxQtyAllowed,
            itemQuantityInCart: itemQtyInCart
          });
        } else {
          qtyToUpdate = parsedQty;
        }
        // update Quantity only when it is changed
        if (previousQty !== qtyToUpdate) {
          setSelections(prevState => {
            return {
              ...prevState,
              qty: qtyToUpdate
            };
          });
        }
        if (validationMsg !== validationText) {
          setValidationMsg(validationText);
        }
      }
    },
    [
      alertTotalItemQuantityExceeded,
      isPickupInStoreOptionSelected,
      orderLimit,
      orderableQuantity,
      previousQty,
      selectedStore,
      setSelections,
      shippingGroups,
      skuId,
      textMaxOrderQtyExceeded,
      textMinOrderQtyRequired,
      validationMsg
    ]
  );

  /**
   * Handler for quantity changed
   * @param  {Event} event
   */
  const handleQuantityChanged = useCallback(
    parsedQty => {
      setQuantity(parsedQty);
      setSelections(prevState => {
        return {
          ...prevState,
          selectedQuantity: parsedQty
        };
      });
      validateAndNotifyQtyUpdate(parsedQty);
    },
    [setSelections, validateAndNotifyQtyUpdate]
  );

  validateAndNotifyQtyUpdate(quantity);

  return (
    <Styled id="ProductQuantity" css={css}>
      <div className="ProductQuantity__Wrapper">
        <Quantity
          label={labelProductQuantity}
          id={`ProductQuantity-${productId}`}
          name={`ProductQuantity-${productId}`}
          data-testid={`ProductQuantity-${productId}`}
          disabled={!skuId}
          handleQuantityChanged={handleQuantityChanged}
          className="ProductQuantity"
          value={quantity}
        />
        {validationMsg &&
          skuId &&
          (isPickupInStoreOptionSelected === false ||
            (isPickupInStoreOptionSelected === true && selectedStore.locationId)) && (
            <span className="validationMsg" aria-label={validationMsg} role="alert" aria-live="assertive">
              {validationMsg}
            </span>
          )}
      </div>
    </Styled>
  );
};

export default ProductQuantity;
