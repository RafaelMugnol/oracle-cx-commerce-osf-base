/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {getConfigurationRepository} from '@oracle-cx-commerce/commerce-utils/selector';

/**
 * This function should be used when the layout isn't returned with a configuration. For example, when the
 * initializeConfiguration request doesn't pass 'layout' in the expand parameter.
 *
 * If the layout for the currently loaded configuration doesn't exist in the application state, the
 * getConfigurationLayout action will be invoked. If the layout contains array set data, the
 * getArraySetConfigurationItems action will be invoked.
 *
 * @param store
 *   The application store.
 * @param productFamily
 *   The productFamily for the current configuration.
 * @param productLine
 *   The productLine for the current configuration.
 * @param model
 *   The model for the current configuration.
 * @param onNotOk
 *   Callback function to set configurator action response error.
 * @param onOk
 *   Callback function to reset configurator action response.
 */
export const populateLayout = (store, onOk, onNotOk, modelData) => {
  const {getState, action} = store;
  const {productFamily, productLine, model} = modelData;
  const configurationRepository = getConfigurationRepository(getState());
  const {cacheInstanceId} = configurationRepository.configurations.current;

  /**
   * Invoke the getArraySetConfigurationItems action with the necessary parameters.
   */
  const getArraySetConfigurationItems = currentLayout => {
    const arraySetVarNames = currentLayout['arraySetVariableNames'].toString();

    action('getArraySetConfigurationItems', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      arraySetVarNames
    }).then(response => {
      if (!response.ok) {
        onNotOk(response);
      } else {
        onOk();
      }
    });
  };

  if (
    !(
      configurationRepository &&
      configurationRepository.configurations &&
      configurationRepository.configurations.current &&
      configurationRepository.layouts &&
      configurationRepository.layouts[configurationRepository.configurations.current.layoutNamespace] &&
      configurationRepository.layouts[configurationRepository.configurations.current.layoutNamespace][
        configurationRepository.configurations.current.layoutFlowVariableName
      ]
    )
  ) {
    const layoutLink = configurationRepository.configurations.current.links.find(item => item.rel === 'layout');
    const hierLevel = layoutLink.href.charAt(layoutLink.href.length - 1);

    action('getConfigurationLayout', {
      productFamily,
      productLine,
      model,
      flowVarName: configurationRepository.configurations.current.layoutFlowVariableName,
      hierLevel
    }).then(response => {
      if (!response.ok) {
        onNotOk(response);
      } else {
        const currentLayout =
          response.delta.configurationRepository.layouts[
            configurationRepository.configurations.current.layoutNamespace
          ][configurationRepository.configurations.current.layoutFlowVariableName];

        if (currentLayout['arraySetVariableNames'].length > 0) {
          getArraySetConfigurationItems(currentLayout);
        } else {
          onOk();
        }
      }
    });
  } else {
    const currentLayout =
      configurationRepository.layouts[configurationRepository.configurations.current.layoutNamespace][
        configurationRepository.configurations.current.layoutFlowVariableName
      ];

    if (currentLayout['arraySetVariableNames'].length > 0) {
      getArraySetConfigurationItems(currentLayout);
    } else {
      onOk();
    }
  }
};

/**
 * Returns a configData object containing only attributes
 * that are updatable
 *
 * @return {Object} A configData object
 */
export const getUpdatedConfigData = configData => {
  const updatedConfigData = {...configData};

  //TODO: also remove non-updatable attributes from array set items?
  Object.keys(updatedConfigData).forEach(attributeName => {
    if (
      updatedConfigData[attributeName] &&
      updatedConfigData._state.attributes[attributeName] &&
      !updatedConfigData._state.attributes[attributeName].updatable
    ) {
      delete updatedConfigData[attributeName];
    }
  });

  return updatedConfigData;
};
