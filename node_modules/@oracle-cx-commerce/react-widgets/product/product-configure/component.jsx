/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useCallback, useContext, useState, useEffect, useRef, Suspense} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Alert from '@oracle-cx-commerce/react-components/alert';
import Modal from '@oracle-cx-commerce/react-components/modal';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {
  EXPAND,
  POPULATE_PICK_LIST_ITEMS,
  EXCLUDE_LAYOUT_PROPERTIES
} from '@oracle-cx-commerce/react-widgets/product/product-configure/constants';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/styles.css';
import {usePageData} from '@oracle-cx-commerce/react-widgets/product/product-configure/selectors';
import {populateLayout} from '@oracle-cx-commerce/react-widgets/product/product-configure/utils';

const LayoutCanvas = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/product/product-configure/components/layout-canvas')
);

const ERROR = 'error';

/**
 * This is the top-level product configure component. It will use the configurations repository
 * store to render the layout and corresponding actions and information.
 *
 * @param {String} props.actionArraySetAdd
 *   The text to be displayed on the add button.
 * @param {String} props.actionActionsAddToCart
 *   The text to be displayed on the add to cart button.
 * @param {String} props.actionInitializeConfiguration
 *   The text to be displayed on the initialize configuration button.
 * @param {String} props.actionActionsNext
 *   The text to be displayed on the next page button.
 * @param {String} props.actionActionsPrevious
 *   The text to be displayed on the previous page button.
 * @param {String} props.actionArraySetRemove
 *   The text to be displayed on the remove button.
 * @param {String} props.actionActionsUpdate
 *   The text to be displayed on the update configuration button.
 * @param {String} props.headingArraySetAction
 *   The text to be displayed as the heading for the Action column.
 * @param {String} props.headingArraySetItemId
 *   The text to be displayed as the heading for the Item Id column
 * @param {String} props.headingArraySetItems
 *   The text to be displayed as the caption for the array set table.
 * @param {String} props.headingArraySetAttribute
 *   The text to be displayed as the heading for the Attribute column.
 * @param {String} props.headingBillOfMaterials
 *   The text to be displayed as the heading for the BOM table.
 * @param {String} props.headingMandatoryParts
 *   The text to be displayed as the heading for the Mandatory Parts table.
 * @param {String} props.headingRecommendedParts
 *   The text to be displayed as the heading for the Recommended Parts table.
 * @param {String} props.textPleaseSelect
 *   The text to be displayed as the first option in a menu control.
 * @param {String} props.labelConfigureInSystemShowHideNavigationInfo
 *   The text to be displayed as the label for the sys navigation info button.
 * @param {String} props.textArraySetAddItem
 *   The text to be displayed as the screen reader label for an array set add button.
 * @param {String} props.textArraySetRemoveItem
 *   The text to be displayed as the screen reader label for an array set item remove button.
 */
const ProductConfigure = ({
  className = 'secondary',
  actionArraySetAdd,
  actionActionsAddToCart,
  actionActionsUpdateCartItem,
  actionInitializeConfiguration,
  actionInitializeReconfiguration,
  actionActionsNext,
  actionActionsPrevious,
  actionArraySetRemove,
  actionActionsUpdate,
  actionCancel,
  headingArraySetAction,
  headingArraySetItemId,
  headingArraySetItems,
  headingArraySetAttribute,
  headingBillOfMaterials,
  headingMandatoryParts,
  headingRecommendedParts,
  headingConfigure,
  headingReconfigure,
  textPleaseSelect,
  labelConfigureInSystemShowHideNavigationInfo,
  textArraySetAddItem,
  textArraySetRemoveItem,
  closeLinkAltText
}) => {
  const store = useContext(StoreContext);
  const {action, getState} = store;

  // selectors
  const {
    skuId,
    productFamily,
    productLine,
    model,
    currencyCode,
    locale,
    configurationMetadata,
    configurable,
    commerceItemId,
    configuratorId,
    productDisplayName,
    productThumbImageURL
  } = usePageData(getState());

  const isReconfiguration = configuratorId ? true : false;

  // state
  const [actionInProgress, setActionInProgress] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);

  /**
   * Returns true if Configure button should be disabled
   */
  const isConfigureButtonDisabled = () => {
    return actionInProgress;
  };

  /**
   * When the action completes, set configure in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  // Local state to show action result in alert
  const [actionResponse, setActionResponse] = useState({type: '', message: ''});

  const configureButtonRef = useRef(null);

  useEffect(() => {
    if (
      actionResponse.message &&
      configureButtonRef &&
      configureButtonRef.current &&
      configureButtonRef.current.scrollIntoView
    ) {
      configureButtonRef.current.scrollIntoView();
    }
  }, [actionResponse.message]);

  /**
   * Callback method that will update the actionResponse object when a server-side
   * error occurs when performing an action.
   */
  const onNotOk = useCallback(({error = {}}) => {
    setActionResponse({type: ERROR, message: error.message});
  }, []);

  /**
   * Callback method that will reset the actionResponse object after performing a successful action.
   */
  const onOk = useCallback(() => {
    setActionResponse({type: '', message: ''});
  }, []);

  /**
   * Method to close the modal dialog
   */
  const closeModal = useCallback(() => {
    setModalOpen(false);
    action('resetConfiguration', {});
  }, [action]);

  /**
   * Click handler for the product configure button. Dispatches the
   * initializeConfiguration action.
   */
  const handleInitializeConfiguration = () => {
    setModalOpen(true);
    setActionInProgress(true);
    setActionResponse({type: '', message: ''});

    const params = {
      productFamily,
      productLine,
      model,
      configurationMetadata,
      locale,
      currencyCode,
      populatePickListItems: POPULATE_PICK_LIST_ITEMS,
      excludeLayoutProperties: EXCLUDE_LAYOUT_PROPERTIES,
      expand: EXPAND
    };

    const configurationPromise = isReconfiguration
      ? action('initializeReconfiguration', {
          configId: configuratorId,
          ...params
        })
      : action('initializeConfiguration', params);

    configurationPromise
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else if (!EXPAND.includes('layout')) {
          populateLayout(store, onOk, onNotOk, {productFamily, productLine, model});
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  if (!isReconfiguration && !configurable) return null;

  const buttonLabel = isReconfiguration ? actionInitializeReconfiguration : actionInitializeConfiguration;
  const modalHeading = isReconfiguration ? headingReconfigure : headingConfigure;

  const cssClassName = `${className ? className : ''} ${actionInProgress ? 'ProductConfigure--inProgress' : ''}`;

  return (
    <ConfiguratorContext.Provider
      value={{
        isReconfiguration,
        commerceItemId,
        productDisplayName,
        productThumbImageURL,
        onNotOk,
        onOk,
        currencyCode,
        locale,
        actionResponse,
        setActionResponse,
        actionInProgress,
        setActionInProgress,
        closeModal,
        resources: {
          actionCancel,
          actionActionsUpdate,
          actionActionsNext,
          actionActionsPrevious,
          actionActionsAddToCart,
          actionActionsUpdateCartItem,
          actionArraySetAdd,
          actionArraySetRemove,
          headingBillOfMaterials,
          headingMandatoryParts,
          headingRecommendedParts,
          headingArraySetAttribute,
          headingArraySetAction,
          headingArraySetItems,
          headingArraySetItemId,
          textPleaseSelect,
          labelConfigureInSystemShowHideNavigationInfo,
          textArraySetRemoveItem,
          textArraySetAddItem
        }
      }}
    >
      <Styled id="ProductConfigure" css={css}>
        <div className="ProductConfigure__Container">
          <button
            type="button"
            ref={configureButtonRef}
            disabled={isConfigureButtonDisabled()}
            onClick={handleInitializeConfiguration}
            className={cssClassName}
          >
            {buttonLabel}
          </button>

          {actionResponse.message && (
            <div className="ProductConfigure__ContainerActionResponse">
              <Alert
                id={`ProductConfigure__ContainerActionResponse-${skuId}`}
                type={actionResponse.type}
                message={actionResponse.message}
              />
            </div>
          )}

          <Modal
            className="ProductConfigure__Modal"
            show={modalOpen}
            onClose={closeModal}
            closeIconTitle={closeLinkAltText}
            closeArialLabel={closeLinkAltText}
            title={modalHeading}
          >
            <Suspense fallback={null}>
              <LayoutCanvas />
            </Suspense>
          </Modal>
        </div>
      </Styled>
    </ConfiguratorContext.Provider>
  );
};

ProductConfigure.propTypes = {};

export default ProductConfigure;
