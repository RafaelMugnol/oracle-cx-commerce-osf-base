/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {useContext} from 'react';
import {
  getProduct,
  getSku,
  getCurrentPriceListGroup,
  getRequestContext
} from '@oracle-cx-commerce/commerce-utils/selector';
import {ProductContext, ContainerContext, CartItemContext} from '@oracle-cx-commerce/react-ui/contexts';

/**
 * Returns data required by the component by invoking selectors
 *
 * @param  {String} state The Redux state object
 * @return {Object} The data required by invoking component
 */
export const usePageData = state => {
  // contexts
  const productContext = useContext(ProductContext),
    containerContext = useContext(ContainerContext),
    cartItemContext = useContext(CartItemContext);

  // selectors
  const priceListGroup = getCurrentPriceListGroup(state);
  const {currencyCode} = priceListGroup.currency;
  const {locale} = getRequestContext(state);

  let pageData = {};
  let skuId = '',
    commerceItemId = '';

  if (productContext && containerContext) {
    const {id: productId} = productContext;
    ({selections: {skuId = null} = {}} = containerContext);

    if (skuId) {
      const product = getProduct(state, {productId});
      const sku = getSku(state, {skuId});

      let thumbImageURLs = [null];

      // Thumbnail image
      if (sku.thumbImageURLs && sku.thumbImageURLs.length) {
        ({thumbImageURLs} = sku);
      } else if (product.thumbImageURLs && product.thumbImageURLs.length) {
        ({thumbImageURLs} = product);
      }

      pageData = {
        ...pageData,
        productId,
        productDisplayName: sku.displayName ? sku.displayName : product.displayName,
        productThumbImageURL: thumbImageURLs[0]
      };
    }
  }

  if (cartItemContext) {
    const {commerceItem: {configuratorId = '', primaryThumbImageURL = '', displayName = ''} = {}} = cartItemContext;
    ({commerceItem: {catRefId: skuId = '', id: commerceItemId = ''} = {}} = cartItemContext);

    pageData = {
      ...pageData,
      configuratorId,
      productDisplayName: displayName,
      productThumbImageURL: primaryThumbImageURL
    };
  }

  // Get data from SKU or product
  const {productFamily, productLine, model, configurationMetadata, configurable} = getSku(state, {skuId});
  let formattedConfigurationMetadata = {};

  // The format of the configurationMetadata in the repository store is an array but
  // the CPQ request payloads require this to be an object.
  if (configurationMetadata && configurationMetadata.length > 0) {
    formattedConfigurationMetadata = configurationMetadata.reduce((allAttributes, attribute) => {
      allAttributes[attribute.name] = attribute.value;

      return allAttributes;
    }, {});
  }

  return {
    ...pageData,
    commerceItemId,
    skuId,
    productFamily,
    productLine,
    model,
    currencyCode,
    locale,
    configurationMetadata: formattedConfigurationMetadata,
    configurable
  };
};
