/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import FormControl from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import {t} from '@oracle-cx-commerce/utils/generic';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/array-set/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render an array-set UI control.
 *
 * @param {String} props.cacheInstanceId
 *   The cacheInstanceId from the configurations repository store.
 * @param {Object} props.configData
 *   The configData object from the configurations repository store.
 * @param {Object} props.component
 *   The component to be processed. This will be passed from the parent component.
 */
const ArraySet = ({cacheInstanceId, productFamily, productLine, model, configData, component}) => {
  const {action} = useContext(StoreContext);
  const {resources = {}, actionInProgress, setActionInProgress, onNotOk, onOk} = useContext(ConfiguratorContext);

  const {
    resourceVariableName: {variableName},
    sizeAttrVarName
  } = component;

  /**
   * When the action completes, set action in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  const prefixedArraySetVariableName = `${variableName}`;

  /**
   * Click handler for the add array set item action. Dispatches the
   * addArraySetConfigurationItem action.
   */
  const handleAddArraySetItem = () => {
    setActionInProgress(true);
    action('addArraySetConfigurationItem', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      arraySetVarName: variableName,
      sizeAttrVarName
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   * Click handler for the remove array set item action. Dispatches the
   * deleteArraySetConfigurationItem action.
   */
  const handleRemoveArraySetItem = removeIndex => {
    setActionInProgress(true);
    action('deleteArraySetConfigurationItem', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      arraySetVarName: variableName,
      sizeAttrVarName,
      removeIndex
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  return (
    <Styled id="ConfiguratorArraySet" css={css}>
      <div className="ConfiguratorArraySet__Container">
        <table className="ConfiguratorArraySet__Table">
          <caption className="ProductConfigure--screenReaderText">{resources.headingArraySetItems}</caption>
          <thead>
            <tr>
              <th scope="col">{resources.headingArraySetItemId}</th>
              <th scope="col">{resources.headingArraySetAttribute}</th>
              <th scope="col">{resources.headingArraySetAction}</th>
            </tr>
          </thead>
          <tbody>
            {configData[prefixedArraySetVariableName] &&
              configData[prefixedArraySetVariableName].items &&
              configData[prefixedArraySetVariableName].items.map(item => {
                return (
                  <tr key={item._rowKey}>
                    <th scope="row">{item._index}</th>
                    <td>
                      {component &&
                        component.components &&
                        component.components.items &&
                        component.components.items.map(childItem => {
                          return (
                            <FormControl
                              key={childItem.id}
                              component={childItem}
                              arraySetItemIndex={item._index}
                              prefixedArraySetVariableName={prefixedArraySetVariableName}
                            />
                          );
                        })}
                      {prefixedArraySetVariableName &&
                        configData[prefixedArraySetVariableName] &&
                        configData[prefixedArraySetVariableName].items &&
                        configData[prefixedArraySetVariableName].items[item._index] &&
                        configData[prefixedArraySetVariableName].items[item._index]._state &&
                        configData[prefixedArraySetVariableName].items[item._index]._state.messages &&
                        configData[prefixedArraySetVariableName].items[item._index]._state.messages.map(message => {
                          return (
                            <span
                              key={message}
                              className="ConfiguratorArraySet__TableRow--error"
                              aria-label={message}
                              role="alert"
                              aria-live="assertive"
                            >
                              {message}
                            </span>
                          );
                        })}
                    </td>
                    <td>
                      <button
                        type="button"
                        className="secondary ConfiguratorArraySet__TableRowRemove"
                        disabled={actionInProgress}
                        onClick={() => handleRemoveArraySetItem(item._index)}
                      >
                        {resources.actionArraySetRemove}
                        <span className="ProductConfigure--screenReaderText">
                          {' '}
                          {t(resources.textArraySetRemoveItem, {
                            itemIndex: item._index,
                            arraySetName: variableName
                          })}
                        </span>
                      </button>
                    </td>
                  </tr>
                );
              })}
          </tbody>
          <tfoot>
            <tr>
              <td colSpan="3">
                <button type="button" className="secondary" disabled={actionInProgress} onClick={handleAddArraySetItem}>
                  {resources.actionArraySetAdd}
                  <span className="ProductConfigure--screenReaderText">
                    {' '}
                    {t(resources.textArraySetAddItem, {
                      arraySetName: variableName
                    })}
                  </span>
                </button>
              </td>
            </tr>
          </tfoot>
        </table>
      </div>
    </Styled>
  );
};

ArraySet.propTypes = {
  /** The cacheInstanceId from the configurations repository store. */
  cacheInstanceId: PropTypes.string,
  /** The configData object from the configurations repository store. */
  configData: PropTypes.shape(Object).isRequired,
  /** productFamily attribute of the sku */
  productFamily: PropTypes.string,
  /** productLine attribute of the sku */
  productLine: PropTypes.string,
  /** model attribute of the sku */
  model: PropTypes.string,
  /** The component to be processed. This will be passed from the parent component. */
  component: PropTypes.shape({
    variableName: PropTypes.string,
    sizeAttrVarName: PropTypes.string
  }).isRequired
};

ArraySet.defaultProps = {
  cacheInstanceId: undefined,
  productFamily: undefined,
  productLine: undefined,
  model: undefined
};

export default connect(getConfiguration)(ArraySet);
