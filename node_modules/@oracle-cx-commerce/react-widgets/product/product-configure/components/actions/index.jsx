/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext} from 'react';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import ActionButton from '@oracle-cx-commerce/react-widgets/product/product-configure/components/actions/action-button';
import {
  EXPAND,
  POPULATE_PICK_LIST_ITEMS,
  EXCLUDE_LAYOUT_PROPERTIES
} from '@oracle-cx-commerce/react-widgets/product/product-configure/constants';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/actions/styles.css';
import {getUpdatedConfigData, populateLayout} from '@oracle-cx-commerce/react-widgets/product/product-configure/utils';
import PropTypes from 'prop-types';

/**
 * This component will render all available configuration actions.
 *
 * @param {String} props.cacheInstanceId
 *   The cacheInstanceId from the configurations repository store.
 * @param {Object} props.configData
 *   The configData object from the configurations repository store.
 */
const Actions = ({cacheInstanceId, configData, productFamily, productLine, model}) => {
  const {action, getState} = useContext(StoreContext);
  const {
    resources = {},
    actionInProgress,
    setActionInProgress,
    onNotOk,
    onOk,
    isReconfiguration,
    commerceItemId,
    closeModal
  } = useContext(ConfiguratorContext);

  const {
    locale,
    currency,
    actionActionsUpdate,
    actionActionsAddToCart,
    actionActionsUpdateCartItem,
    actionActionsPrevious,
    actionActionsNext,
    actionCancel
  } = resources;

  /**
   * When the action completes, set action in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  /**
   * Returns true if action button should be disabled.
   */
  const isActionButtonDisabled = action => {
    return !action.enabled || actionInProgress;
  };

  /**
   * Click handler for the update action. Dispatches the updateConfiguration action.
   */
  const handleUpdate = () => {
    const updatedConfigData = getUpdatedConfigData(configData);

    setActionInProgress(true);
    onOk();
    action('updateConfiguration', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      configData: updatedConfigData
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   * Click handler for the next action. Dispatches the loadNextConfigurationPage action.
   */
  const handleNext = () => {
    const updateConfigData = getUpdatedConfigData(configData);

    setActionInProgress(true);
    onOk();
    action('loadNextConfigurationPage', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      op: 'next',
      configData: updateConfigData,
      populatePickListItems: POPULATE_PICK_LIST_ITEMS,
      excludeLayoutProperties: EXCLUDE_LAYOUT_PROPERTIES,
      expand: EXPAND,
      locale,
      currency
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          if (!EXPAND.includes('layout')) {
            populateLayout(getState(), action, productFamily, productLine, model, onNotOk, onOk);
          }
          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   * Click handler for the previous action. Dispatches the loadPreviousConfigurationPage action.
   */
  const handlePrevious = () => {
    setActionInProgress(true);
    onOk();
    action('loadPreviousConfigurationPage', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      op: 'previous',
      populatePickListItems: POPULATE_PICK_LIST_ITEMS,
      excludeLayoutProperties: EXCLUDE_LAYOUT_PROPERTIES,
      expand: EXPAND,
      locale,
      currency
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          if (!EXPAND.includes('layout')) {
            populateLayout(getState(), action, productFamily, productLine, model, onNotOk, onOk);
          }

          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   * Click handler for the next action. Dispatches the addConfigurationToCart action.
   */
  const handleAddToCart = () => {
    setActionInProgress(true);
    onOk();

    if (isReconfiguration) {
      action('updateConfigurationToCommerceItem', {
        cacheInstanceId,
        productFamily,
        productLine,
        model,
        commerceItemId
      })
        .then(response => {
          if (!response.ok) {
            onNotOk(response);
          } else {
            onOk();
            closeModal();
            action('resetConfiguration', {});
          }
        })
        .finally(onComplete);
    } else {
      action('addConfigurationToCart', {
        cacheInstanceId,
        productFamily,
        productLine,
        model
      })
        .then(response => {
          if (!response.ok) {
            onNotOk(response);
          } else {
            onOk();
            closeModal();
            action('resetConfiguration', {});
          }
        })
        .finally(onComplete);
    }
  };

  return (
    <Styled id="ConfiguratorActions" css={css}>
      {configData && configData._state && configData._state.actions && (
        <div className="ConfiguratorActions__Container">
          {configData._state.actions['_update'] && configData._state.actions['_update'].visible && (
            <ActionButton
              buttonText={actionActionsUpdate}
              handler={handleUpdate}
              isDisabled={isActionButtonDisabled(configData._state.actions['_update'])}
            />
          )}
          {configData._state.actions['_next'] && configData._state.actions['_next'].visible && (
            <ActionButton
              buttonText={actionActionsNext}
              handler={handleNext}
              isDisabled={isActionButtonDisabled(configData._state.actions['_next'])}
            />
          )}
          {configData._state.actions['_previous'] && configData._state.actions['_previous'].visible && (
            <ActionButton
              buttonText={actionActionsPrevious}
              handler={handlePrevious}
              isDisabled={isActionButtonDisabled(configData._state.actions['_previous'])}
            />
          )}
          {configData._state.actions['_integration_addToCart'] &&
            configData._state.actions['_integration_addToCart'].visible && (
              <ActionButton
                isPrimary={true}
                buttonText={isReconfiguration ? actionActionsUpdateCartItem : actionActionsAddToCart}
                handler={handleAddToCart}
                isDisabled={isActionButtonDisabled(configData._state.actions['_integration_addToCart'])}
              />
            )}
          <ActionButton buttonText={actionCancel} handler={closeModal} />
        </div>
      )}
    </Styled>
  );
};

Actions.propTypes = {
  /** The cacheInstanceId from the configurations repository store. */
  cacheInstanceId: PropTypes.string.isRequired,
  /** The configData object from the configurations repository store. */
  configData: PropTypes.instanceOf(Object).isRequired,
  /** productFamily attribute of the sku */
  productFamily: PropTypes.string,
  /** productLine attribute of the sku */
  productLine: PropTypes.string,
  /** model attribute of the sku */
  model: PropTypes.string
};

Actions.defaultProps = {
  productFamily: undefined,
  productLine: undefined,
  model: undefined
};

export default connect(getConfiguration)(Actions);
