/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useState, useEffect} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/read-only/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render a read-only UI control.
 *
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {Boolean} props.displayAsHTML
 *  If true the contents of the read only control should be displayed as HTML.
 *  This will be passed from the parent component.
 */
const ReadOnly = ({uniqueId, name, defaultValue = '', displayAsHTML = false}) => {
  // Maintain the current value of the read only attribute.
  const [currentValue, setCurrentValue] = useState('');

  // Update the 'currentValue' state every time the configData object is updated.
  useEffect(() => {
    setCurrentValue(defaultValue);
  }, [defaultValue]);

  const contentDiv = displayAsHTML ? (
    // eslint-disable-next-line react/no-danger
    <div id={uniqueId} dangerouslySetInnerHTML={{__html: currentValue}}></div>
  ) : (
    <div id={uniqueId}>{currentValue}</div>
  );

  return (
    <Styled id="ConfiguratorReadOnly" css={css}>
      <div className="ConfiguratorReadOnly__Container">
        <label htmlFor={uniqueId}>{name}</label>
        {contentDiv}
      </div>
    </Styled>
  );
};

ReadOnly.propTypes = {
  /** A unique id for the rendered DOM element, it should be unique within
   * the HTML document. This will be passed from the parent component.
   */
  uniqueId: PropTypes.string.isRequired,
  /**
   * A display name (label) for the form control. This will be passed from the
   * parent component.
   */
  name: PropTypes.string.isRequired,
  /**
   * The initial value for the form control. It is retrieved from the configData
   * object from the configurations repository store. This will be passed from
   * the parent component. See:
   * https://reactjs.org/docs/uncontrolled-components.html#default-values
   */
  defaultValue: PropTypes.string,
  /**
   * If true the contents of the read only control should be displayed as HTML.
   * This will be passed from the parent component.
   */
  displayAsHTML: PropTypes.bool
};

ReadOnly.defaultProps = {
  defaultValue: '',
  displayAsHTML: false
};

export default ReadOnly;
