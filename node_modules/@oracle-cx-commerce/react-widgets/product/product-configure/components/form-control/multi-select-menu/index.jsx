/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React from 'react';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import MultiSelectMenuGrid from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/multi-select-menu/multi-select-menu-grid';
import MultiSelectCheckboxHorizontal from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/multi-select-menu/multi-select-checkbox-horizontal';
import MultiSelect from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/multi-select-menu/multi-select';
import PropTypes from 'prop-types';

/**
 * This component will render a multi select UI control.
 *
 * @param {Object} props.inputRef
 *   A reference to the DOM element created in the render method. This will be
 *   passed from the parent component.
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.variableName
 *   The variable name used to connnect a form control to its corresponding value in
 *   configData . This will be passed from the parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {Function} props.handleChange
 *   The function to be called when a user has changed the value of the form control.
 *   This will be passed from the parent component.
 * @param {Boolean} props.updatable
 *   If false the form control should be disabled / read only. This will be
 *   passed from the parent component.
 * @param {Boolean} props.required
 *   If true the form control should be a mandatory / required field. This will be
 *   passed from the parent component.
 * @param {Array} props.menuItems
 *   The collection of menu items to be displayed by the form control. This will be
 *   passed from the parent component
 * @param {String} props.displayTypeValue
 *   The display type of the form control e.g. Grid, Radio Button Horizontal. This will be
 *   passed from the parent component.
 */
const MultiSelectMenu = ({
  inputRef,
  uniqueId,
  name,
  variableName,
  defaultValue,
  handleChange,
  updatable,
  required,
  menuItems,
  displayTypeValue
}) => {
  if (displayTypeValue) {
    switch (displayTypeValue) {
      case 'Grid': {
        return (
          <MultiSelectMenuGrid
            inputRef={inputRef}
            uniqueId={uniqueId}
            name={name}
            variableName={variableName}
            defaultValue={defaultValue}
            handleChange={handleChange}
            updatable={updatable}
            required={required}
            menuItems={menuItems}
          ></MultiSelectMenuGrid>
        );
      }
      case 'Checkbox Horizontal': {
        return (
          <MultiSelectCheckboxHorizontal
            inputRef={inputRef}
            uniqueId={uniqueId}
            name={name}
            variableName={variableName}
            defaultValue={defaultValue}
            handleChange={handleChange}
            updatable={updatable}
            required={required}
            menuItems={menuItems}
          ></MultiSelectCheckboxHorizontal>
        );
      }
      default: {
        return (
          <MultiSelect
            inputRef={inputRef}
            uniqueId={uniqueId}
            name={name}
            variableName={variableName}
            defaultValue={defaultValue}
            handleChange={handleChange}
            updatable={updatable}
            required={required}
            menuItems={menuItems}
          ></MultiSelect>
        );
      }
    }
  }
};

MultiSelectMenu.propTypes = {
  /**
   * A reference to the DOM element created in the render method.
   * This will be passed from the parent component.
   */
  inputRef: PropTypes.shape(Object),
  /**
   * A unique id for the rendered DOM element, it should be unique within the HTML
   * document. This will be passed from the parent component.
   */
  uniqueId: PropTypes.string.isRequired,
  /**
   * A display name (label) for the form control. This will be passed from the
   * parent component.
   */
  name: PropTypes.string.isRequired,
  /**
   * The variable name used to connect a form control to its corresponding value in
   * configData . This will be passed from the parent component.
   */
  variableName: PropTypes.string.isRequired,
  /**
   * The initial value for the form control. It is retrieved from the configData
   * object from the configurations repository store. This will be passed from
   * the parent component. See:
   * https://reactjs.org/docs/uncontrolled-components.html#default-values
   */
  defaultValue: PropTypes.arrayOf(PropTypes.string).isRequired,
  /**
   * The function to be called when a user has changed the value of the form control.
   * This will be passed from the parent component.
   */
  handleChange: PropTypes.func.isRequired,
  /**
   * If false the form control should be disabled / read only. This will be
   * passed from the parent component.
   */
  updatable: PropTypes.bool.isRequired,
  /**
   * If true the form control should be a mandatory / required field. This will be
   * passed from the parent component.
   */
  required: PropTypes.bool.isRequired,
  /**
   * The collection of menu items to be displayed by the form control. This will be
   * passed from the parent component
   */
  menuItems: PropTypes.arrayOf(Object).isRequired,
  /**
   * The display type of the form control e.g. Grid, Radio Button Horizontal. This will be
   * passed from the parent component.
   */
  displayTypeValue: PropTypes.string.isRequired
};

MultiSelectMenu.defaultProps = {
  inputRef: null
};

export default connect(getConfiguration)(MultiSelectMenu);
