/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useState, useEffect} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/single-select-pick-list/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render a single-select-pick-list as a single select drop-down control.
 *
 * @param {String} props.cacheInstanceId
 *   The cacheInstanceId from the configurations repository store.
 * @param {Object} props.inputRef
 *   A reference to the DOM element created in the render method. This will be
 *   passed from the parent component.
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.variableName
 *   The variable name used to connnect a form control to its corresponding value in
 *   configData . This will be passed from the parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {String} props.defaultDisplayValue
 *   The display label for the correspponding default value. It is retrieved from the
 *   configData object from the configurations repository store. This will be passed
 *   from the parent component.
 * @param {Function} props.handleChange
 *   The function to be called when a user has changed the value of the form control.
 *   This will be passed from the parent component.
 * @param {Boolean} props.updatable
 *   If false the form control should be disabled / read only. This will be
 *   passed from the parent component.
 * @param {Boolean} props.required
 *   If true the form control should be a mandatory / required field. This will be
 *   passed from the parent component.
 * @param {Array} props.pickListItems
 *   The collection of menu items to be displayed by the form control. This will be
 *   passed from the parent component
 */
const SingleSelectPickList = ({
  cacheInstanceId,
  productFamily,
  productLine,
  model,
  inputRef,
  uniqueId,
  name,
  variableName,
  defaultValue,
  defaultDisplayValue,
  handleChange,
  updatable,
  required,
  pickListItems,
  arraySetItemIndex
}) => {
  const {action} = useContext(StoreContext);
  const {setActionInProgress, onNotOk, onOk} = useContext(ConfiguratorContext);
  // Always add the current default value as the first item in the filler (placeholder)
  // pick list options as this allows the current selection to be visible even when
  // the actual pick options have not been retrieved.
  const fillerItems = [{displayValue: defaultDisplayValue, value: defaultValue}].concat([
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {}
  ]);

  // When a pick-list has been pre-populated from the server, add the items to the pickListOptions array. This
  // array will be used to populate the pick-list drop-down control. Otherwise, set pickListOptions to an array
  // with several empty items (to ensure the UI "reserves" adequate space to render items once they have been
  // retrieved from the server.)
  const [pickListOptions, setPickListOptions] = useState(
    pickListItems && pickListItems.length > 0 ? pickListItems : fillerItems
  );

  useEffect(() => {
    if (inputRef && inputRef.current) {
      for (let i = 0; i < inputRef.current.options.length; i++) {
        if (inputRef.current.options[i].value === defaultValue) {
          inputRef.current.options[i].selected = true;
          break;
        }
      }
    }
  }, [defaultValue, inputRef, pickListOptions]);

  /**
   * When the action completes, set action in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  /**
   * dispatched the loadPickListConfigurationData action
   * to retrieve the options for the specified pick list.
   * Pick list options is not a static list - available
   * options can change during a configuration instance
   * depending on other selections, so it is important
   * that the list of options is retrieved every time
   * the pick list control receives focus
   */
  const getPickListOptions = () => {
    setActionInProgress(true);
    action('loadPickListConfigurationData', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      pickListVarName: variableName,
      arrayIndex: arraySetItemIndex
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          let updatedPickListItems = [];
          if (
            response.delta &&
            response.delta.configurationRepository &&
            response.delta.configurationRepository.configurations &&
            response.delta.configurationRepository.configurations.current &&
            response.delta.configurationRepository.configurations.current.endpointResponses &&
            response.delta.configurationRepository.configurations.current.endpointResponses.pickLists &&
            response.delta.configurationRepository.configurations.current.endpointResponses.pickLists[variableName]
          ) {
            updatedPickListItems =
              response.delta.configurationRepository.configurations.current.endpointResponses.pickLists[variableName]
                .items || [];
          }

          if (updatedPickListItems.length < 10) {
            updatedPickListItems = [...updatedPickListItems, ...fillerItems.slice(1, 10 - updatedPickListItems.length)];
          }

          setPickListOptions(updatedPickListItems);
          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   * Process the chosen drop-down control value.
   *
   * @param {Object} changeEvent
   *   The change event of the pick-list control.
   */
  const handlePickListChange = changeEvent => {
    const newValue = {
      displayValue: changeEvent.target.value,
      value: changeEvent.target.value
    };
    handleChange(newValue);
  };

  return (
    <Styled id="ConfiguratorSingleSelectPickList" css={css}>
      <div className="ConfiguratorSingleSelectPickList__Container">
        <label htmlFor={uniqueId}>{name}</label>
        <select
          id={uniqueId}
          name={variableName}
          onChange={handlePickListChange}
          onFocus={getPickListOptions}
          defaultValue={defaultValue}
          required={required}
          ref={inputRef}
          disabled={!updatable}
        >
          {pickListOptions &&
            pickListOptions.length > 0 &&
            pickListOptions.map((option, index) => (
              <option key={`${uniqueId}-${option.value ? option.value : index}`} value={option.value}>
                {option.displayValue}
              </option>
            ))}
        </select>
      </div>
    </Styled>
  );
};

SingleSelectPickList.propTypes = {
  /**
   * The cacheInstanceId from the configurations repository store.
   */
  cacheInstanceId: PropTypes.string,
  /**
   * A reference to the DOM element created in the render method.
   * This will be passed from the parent component.
   */
  inputRef: PropTypes.shape(Object),
  /**
   * A unique id for the rendered DOM element, it should be unique within the HTML
   * document. This will be passed from the parent component.
   */
  uniqueId: PropTypes.string.isRequired,
  /**
   * A display name (label) for the form control. This will be passed from the
   * parent component.
   */
  name: PropTypes.string.isRequired,
  /**
   * The variable name used to connect a form control to its corresponding value in
   * configData . This will be passed from the parent component.
   */
  variableName: PropTypes.string.isRequired,
  /**
   * The initial value for the form control. It is retrieved from the configData
   * object from the configurations repository store. This will be passed from
   * the parent component. See:
   * https://reactjs.org/docs/uncontrolled-components.html#default-values
   */
  defaultValue: PropTypes.string,
  /**
   * The function to be called when a user has changed the value of the form control.
   * This will be passed from the parent component.
   */
  handleChange: PropTypes.func.isRequired,
  /**
   * If false the form control should be disabled / read only. This will be
   * passed from the parent component.
   */
  updatable: PropTypes.bool.isRequired,
  /**
   * If true the form control should be a mandatory / required field. This will be
   * passed from the parent component.
   */
  required: PropTypes.bool.isRequired,
  /**
   * The collection of menu items to be displayed by the form control. This will be
   * passed from the parent component
   */
  pickListItems: PropTypes.arrayOf(Object)
};

SingleSelectPickList.defaultProps = {
  cacheInstanceId: undefined,
  inputRef: null,
  defaultValue: null,
  pickListItems: null
};

export default connect(getConfiguration)(SingleSelectPickList);
