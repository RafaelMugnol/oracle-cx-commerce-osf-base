/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React from 'react';
import TextInput from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/text-field/text-input';
import TextArea from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/text-field/text-area';
import RangeSlider from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/text-field/range-slider';

/**
 * This component will render a text UI control.
 *
 * @param {Object} props.inputRef
 *   A reference to the DOM element created in the render method. This will be
 *   passed from the parent component.
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.variableName
 *   The variable name used to connnect a form control to its corresponding value in
 *   configData . This will be passed from the parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {Function} props.handleChange
 *   The function to be called when a user has changed the value of the form control.
 *   This will be passed from the parent component.
 * @param {Boolean} props.updatable
 *   If false the form control should be disabled / read only. This will be
 *   passed from the parent component.
 * @param {Boolean} props.required
 *   If true the form control should be a mandatory / required field. This will be
 *   passed from the parent component.
 * @param {String} props.minimum
 *   The minmium value allowed to be input for the form control. This will be
 *   passed from the parent component.
 * @param {String} props.maximum
 *   The maximum value allowed to be input for the form control. This will be
 *   passed from the parent component.
 * @param {String} props.rows
 *   The number of rows to be displayed by the text area form control. This will be
 *   passed from the parent component.
 * @param {String} props.columns
 *   The number of columns to be displayed by the text area form control. This will be
 *   passed from the parent component.
 * @param {String} props.description
 *   Provides more detail / futher instruction regarding the form control. Could
 *   be used to supplement name (label) . This will be passed from the parent component.
 * @param {String} props.inputType
 *   The type attribute to be used by the input form control e.g. number, text. This will be
 *   passed from the parent component.
 * @param {String} props.displayTypeValue
 *   The display type of the form control e.g. Text Area, Text. This will be
 *   passed from the parent component.
 * @param {String} props.jetDisplayTypeValue
 *   The jet display type of the form control e.g. Slider Vertical, Slider Horizontal.
 *   This will be passed from the parent component.
 * @param {String} props.validationMethodLookupCode
 *   Validation lookup codes are 1=None, 2=Positive Number and 3=Range.
 *   This will be passed from the parent component
 * @param {String} props.resourceAttrType
 *   The attribute value type e.g. Currency. This will be passed from the parent component
 */
const TextField = ({
  inputRef,
  uniqueId,
  name,
  variableName,
  defaultValue,
  handleChange,
  updatable,
  required,
  minimum,
  maximum,
  rows,
  columns,
  description,
  inputType,
  displayTypeValue,
  jetDisplayTypeValue,
  validationMethodLookupCode,
  resourceAttrType
}) => {
  if (displayTypeValue === 'Text Area') {
    return (
      <TextArea
        inputRef={inputRef}
        uniqueId={uniqueId}
        name={name}
        variableName={variableName}
        defaultValue={defaultValue}
        handleChange={handleChange}
        updatable={updatable}
        required={required}
        rows={rows}
        columns={columns}
        resourceAttrType={resourceAttrType}
      ></TextArea>
    );
  }
  if (displayTypeValue === 'Text') {
    if (jetDisplayTypeValue === 'Slider Vertical' || jetDisplayTypeValue === 'Slider Horizontal') {
      return (
        <RangeSlider
          inputRef={inputRef}
          uniqueId={uniqueId}
          name={name}
          variableName={variableName}
          defaultValue={defaultValue}
          handleChange={handleChange}
          updatable={updatable}
          required={required}
          minimum={minimum}
          maximum={maximum}
          resourceAttrType={resourceAttrType}
        ></RangeSlider>
      );
    }

    return (
      <TextInput
        inputRef={inputRef}
        uniqueId={uniqueId}
        name={name}
        variableName={variableName}
        defaultValue={defaultValue}
        handleChange={handleChange}
        updatable={updatable}
        required={required}
        minimum={minimum}
        maximum={maximum}
        description={description}
        inputType={inputType}
        validationMethodLookupCode={validationMethodLookupCode}
        resourceAttrType={resourceAttrType}
      ></TextInput>
    );
  }
};

export default TextField;
