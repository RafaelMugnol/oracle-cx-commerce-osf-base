/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useState, useEffect} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/text-field/styles.css';
/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

/**
 * This component will render a text input UI control.
 *
 * @param {Object} props.inputRef
 *   A reference to the DOM element created in the render method. This will be
 *   passed from the parent component.
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.variableName
 *   The variable name used to connnect a form control to its corresponding value in
 *   configData . This will be passed from the parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {Function} props.handleChange
 *   The function to be called when a user has changed the value of the form control.
 *   This will be passed from the parent component.
 * @param {Boolean} props.updatable
 *   If false the form control should be disabled / read only. This will be
 *   passed from the parent component.
 * @param {Boolean} props.required
 *   If true the form control should be a mandatory / required field. This will be
 *   passed from the parent component.
 * @param {String} props.minimum
 *   The minmium value allowed to be input for the form control. This will be
 *   passed from the parent component.
 * @param {String} props.maximum
 *   The maximum value allowed to be input for the form control. This will be
 *   passed from the parent component.
 * @param {String} props.description
 *   Provides more detail / futher instruction regarding the form control. Could
 *   be used to supplement name (label) . This will be passed from the parent component.
 * @param {String} props.resourceAttrType
 *   The attribute value type e.g. Currency. This will be passed from the parent component
 */
const RangeSlider = ({
  inputRef,
  uniqueId,
  name,
  variableName,
  defaultValue,
  handleChange,
  updatable,
  required,
  minimum,
  maximum,
  description,
  resourceAttrType
}) => {
  defaultValue = defaultValue ? defaultValue : minimum;

  const [currentValue, setCurrentValue] = useState(defaultValue);

  // This is necessary for 'interact' actions.
  useEffect(() => {
    if (inputRef && inputRef.current) {
      inputRef.current.value = defaultValue;
    }
  }, [defaultValue, inputRef]);

  /**
   *
   */
  const handleRangeSliderBlur = changeEvent => {
    let newValue = changeEvent.target.value;

    if (newValue !== String(defaultValue)) {
      newValue =
        resourceAttrType === 'Currency' ? {value: changeEvent.target.value, currency: ''} : changeEvent.target.value;

      handleChange(newValue);
    }
  };

  const handleInput = changeEvent => {
    setCurrentValue(changeEvent.target.value);
  };

  return (
    <Styled id="ConfiguratorRangeSlider" css={css}>
      <div className="ConfiguratorRangeSlider__Container">
        <label htmlFor={uniqueId}>
          {name}
          {description ? ` (${description})` : null}
        </label>
        <input
          id={uniqueId}
          type="range"
          name={variableName}
          min={minimum}
          max={maximum}
          onInput={handleInput}
          onBlur={handleRangeSliderBlur}
          defaultValue={defaultValue}
          required={required}
          disabled={!updatable}
          ref={inputRef}
        />
        <div className="ConfiguratorRangeSlider__Legend">
          <div>{minimum}</div>
          <div>{currentValue}</div>
          <div>{maximum}</div>
        </div>
      </div>
    </Styled>
  );
};

export default RangeSlider;
