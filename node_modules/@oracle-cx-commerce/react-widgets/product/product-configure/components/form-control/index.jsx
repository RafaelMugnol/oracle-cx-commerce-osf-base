/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
/* eslint-disable react/no-array-index-key */
import React, {useContext, useEffect, useRef} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import Spacer from '@oracle-cx-commerce/react-widgets/product/product-configure/components/spacer';
import SingleSelectPickList from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/single-select-pick-list';
import ReadOnly from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/read-only';
import BooleanField from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/boolean-field';
import SingleSelectMenu from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/single-select-menu';
import MultiSelectMenu from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/multi-select-menu';
import DateField from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/date-field';
import TextField from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/text-field';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/styles.css';
import {getUpdatedConfigData} from '@oracle-cx-commerce/react-widgets/product/product-configure/utils';
import PropTypes from 'prop-types';

/**
 * This component will render a form-control UI control.
 *
 * @param {Object} props.component
 *   The component to be processed. This will be passed from the parent component.
 * @param {String} props.cacheInstanceId
 *   The id of the current configuration instance from the configurations repository store.
 * @param {Object} props.configData
 *   The configData object from the configurations repository store.
 * @param {String} props.prefixedArraySetVariableName
 *   If the form control is inside an array set control this will be the variable
 *   name of the parent array set. This will be passed from the parent component.
 * @param {Integer} props.arraySetItemIndex
 *   If the form control is inside an array set control this will be the index of
 *   the current array set item. This will be passed from the parent component.
 */
const FormControl = ({
  component,
  cacheInstanceId,
  configData,
  productFamily,
  productLine,
  model,
  prefixedArraySetVariableName,
  arraySetItemIndex
}) => {
  const {action, getState} = useContext(StoreContext);
  const {
    resourceAttributeVarName,
    resourceAttrType,
    inputTypeCode,
    displayType,
    jetDisplayType,
    componentTypeCode,
    autoUpdate,
    resourceAttributeData: {
      name,
      variableName,
      ajaxSensitive,
      description,
      required,
      validationMethod,
      menuItems: {constrainedItems = []} = {},
      additional: {minimum = null, maximum = null, text_area_rows: rows = null, text_area_cols: columns = null} = {},
      pickListItems
    } = {}
  } = component;

  const inputTypeLookupCode = inputTypeCode && inputTypeCode.lookupCode;
  const displayTypeValue = displayType && displayType.displayValue;
  const jetDisplayTypeValue = displayType && jetDisplayType.displayValue;
  const inputType =
    resourceAttrType === 'Integer' || resourceAttrType === 'Float' || resourceAttrType === 'Currency'
      ? 'number'
      : 'text';

  // The validationMethod lookupCodes are 1=None, 2=Positive Number and 3=Range
  const validationMethodLookupCode = validationMethod ? validationMethod.lookupCode : '1';

  const {setActionInProgress, onNotOk, onOk} = useContext(ConfiguratorContext);

  let stateAttributes = {};
  if (resourceAttributeVarName) {
    if (prefixedArraySetVariableName) {
      if (
        configData[prefixedArraySetVariableName] &&
        configData[prefixedArraySetVariableName]._state &&
        configData[prefixedArraySetVariableName]._state.defaultRowState &&
        configData[prefixedArraySetVariableName]._state.defaultRowState.attributes
      ) {
        // Merge `defaultRowstate`, `compositeState` and `itemsState` to get view of ArraySet state Attributes
        const {defaultRowState, attributes: compositeState} = configData[prefixedArraySetVariableName]._state;
        const itemState =
          (configData[prefixedArraySetVariableName].items[arraySetItemIndex]._state.attributes &&
            configData[prefixedArraySetVariableName].items[arraySetItemIndex]._state.attributes[
              resourceAttributeVarName
            ]) ||
          {};
        stateAttributes = {
          ...(defaultRowState.attributes[resourceAttributeVarName] || {}),
          ...(compositeState[resourceAttributeVarName] || {}),
          ...(itemState || {})
        };
      }
    } else if (configData._state && configData._state.attributes) {
      // Need to set empty object for valid destructuring in next statement
      stateAttributes = configData._state.attributes[resourceAttributeVarName] || {};
    }
  }

  const {hasWarning, hasError, messages, recommendationMessages, updatable, visible} = stateAttributes;

  const uniqueId = prefixedArraySetVariableName
    ? variableName + prefixedArraySetVariableName + arraySetItemIndex
    : variableName;

  let defaultValue = prefixedArraySetVariableName
    ? configData[prefixedArraySetVariableName].items[arraySetItemIndex][resourceAttributeVarName]
    : configData[resourceAttributeVarName];

  const defaultDisplayValue =
    defaultValue && Object.prototype.hasOwnProperty.call(defaultValue, 'displayValue')
      ? defaultValue.displayValue
      : null;

  // single select menu selected item currency values are returned as an object, for example:
  // "floatSSM1":{"value":1.23,"displayValue":"1.23"}
  // "currencyField1":{"value":5.99,"currency":"USD"}
  defaultValue =
    defaultValue && Object.prototype.hasOwnProperty.call(defaultValue, 'value')
      ? String(defaultValue.value)
      : defaultValue;

  // multi select menu selected items returned in "items" array, for example:
  // "floatMSM1":{"items":[{"value":1.23,"displayValue":"1.23"}]}
  defaultValue =
    defaultValue && defaultValue.items
      ? defaultValue.items.map(item => {
          return item.value ? String(item.value) : item.value;
        })
      : defaultValue;

  /**
   * When the action completes, set action in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  const inputRef = useRef(null);

  // If the form-control has error or warning messages then give it focus
  useEffect(() => {
    if (hasError || hasWarning) {
      inputRef && inputRef.current && inputRef.current.focus();
    }
  }, [inputRef, hasError, hasWarning]);

  /**
   * Perform an interact action on the given attribute.
   *
   * @param {Object} attribute
   *   The updated attribute.
   */
  const performInteract = (componentAttributeName, value) => {
    let existingConfigData = prefixedArraySetVariableName
      ? configData[prefixedArraySetVariableName].items[arraySetItemIndex][componentAttributeName]
      : configData[componentAttributeName];
    if (typeof existingConfigData === 'object') {
      // Rule based where locked flag will be present in configData.
      if (typeof existingConfigData.locked === 'boolean') {
        // value will be object for multi select, pick-lists etc, merge the content.
        if (typeof existingConfigData.value === 'object') {
          existingConfigData.value = {...existingConfigData.value, ...value};
        }
        existingConfigData.value = value;
      } else {
        // value will be object for multi select, pick-lists etc, merge the content.
        if (typeof existingConfigData === 'object') {
          existingConfigData = {...existingConfigData, ...value};
        }
        existingConfigData = value;
      }
    } else {
      existingConfigData = value;
    }
    const updatedConfigData = prefixedArraySetVariableName
      ? {
          [prefixedArraySetVariableName]: {
            items: [{_index: arraySetItemIndex, [componentAttributeName]: existingConfigData}]
          }
        }
      : {[componentAttributeName]: existingConfigData};
    // TODO: Sends arraySetVariableNames as part of interact payload, make this conditional based on use case!
    const arraySetVariableNames = getConfiguration(getState()).arraySetVariableNames || null;

    setActionInProgress(true);
    onOk();
    action('interactConfiguration', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      configData: updatedConfigData,
      arraySetVariableNames,
      arraySetVarName: prefixedArraySetVariableName || null,
      arraySetOffset: prefixedArraySetVariableName ? configData[prefixedArraySetVariableName].offset : null,
      arraySetLimit: prefixedArraySetVariableName ? configData[prefixedArraySetVariableName].limit : null
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  const performUpdate = () => {
    const updatedConfigData = getUpdatedConfigData(configData);

    setActionInProgress(true);
    onOk();
    action('updateConfiguration', {
      cacheInstanceId,
      productFamily,
      productLine,
      model,
      configData: updatedConfigData
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  /**
   *
   */
  const handleChange = newValue => {
    if (ajaxSensitive || prefixedArraySetVariableName) {
      // always call interact for ajaxSensitive attributes
      // and all attributes belonging to an array set
      performInteract(resourceAttributeVarName, newValue);
    } else {
      action('updateConfigurationConfigData', {
        prefixedArraySetVariableName,
        arraySetItemIndex,
        resourceAttributeVarName,
        newValue
      }).then(() => {
        if (autoUpdate) {
          performUpdate();
        }
      });
    }
  };

  /**
   * Renders the correct form control depending on inputTypeCode
   */
  const renderFormControl = () => {
    if (visible && inputTypeLookupCode) {
      switch (inputTypeLookupCode) {
        case 'Boolean': {
          return (
            <BooleanField
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              handleChange={handleChange}
              updatable={updatable}
              minimum={minimum}
              maximum={maximum}
            />
          );
        }
        case 'Date': {
          return (
            <DateField
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              handleChange={handleChange}
              updatable={updatable}
              required={required}
              minimum={minimum}
              maximum={maximum}
            />
          );
        }
        case 'MultiSelectMenu': {
          return (
            <MultiSelectMenu
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              handleChange={handleChange}
              updatable={updatable}
              required={required}
              menuItems={constrainedItems}
              displayTypeValue={displayTypeValue}
            />
          );
        }
        case 'ReadOnly': {
          return (
            <ReadOnly
              key={component.id}
              uniqueId={uniqueId}
              name={name}
              defaultValue={defaultValue}
              displayAsHTML={resourceAttrType === 'HTML' ? true : false}
            />
          );
        }
        case 'SingleSelectMenu':
        case 'Single Select Menu': {
          return (
            <SingleSelectMenu
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              handleChange={handleChange}
              updatable={updatable}
              required={required}
              menuItems={constrainedItems}
              displayTypeValue={displayTypeValue}
            />
          );
        }
        case 'SingleSelectPickList': {
          return (
            <SingleSelectPickList
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              defaultDisplayValue={defaultDisplayValue}
              handleChange={handleChange}
              updatable={updatable}
              required={required}
              pickListItems={pickListItems}
              arraySetItemIndex={arraySetItemIndex}
            />
          );
        }
        case 'Text':
        case 'TextField': {
          return (
            <TextField
              key={component.id}
              inputRef={inputRef}
              uniqueId={uniqueId}
              name={name}
              variableName={variableName}
              defaultValue={defaultValue}
              handleChange={handleChange}
              updatable={updatable}
              required={required}
              minimum={minimum}
              maximum={maximum}
              rows={rows}
              columns={columns}
              description={description}
              inputType={inputType}
              displayTypeValue={displayTypeValue}
              jetDisplayTypeValue={jetDisplayTypeValue}
              validationMethodLookupCode={validationMethodLookupCode}
              resourceAttrType={resourceAttrType}
            />
          );
        }
        default: {
          return null;
        }
      }
    } else if (componentTypeCode && componentTypeCode.lookupCode === 'SPACER') {
      return <Spacer key={component.id} component={component} />;
    } else {
      return null;
    }
  };

  return (
    <Styled id="ConfiguratorFormControl" css={css}>
      <div className="ConfiguratorFormControl__Container">
        {renderFormControl()}
        {visible &&
          messages &&
          messages.map((message, index) => {
            return (
              <div
                key={`${uniqueId}message${index}`}
                className={hasError ? 'ProductConfigure--error' : 'ProductConfigure--warning'}
                role="alert"
                aria-live="assertive"
              >
                {message}
              </div>
            );
          })}
        {visible &&
          recommendationMessages &&
          recommendationMessages.map((recommendationMessage, index) => {
            return (
              <div
                key={`${uniqueId}recommendation-message${index}`}
                className="ProductConfigure--info"
                role="alert"
                aria-live="assertive"
              >
                {recommendationMessage}
              </div>
            );
          })}
      </div>
    </Styled>
  );
};

FormControl.propTypes = {
  /**
   * The component to be processed. This will be passed from the parent component.
   */
  component: PropTypes.shape({
    components: PropTypes.shape({
      items: PropTypes.arrayOf(Object)
    })
  }).isRequired,
  /**
   * The cacheInstanceId from the configurations repository store.
   */
  cacheInstanceId: PropTypes.string,
  /** The configData object from the configurations repository store. */
  configData: PropTypes.instanceOf(Object).isRequired,
  /**
   * If the form control is inside an array set control this will be the variable
   * name of the parent array set. This will be passed from the parent component.
   */
  prefixedArraySetVariableName: PropTypes.string,
  /**
   * If the form control is inside an array set control this will be the index of
   * the current array set item. This will be passed from the parent component.
   */
  arraySetItemIndex: PropTypes.number
};

FormControl.defaultProps = {
  cacheInstanceId: undefined,
  prefixedArraySetVariableName: undefined,
  arraySetItemIndex: undefined
};

export default connect(getConfiguration)(FormControl);
