/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useEffect} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control/boolean-field/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render a boolean UI control.
 *
 * @param {Object} props.inputRef
 *   A reference to the DOM element created in the render method. This will be
 *   passed from the parent component.
 * @param {String} props.uniqueId
 *   A unique id for the rendered DOM element, it should be unique within the HTML
 *   document. This will be passed from the parent component.
 * @param {String} props.name
 *   A display name (label) for the form control. This will be passed from the
 *   parent component.
 * @param {String} props.variableName
 *   The variable name used to connnect a form control to its corresponding value in
 *   configData . This will be passed from the parent component.
 * @param {String} props.defaultValue
 *   The initial value for the form control. It is retrieved from the configData
 *   object from the configurations repository store. This will be passed from
 *   the parent component. See:
 *   https://reactjs.org/docs/uncontrolled-components.html#default-values
 * @param {Function} props.handleChange
 *   The function to be called when a user has changed the value of the form control.
 *   This will be passed from the parent component.
 * @param {Boolean} props.updatable
 *   If false the form control should be disabled / read only. This will be
 *   passed from the parent component.
 * @param {Boolean} props.required
 *   If true the form control should be a mandatory / required field. This will be
 *   passed from the parent component.
 */
const BooleanField = ({inputRef, uniqueId, name, variableName, defaultValue, handleChange, updatable, required}) => {
  /**
   * this is required for interact
   * See https://reactjs.org/docs/uncontrolled-components.html
   */
  useEffect(() => {
    if (inputRef && inputRef.current) {
      inputRef.current.checked = defaultValue;
    }
  }, [defaultValue, inputRef]);

  /**
   *
   */
  const handleBooleanChange = changeEvent => {
    const newValue = changeEvent.target.checked;
    if (newValue !== defaultValue) {
      handleChange(changeEvent.target.checked);
    }
  };

  return (
    <Styled id="ConfiguratorFormControlBoolean" css={css}>
      <div className="ConfiguratorFormControlBoolean__Container">
        <Checkbox
          id={uniqueId}
          name={variableName}
          onChange={handleBooleanChange}
          defaultChecked={defaultValue}
          className="ConfiguratorFormControlBoolean__Input"
          labelText={name}
          required={required}
          disabled={!updatable}
        ></Checkbox>
      </div>
    </Styled>
  );
};

BooleanField.propTypes = {
  /**
   * A reference to the DOM element created in the render method.
   * This will be passed from the parent component.
   */
  inputRef: PropTypes.shape(Object),
  /**
   * A unique id for the rendered DOM element, it should be unique within the HTML
   * document. This will be passed from the parent component.
   */
  uniqueId: PropTypes.string.isRequired,
  /**
   * A display name (label) for the form control. This will be passed from the
   * parent component.
   */
  name: PropTypes.string.isRequired,
  /**
   * The variable name used to connect a form control to its corresponding value in
   * configData . This will be passed from the parent component.
   */
  variableName: PropTypes.string.isRequired,
  /**
   * The initial value for the form control. It is retrieved from the configData
   * object from the configurations repository store. This will be passed from
   * the parent component. See:
   * https://reactjs.org/docs/uncontrolled-components.html#default-values
   */
  defaultValue: PropTypes.bool.isRequired,
  /**
   * The function to be called when a user has changed the value of the form control.
   * This will be passed from the parent component.
   */
  handleChange: PropTypes.func.isRequired,
  /**
   * If false the form control should be disabled / read only. This will be
   * passed from the parent component.
   */
  updatable: PropTypes.bool.isRequired,
  /**
   * If true the form control should be a mandatory / required field. This will be
   * passed from the parent component.
   */
  required: PropTypes.bool
};

BooleanField.defaultProps = {
  required: undefined,
  inputRef: null
};

export default BooleanField;
