/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
/* eslint-disable react/no-array-index-key */

import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';
import {isObject} from '@oracle-cx-commerce/utils/generic';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/items-table/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render an items table UI control.
 *
 * @param {Array} props.items
 *   The collection of items to be displayed in the table. This will be passed
 *   from the parent component.
 * @param {Array} props.tableColumns
 *   The columns to be displayed - only column ids listed in this parameter
 *   will be displayed. This will be passed from the parent component.
 * @param {String} props.caption
 *   The text to be displayed as the table caption. This will be passed from
 *   the parent component.
 */
const ItemsTable = ({items, tableColumns = [], caption = ''}) => {
  return (
    <Styled id="ConfiguratorItemsTable" css={css}>
      <table className="ConfiguratorItemsTable">
        <caption className="ProductConfigure--screenReaderText">{caption}</caption>
        <thead>
          <tr>
            {tableColumns.map((tableColumn, index) => {
              return (
                <th scope="col" key={index}>
                  {tableColumn.name}
                </th>
              );
            })}
          </tr>
        </thead>
        <tbody>
          {items &&
            items.map((item, itemsIndex) => {
              return (
                <tr key={itemsIndex}>
                  {tableColumns.map((tableColumn, tableColumnsIndex) => {
                    return (
                      <ItemsTableItem
                        key={tableColumnsIndex}
                        item={item}
                        tableColumn={tableColumn}
                        isFirst={tableColumnsIndex === 0}
                      />
                    );
                  })}
                </tr>
              );
            })}
        </tbody>
      </table>
    </Styled>
  );
};

ItemsTable.propTypes = {
  /**
   * The collection of items to be displayed in the table. This will be passed
   * from the parent component.
   */
  items: PropTypes.arrayOf(Object).isRequired,
  /**
   * The columns to be displayed - only column ids listed in this parameter
   * will be displayed. This will be passed from the parent component.
   */
  tableColumns: PropTypes.arrayOf(Object),
  /**
   *  The text to be displayed as the table caption. This will be passed from
   * the parent component.
   */
  caption: PropTypes.string
};

ItemsTable.defaultProps = {
  tableColumns: [],
  caption: ''
};

/**
 * This component will render a table cell for an items table.
 *
 * @param {Object} props.item
 *   The item to be displayed. This will be passed from the parent component.
 * @param {Object} props.tableColumn
 *   Details of the column - contains label and variable name. This will be
 *   passed from the parent component.
 * @param {Boolean} props.isFirst
 *   Will be true if this is the first item in the row. This will be passed from
 *   the parent component.
 */
const ItemsTableItem = ({item, tableColumn, isFirst}) => {
  const formatPrice = useNumberFormatter({style: 'currency'});

  const {variableName} = tableColumn;
  const displayText = isObject(item[variableName]) ? formatPrice(item[variableName].value) : item[variableName];

  if (isFirst) {
    return <th span="row">{displayText}</th>;
  }

  return <td>{displayText}</td>;
};

export default ItemsTable;
