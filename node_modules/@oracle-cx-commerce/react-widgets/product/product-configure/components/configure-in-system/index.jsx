/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useState, useContext} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getConfiguration} from '@oracle-cx-commerce/commerce-utils/selector';
import Styled from '@oracle-cx-commerce/react-components/styled';
import ConfigureInSystemChildren from '@oracle-cx-commerce/react-widgets/product/product-configure/components/configure-in-system/child-component';
import {
  EXPAND,
  POPULATE_PICK_LIST_ITEMS,
  EXCLUDE_LAYOUT_PROPERTIES
} from '@oracle-cx-commerce/react-widgets/product/product-configure/constants';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/configure-in-system/styles.css';
import {populateLayout} from '@oracle-cx-commerce/react-widgets/product/product-configure/utils';
import PropTypes from 'prop-types';

/**
 * This component will render all available in-system configurations.
 *
 * @param {Object} props.configData
 *  The configData object from the configurations repository store.
 */
const ConfigureInSystem = ({configData}) => {
  const {action, getState} = useContext(StoreContext);
  const {modelData = {}, resources = {}, setActionInProgress, onNotOk, onOk} = useContext(ConfiguratorContext);
  const {locale, currency, configurationMetadata} = modelData;
  const [isSystemNavigationVisible, setIsSystemNavigationVisible] = useState(true);

  const {labelConfigureInSystemShowHideNavigationInfo} = resources;

  /**
   * When the action completes, set action in progress to false.
   */
  const onComplete = () => {
    setActionInProgress(false);
  };

  /**
   * Show or hide the configure in system menu.
   */
  const toggleSystemNavigation = () => {
    setIsSystemNavigationVisible(!isSystemNavigationVisible);
  };

  /**
   * Click handler for system configuration navigation items. Dispatches the
   * loadModelInSystemConfiguration action
   *
   * @param {String} productFamily
   *  The productFamily of the selected navigation item.
   * @param {String} productLine
   *  The productLine of the selected navigation item.
   * @param {String} model
   *  The model of the selected navigation item.
   * @param {String} targetModelPath
   *  The targetModelPath of the selected navigation item.
   */
  const handleConfigureInSystem = (productFamily, productLine, model, targetModelPath) => {
    setActionInProgress(true);
    onOk();
    action('loadModelInSystemConfiguration', {
      cacheInstanceId: getConfiguration(getState())['cacheInstanceId'],
      productFamily,
      productLine,
      model,
      targetModelPath,
      populatePickListItems: POPULATE_PICK_LIST_ITEMS,
      excludeLayoutProperties: EXCLUDE_LAYOUT_PROPERTIES,
      expand: EXPAND,
      locale,
      currency,
      configurationMetadata
    })
      .then(response => {
        if (!response.ok) {
          onNotOk(response);
        } else if (!EXPAND.includes('layout')) {
          populateLayout(getState(), action, productFamily, productLine, model, onNotOk, onOk);
        } else {
          onOk();
        }
      })
      .finally(onComplete);
  };

  return (
    <Styled id="ConfigureInSystem" css={css}>
      <div className="ConfigureInSystem__Container">
        <button
          className="ConfigureInSystem__Toggle secondary"
          onClick={toggleSystemNavigation}
          aria-controls="ConfigureInSystem__Models"
          type="button"
        >
          <span className="ProductConfigure--screenReaderText">{labelConfigureInSystemShowHideNavigationInfo}</span>
          <span role="presentation">&#9776;</span>
        </button>
        {isSystemNavigationVisible && (
          <div id="ConfigureInSystem__Models" className="ConfigureInSystem__Models" role="region" aria-live="polite">
            <ul className="ConfigureInSystem__Navigation" role="navigation">
              {configData &&
                configData._sysNavigationInfo &&
                configData._sysNavigationInfo.items &&
                configData._sysNavigationInfo.items.map(item => (
                  <li key={item.path}>
                    <button
                      onClick={() => {
                        handleConfigureInSystem(item.productFamily, item.productLine, item.model, item.path);
                      }}
                      className={`secondary ${item.isActive ? 'ConfigureInSystem__Navigation--active' : ''}`}
                      type="button"
                    >
                      {item.name}
                    </button>
                    {item.items && item.items.length > 0 && (
                      <ConfigureInSystemChildren items={item.items} handler={handleConfigureInSystem} />
                    )}
                  </li>
                ))}
            </ul>
          </div>
        )}
      </div>
    </Styled>
  );
};

ConfigureInSystem.propTypes = {
  /** The configData object from the configurations repository store. */
  configData: PropTypes.instanceOf(Object).isRequired
};

export default connect(getConfiguration)(ConfigureInSystem);
