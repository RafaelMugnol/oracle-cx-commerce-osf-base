/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useEffect, useState} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import Spacer from '@oracle-cx-commerce/react-widgets/product/product-configure/components/spacer';
import FormControl from '@oracle-cx-commerce/react-widgets/product/product-configure/components/form-control';
import ArraySet from '@oracle-cx-commerce/react-widgets/product/product-configure/components/array-set';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/panel/styles.css';
import PropTypes from 'prop-types';

/**
 * This component will render a panel-column UI component.
 *
 * @param {Object} props.component
 *   The component to be processed. This will be passed from the parent component.
 * @param {Object} props.columnWidth
 *   The list of widths to be used for each panel-column in a panel-row. The width for
 *   the current panel-column can be looked up by sequence number. This will be passed
 *   from the parent component.
 */
const PanelColumn = ({component, columnWidth = {}}) => {
  const [columnGridSpanWidth, setColumnGridSpanWidth] = useState(12);

  useEffect(() => {
    if (columnWidth.colsFor12ColGridSystem) {
      setColumnGridSpanWidth(columnWidth.colsFor12ColGridSystem);
    }
  }, [columnWidth.colsFor12ColGridSystem]);

  return (
    <Styled id="ConfiguratorPanelColumn" css={css}>
      <div className={`ConfiguratorPanelColumn grid-span-${columnGridSpanWidth}`}>
        {component &&
          component.components &&
          component.components.items &&
          component.components.items.map(item => {
            if (item.componentTypeCode.lookupCode === 'PANEL_COL') {
              return <PanelColumn key={item.id} component={item} />;
            }
            if (item.componentTypeCode.lookupCode === 'SPACER') {
              return <Spacer key={item.id} component={item} />;
            }
            if (item.componentTypeCode.lookupCode === 'FORM_CONTROL') {
              return <FormControl key={item.id} component={item} />;
            }
            if (item.componentTypeCode.lookupCode === 'ARRAY_SET') {
              return <ArraySet key={item.id} component={item} />;
            }

            return null;
          })}
      </div>
    </Styled>
  );
};

PanelColumn.propTypes = {
  /**
   * The component to be processed. This will be passed from the parent component.
   */
  component: PropTypes.shape({
    components: PropTypes.shape({
      items: PropTypes.arrayOf(Object)
    })
  }).isRequired,
  /**
   * The list of widths to be used for each panel-column in a panel-row. This will be passed
   * from the parent component.
   */
  columnWidth: PropTypes.shape({
    colsFor12ColGridSystem: PropTypes.any
  })
};

PanelColumn.defaultProps = {
  columnWidth: undefined
};

export default PanelColumn;
