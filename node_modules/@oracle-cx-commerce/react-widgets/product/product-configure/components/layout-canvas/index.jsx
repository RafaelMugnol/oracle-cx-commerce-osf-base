/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext} from 'react';
import Alert from '@oracle-cx-commerce/react-components/alert';
import PageLoader from '@oracle-cx-commerce/react-components/page-loader';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {getConfiguration, getConfigurationRepository} from '@oracle-cx-commerce/commerce-utils/selector';
import ConfigureInSystem from '@oracle-cx-commerce/react-widgets/product/product-configure/components/configure-in-system';
import {Panel} from '@oracle-cx-commerce/react-widgets/product/product-configure/components/panel';
import ItemsTable from '@oracle-cx-commerce/react-widgets/product/product-configure/components/items-table';
import PriceInfo from '@oracle-cx-commerce/react-widgets/product/product-configure/components/price-info';
import Actions from '@oracle-cx-commerce/react-widgets/product/product-configure/components/actions';
import ProductDetails from '@oracle-cx-commerce/react-widgets/product/product-configure/components/product-details';
import ProductConfigurePlaceholder from '@oracle-cx-commerce/react-widgets/product/product-configure/components/placeholder';
import {ConfiguratorContext} from '@oracle-cx-commerce/react-widgets/product/product-configure/contexts';
import css from '@oracle-cx-commerce/react-widgets/product/product-configure/components/layout-canvas/styles.css';

/**
 * This component will render the top level configurator UI.
 */
const LayoutCanvas = () => {
  const {configData, layoutNamespace, layoutFlowVariableName} = useSelector(getConfiguration);
  const {layouts, templates} = useSelector(getConfigurationRepository);

  const {modelData = {}, resources = {}, actionInProgress, actionResponse = {}} = useContext(ConfiguratorContext);
  const {productFamily, productLine, model} = modelData;

  return (
    <Styled id="ConfiguratorLayoutCanvas" css={css}>
      <div className="ConfiguratorLayoutCanvas__Container">
        {actionInProgress && (
          <PageLoader show={true}>
            <ProductConfigurePlaceholder />
          </PageLoader>
        )}

        {actionResponse.message && (
          <div className="ProductConfigureModal__ActionResponse">
            <Alert type={actionResponse.type} message={actionResponse.message} />
          </div>
        )}

        <ProductDetails></ProductDetails>

        {configData && configData._sysNavigationInfo && configData._sysNavigationInfo.items && (
          <ConfigureInSystem key={configData._sysNavigationInfo.items.name} />
        )}

        {layouts &&
          layoutFlowVariableName &&
          layoutNamespace &&
          layouts[layoutNamespace] &&
          layouts[layoutNamespace][layoutFlowVariableName] &&
          layouts[layoutNamespace][layoutFlowVariableName].items &&
          layouts[layoutNamespace][layoutFlowVariableName].items.components &&
          layouts[layoutNamespace][layoutFlowVariableName].items.components.items &&
          layouts[layoutNamespace][layoutFlowVariableName].items.components.items.map(item => {
            if (
              item.componentTypeCode &&
              item.componentTypeCode.lookupCode &&
              item.componentTypeCode.lookupCode === 'PANEL'
            ) {
              return <Panel key={item.id} component={item} />;
            }

            return null;
          })}

        {/* Not showing the BOM table */}
        {false && configData && configData._bom && configData._bom.items && configData._bom.items.length > 0 && (
          <div className="Configurator__BillOfMaterials">
            <strong>{resources.headingBillOfMaterials}</strong>
            <ItemsTable
              items={configData._bom.items}
              tableColumns={templates.partsTemplate.items}
              caption={resources.headingBillOfMaterials}
            />
            <br />
          </div>
        )}

        {configData &&
          configData._recmdParts &&
          configData._recmdParts.items &&
          configData._recmdParts.items.length > 0 && (
            <div className="Configurator__RecommendedParts">
              <strong>{resources.headingRecommendedParts}</strong>
              <ItemsTable
                items={configData._recmdParts.items}
                tableColumns={templates.partsTemplate.items}
                caption={resources.headingRecommendedParts}
              />
            </div>
          )}

        {configData &&
          configData._mandatoryParts &&
          configData._mandatoryParts.items &&
          configData._mandatoryParts.items.length > 0 && (
            <div className="Configurator__MandatoryParts">
              <strong>{resources.headingMandatoryParts}</strong>
              <ItemsTable
                items={configData._mandatoryParts.items}
                tableColumns={templates.partsTemplate && templates.partsTemplate.items}
                caption={resources.headingMandatoryParts}
              />
            </div>
          )}

        <div className="ConfiguratorLayoutCanvas__Footer">
          {configData && configData._priceInfo && configData._priceInfo.items && (
            <PriceInfo key={configData._priceInfo.name} />
          )}

          {actionResponse.message && (
            <div className="ProductConfigureModal__ActionResponse">
              <Alert type={actionResponse.type} message={actionResponse.message} />
            </div>
          )}

          {configData && configData._state && configData._state.actions && (
            <Actions
              key="product-configure-actions"
              productFamily={productFamily}
              productLine={productLine}
              model={model}
            />
          )}
        </div>
      </div>
    </Styled>
  );
};

LayoutCanvas.propTypes = {};

export default LayoutCanvas;
