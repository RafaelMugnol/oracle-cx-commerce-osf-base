/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import AddOnItemVariant from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/components/add-on-item-variant';
import AddOnItemShopperInput from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/components/add-on-item-shopper-input';
import {getProductType} from '@oracle-cx-commerce/commerce-utils/selector';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import PropTypes from 'prop-types';

/**
 * Renders the product details of the Add-On item.
 */
const AddOnItemDetails = props => {
  const {addOnItem = {}, addOnItemDetails = {}, selectedAddOns = []} = props;
  const {getState} = useContext(StoreContext);
  const addOnItemTypeDetails = getProductType(getState(), {productTypeId: addOnItemDetails.type});

  const isAddOnProductSelected = selectedAddOns.some(selectedAddOn => selectedAddOn.productId === addOnItemDetails.id);

  return (
    <>
      {isAddOnProductSelected && addOnItemTypeDetails.shopperInputs && addOnItemTypeDetails.shopperInputs.length > 0 && (
        <div className="ProductAddOnItems__AddOnItemShopperInputs">
          {addOnItemTypeDetails.shopperInputs.map(shopperInput => {
            return <AddOnItemShopperInput key={shopperInput.id} shopperInput={shopperInput} {...props} />;
          })}
        </div>
      )}
      {isAddOnProductSelected && addOnItem.addOnOptions.length > 1 && (
        <div className="ProductAddOnItems__AddOnItemVariants">
          {addOnItem.addOnOptions
            .filter(addOnOption => addOnOption.sku.active === true)
            .map(addOnOption => {
              return <AddOnItemVariant key={addOnOption.repositoryId} addOnOption={addOnOption} {...props} />;
            })}
        </div>
      )}
    </>
  );
};

AddOnItemDetails.propTypes = {
  /**
   * Current Add-On item.
   */
  addOnItem: PropTypes.object.isRequired,

  /**
   * Current Add-On Item product details.
   */
  addOnItemDetails: PropTypes.object.isRequired,

  selectedAddOns: PropTypes.arrayOf(PropTypes.object)
};

AddOnItemDetails.defaultProps = {
  selectedAddOns: []
};

export default AddOnItemDetails;
