/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import {ContainerContext} from '@oracle-cx-commerce/react-ui/contexts';
import {updateShopperInputValue} from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/utils';
import PropTypes from 'prop-types';

/**
 * Renders the shopper inputs associated with the Add-On Product.
 */
const AddOnItemShopperInput = props => {
  const {shopperInput = {}, addOnItemDetails = {}} = props;
  const {selections = {}, setSelections} = useContext(ContainerContext);
  const {childItems = []} = selections;

  let shopperInputElement = null;

  /**
   * Method to update the shopper input value.
   * @param {*} newValue
   */
  const onShopperInputChange = shopperInputEvent => {
    updateShopperInputValue({shopperInputEvent, shopperInput, addOnItemDetails, childItems, setSelections});
  };

  /**
   * Renders the drop-down options of the corresponding shopper input.
   * @param {*} values - List of the values associated with drop-down shopper input
   * @returns {array} options - Option tags of the drop-down shopper input.
   */
  const shopperInputDropdownOptions = values => {
    const options = [];
    options.push(
      <option key={''} value={''}>
        {''}
      </option>
    );

    for (let count = 0; count < values.length; count++) {
      options.push(
        <option key={values[count]} value={values[count]}>
          {values[count]}
        </option>
      );
    }

    return options;
  };

  switch (shopperInput.type) {
    case 'shortText':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <label htmlFor={shopperInput.id}>{shopperInput.label}</label>
          <input
            key={shopperInput.id}
            type="text"
            id={shopperInput.id}
            name={`${shopperInput.id}-${shopperInput.type}`}
            data-testid={shopperInput.id}
            onChange={onShopperInputChange}
            aria-label={shopperInput.label}
          />
        </div>
      );
      break;
    case 'checkbox':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <Checkbox
            key={shopperInput.id}
            uniqueId={shopperInput.id}
            name={`${shopperInput.id}-${shopperInput.type}`}
            labelText={shopperInput.label}
            defaultChecked={false}
            onChange={onShopperInputChange}
          ></Checkbox>
        </div>
      );
      break;
    case 'number':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <label htmlFor={shopperInput.id}>{shopperInput.label}</label>
          <input
            key={shopperInput.id}
            type="number"
            id={shopperInput.id}
            name={`${shopperInput.id}-${shopperInput.type}`}
            data-testid={shopperInput.id}
            onChange={onShopperInputChange}
            aria-label={shopperInput.label}
            min={1}
          />
        </div>
      );
      break;
    case 'date':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <label htmlFor={shopperInput.id}>{shopperInput.label}</label>
          <input
            key={shopperInput.id}
            type="date"
            id={shopperInput.id}
            name={`${shopperInput.id}-${shopperInput.type}`}
            data-testid={shopperInput.id}
            onChange={onShopperInputChange}
            aria-label={shopperInput.label}
          />
        </div>
      );
      break;
    case 'enumerated':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <Dropdown
            key={shopperInput.id}
            name={shopperInput.name}
            label={shopperInput.promptText}
            defaultValue={''}
            aria-label={shopperInput.label}
            onChange={onShopperInputChange}
            id={shopperInput.id}
            dataTestId={shopperInput.id}
          >
            {shopperInputDropdownOptions(shopperInput.values)}
          </Dropdown>
        </div>
      );
      break;
    case 'longText':
      shopperInputElement = (
        <div className={'ProductAddOnItems__ShopperInput'}>
          <label htmlFor={shopperInput.id}>{shopperInput.label}</label>
          <textarea
            key={shopperInput.id}
            id={shopperInput.id}
            name={`${shopperInput.id}-${shopperInput.type}`}
            onBlur={onShopperInputChange}
            defaultValue={''}
          ></textarea>
        </div>
      );
      break;

    default:
      shopperInputElement = <></>;
  }

  return shopperInputElement;
};

AddOnItemShopperInput.propTypes = {
  /**
   * Shopper input associated with current Add-On item.
   */
  shopperInput: PropTypes.object.isRequired,

  /**
   * Current Add-On Item product details.
   */
  addOnItemDetails: PropTypes.object.isRequired
};

export default React.memo(AddOnItemShopperInput);
