/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, { useContext, useCallback, useState, useEffect } from 'react';
import AddOnItemDetails from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/components/add-on-item-details';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';
import ProductPrice from '@oracle-cx-commerce/react-widgets/product/product-price/component';
import Styled from '@oracle-cx-commerce/react-components/styled';
import { noop } from '@oracle-cx-commerce/utils/generic';
import {
  fetchAddOnItemDetails,
  initializeAddOnItemDetails,
  updateAddOnItemSelection
} from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/utils';
import { ContainerContext, ProductContext, StoreContext } from '@oracle-cx-commerce/react-ui/contexts';
import { useComponentData } from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/selectors';
import css from '@oracle-cx-commerce/react-widgets/product/product-add-on-items/styles.css';

/**
 * Displays the Add-On Items associated with the base product.
 */
const ProductAddOnItems = props => {
  /** Labels and Resource Texts */

  // /** Container Context Data */
  const { selections = {}, setSelections } = useContext(ContainerContext);
  const { skuId = null, childItems = [] } = selections;

  /** Store Context Data */
  const { action, getState } = useContext(StoreContext);

  /** Sku Data */
  const { addOnProducts = [] } = useComponentData();
  const [addOnItemsWithProductDetails, setAddOnItemsWithProductDetails] = useState({});

  /**
   * failure callback method when get product details call fails.
   */
  const onError = useCallback(
    ({ error: { message = '' } = {} } = {}) => {
      action('notifyClearAll');
      action('notify', { level: 'error', message });
    },
    [action]
  );

  /* fetching add-on items with details on load */
  useEffect(() => {
    fetchAddOnItemDetails({ addOnProducts, setAddOnItemsWithProductDetails, action, getState, onError });
  }, [action, addOnProducts, getState, onError]);

  /**
   * Selects/deselects the Add-On Item associated with the  base product based.
   * @param {Object} event - the event object which contains currently selected add-on item product id.
   */
  const selectAddOnItem = useCallback(
    event => {
      updateAddOnItemSelection({ event, childItems, addOnItemsWithProductDetails, setSelections });
    },
    [addOnItemsWithProductDetails, childItems, setSelections]
  );

  /**
   * checks if the product/skus are active
   * fix: CCSF-23364
   */
  const isActive = useCallback(addOnProduct => {
    let active = false;
    if (
      addOnProduct &&
      addOnProduct.addOnOptions[0] &&
      addOnProduct.addOnOptions[0].product &&
      addOnProduct.addOnOptions[0].product.active
    ) {
      active = true;
      for (const addOnOption of addOnProduct.addOnOptions) {
        if (addOnOption && addOnOption.sku && addOnOption.sku.active) {
          active = true;
          break;
        }
        active = false;
      }
    }

    return active;
  }, []);

  useEffect(() => {
    if (Object.keys(addOnItemsWithProductDetails).length !== addOnProducts.length) {
      initializeAddOnItemDetails({ addOnProducts, setAddOnItemsWithProductDetails, getState });
    }
  }, [addOnProducts, addOnItemsWithProductDetails, getState]);

  return (
    <Styled id="ProductAddOnItems" css={css}>
      <div className="ProductAddOnItems">
        {skuId &&
          addOnProducts.length > 0 &&
          addOnProducts[0].addOnOptions.length > 0 &&
          addOnProducts[0].addOnOptions[0].product &&
          addOnItemsWithProductDetails &&
          Object.keys(addOnItemsWithProductDetails).length > 0 && (
            <div className="ProductAddOnItems__Content">
              {addOnProducts.map(addOnItem => {
                const addOnItemDetails = addOnItemsWithProductDetails[addOnItem.addOnOptions[0].product.repositoryId];
                const addOnItemLabel =
                  addOnItem.addOnOptions.length === 1 ? (
                    <span>
                      {addOnItem.addOnOptions[0].product.displayName} / {` `}
                      <ProductContext.Provider value={addOnItemDetails}>
                        <ContainerContext.Provider
                          value={{ selections: { skuId: addOnItem.addOnOptions[0].sku.repositoryId }, setSelections: noop }}
                        >
                          <span className="ProductItem__Price">
                            <ProductPrice {...props} />
                          </span>
                        </ContainerContext.Provider>
                      </ProductContext.Provider>
                    </span>
                  ) : (
                    <span>{addOnItem.addOnOptions[0].product.displayName}</span>
                  );

                return (
                  <div className="ProductAddOnItems__AddOnProduct" key={`AddOnProduct-${addOnItem.repositoryId}`}>
                    <div className="ProductAddOnItems__AddOnProductName">
                      {
                        // Display Checkbox and Add-On Product Name.
                        addOnItem.addOnOptions.length > 0 && addOnItem.addOnOptions[0].product && isActive(addOnItem) && (
                          <Checkbox
                            id={`AddOnItem-${addOnItem.addOnOptions[0].product.repositoryId}`}
                            name={`${addOnItem.addOnOptions[0].product.repositoryId}`}
                            defaultChecked={false}
                            labelText={addOnItemLabel}
                            onChange={event => {
                              selectAddOnItem(event);
                            }}
                          />
                        )
                      }
                    </div>
                    <div className="ProductAddOnItems__AddOnProductDetails">
                      <AddOnItemDetails
                        key={addOnItem.repositoryId}
                        addOnItemDetails={addOnItemDetails}
                        addOnItem={addOnItem}
                        selectedAddOns={childItems}
                        {...props}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          )}
      </div>
    </Styled>
  );
};

export default ProductAddOnItems;
