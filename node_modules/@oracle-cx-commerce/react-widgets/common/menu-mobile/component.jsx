/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useRef, useState} from 'react';

import MenuButton from '@oracle-cx-commerce/react-widgets/common/menu-mobile/components/menu-button';
import {MenuMobileContext} from '@oracle-cx-commerce/react-widgets/common/menu-mobile/context';
import Sidebar from '@oracle-cx-commerce/react-widgets/common/menu-mobile/components/sidebar';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/menu-mobile/styles.css';

const idOfMenuToggleButton = 'MenuMobile__Toggle';

/**
 * Menu widget that provides a button and on press of the button, a sidebar container opens.
 * @param {*} props
 */
const MenuMobile = ({regions = [], menuIconCloseAltText, menuIconOpenAltText}) => {
  const [menuOpen, setMenuOpen] = useState(false);
  const [hiddenByOverlaidContent, setHiddenByOverlaidContent] = useState(false);
  const closeButtonRef = useRef();

  // Opens or closes the menu sidebar
  const toggleMenu = useCallback(open => {
    setMenuOpen(open);
  }, []);

  // Signifies whether the menu sidebar is visible to the user
  const isVisible = useCallback(() => {
    return menuOpen && !hiddenByOverlaidContent;
  }, [hiddenByOverlaidContent, menuOpen]);

  // Close the menu when the escape key is pressed
  const onEscapeKeyDown = useCallback(() => {
    if (menuOpen && isVisible()) closeButtonRef.current.click();
  }, [isVisible, menuOpen]);

  const contextValue = {
    config: {
      menuAccessibilityOpenText: menuIconOpenAltText,
      menuAccessibilityCloseText: menuIconCloseAltText,
      regions
    },
    menuOpen,
    closeMenuButtonId: idOfMenuToggleButton,
    toggleMenu,
    isVisible,
    hideParentViewFromA11y: setHiddenByOverlaidContent
  };

  return (
    <MenuMobileContext.Provider value={contextValue}>
      <Styled id="MenuMobile" css={css}>
        {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions*/}
        <div
          className="MenuMobile"
          onKeyDown={e => {
            if (e.key === 'Escape') onEscapeKeyDown();
          }}
        >
          <MenuButton ref={closeButtonRef} />
          <Sidebar />
        </div>
      </Styled>
    </MenuMobileContext.Provider>
  );
};

export default React.memo(MenuMobile);
