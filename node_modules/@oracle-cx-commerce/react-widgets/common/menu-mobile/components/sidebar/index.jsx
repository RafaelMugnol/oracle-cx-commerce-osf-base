/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useCallback, useContext, useEffect, useRef} from 'react';

import {MenuMobileContext} from '@oracle-cx-commerce/react-widgets/common/menu-mobile/context';
import MenuMobileIcon from '@oracle-cx-commerce/react-widgets/common/menu-mobile/components/menu-mobile-icon';
import Region from '@oracle-cx-commerce/react-components/region';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/menu-mobile/components/sidebar/styles.css';

const focussableElements =
  'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled])';

/**
 *  Provides a sidebar that has a close button and then child regions as specified in design studio
 */
const SideBar = () => {
  const {
    menuOpen,
    config: {regions, menuAccessibilityCloseText},
    isVisible,
    closeMenuButtonId
  } = useContext(MenuMobileContext);

  const sideBarRef = useRef();
  const menuCloseButtonRef = useRef();

  const handleClickOnMenuCloseButton = useCallback(() => {
    menuCloseButtonRef.current.click();
  }, [menuCloseButtonRef]);

  const handleKeyDown = useCallback(
    e => {
      if (e.key === 'Enter') handleClickOnMenuCloseButton(); // deal with return key
    },
    [handleClickOnMenuCloseButton]
  );

  // focus on the top element of the view as soon as the view opens
  useEffect(() => {
    if (isVisible()) {
      if (sideBarRef.current) {
        // Find the element at the top of the sidebar and give it focus, doing it this way allows for the header to be rearranged and maintain functionality
        const focussable = Array.from(sideBarRef.current.querySelectorAll(focussableElements));
        const topElement = focussable[0];
        topElement.focus();
      }
    }
  }, [isVisible, sideBarRef]);

  return (
    <Styled id="MenuSidebar" css={css}>
      <div className="MenuMobile__Modal" aria-hidden={!menuOpen} role="dialog" ref={sideBarRef}>
        <div className="MenuMobile__IconContainer">
          <MenuMobileIcon
            className="MenuMobile__Icon MenuMobile__Icon--close"
            ref={menuCloseButtonRef}
            tabIndex={isVisible() ? 0 : -1}
            onKeyDown={handleKeyDown}
            aria-hidden={!isVisible()}
            aria-label={menuAccessibilityCloseText}
            role="button"
          />
          {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events */}
          <div onClick={handleClickOnMenuCloseButton} />
        </div>
        {regions.map((regionId, index) => (
          /*
            Using region ids as keys causes unnecessary DOM reconciliation.
              
            https://reactjs.org/docs/reconciliation.html#keys
          */
          <Region key={index} regionId={regionId} /> // eslint-disable-line react/no-array-index-key
        ))}
      </div>
      <div className="MenuMobile__ModalOverlay">
        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
        <label htmlFor={closeMenuButtonId} />
      </div>
    </Styled>
  );
};

export default React.memo(SideBar);
