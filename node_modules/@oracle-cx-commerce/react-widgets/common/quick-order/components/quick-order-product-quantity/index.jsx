/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/quick-order/components/quick-order-product-quantity/style.css';
import PropTypes from 'prop-types';

/**
 * maxLength Check for number input
 * @param  {Event} event
 */
const maxLengthCheck = event => {
  const inputValue = event.target.value;
  if (inputValue && inputValue.length > 3) {
    event.target.value = inputValue.slice(0, 3);
  }
};

/*
 ** Quantity picker sub component for quick order widget.
 */
const Quantity = props => {
  const {
    label,
    id = '',
    name = '',
    'data-testid': dataTestId = '',
    handleQuantityChanged,
    value,
    formDisabled,
    errorType = '',
    quantityRef
  } = props;

  /**
   * Handler for quantity changed
   * @param  {Event} event
   */
  const onQuantityChange = useCallback(
    event => {
      const qty = event.target.value;
      const parsedQty = parseInt(qty, 10);
      handleQuantityChanged(parsedQty);
    },
    [handleQuantityChanged]
  );

  return (
    <Styled id="QuickOrder__Quantity" css={css}>
      <div>
        <div className="QuickOrder__Quantity__InputWrapper">
          <input
            type="number"
            id={id}
            name={name}
            data-testid={dataTestId}
            className={`Quantity__Textbox ${errorType ? 'QuickOrder__Quantity__Invalid' : ''}`}
            value={value}
            onChange={onQuantityChange}
            onInput={maxLengthCheck}
            aria-label={label}
            disabled={formDisabled}
            min={1}
            max={999} //TODO
            ref={quantityRef}
          />
        </div>
      </div>
    </Styled>
  );
};

Quantity.propTypes = {
  /** value of quantity input */
  value: PropTypes.number.isRequired,
  /** Callback function to be invoked when quantity is changed */
  handleQuantityChanged: PropTypes.func.isRequired,
  /** boolean flag that determines if add to cart is in progress */
  formDisabled: PropTypes.bool.isRequired,
  /** errorType that determines the styling required for quantity field */
  errorType: PropTypes.string,
  /** ref that determines quantity input element */
  quantityRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({current: PropTypes.any})]).isRequired
};

Quantity.defaultProps = {
  errorType: ''
};

export default Quantity;
