/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useRef} from 'react';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/quick-order/components/quick-order-search-results/styles.css';
import Img from '@oracle-cx-commerce/react-components/img';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';
import {getSearchResults} from '@oracle-cx-commerce/react-widgets/common/quick-order/components/quick-order-search-results/selectors';
import PropTypes from 'prop-types';

/**
 * Component that displays details about the typeahead search results
 * (i.e., a pop up with the results, if there are any).
 */
const SearchResultsPanel = props => {
  const {records, id, onSelect, searchInput} = props;
  const timeoutId = useRef(null);
  const formatCurrency = useNumberFormatter({style: 'currency'});

  const {action} = useContext(StoreContext);

  /**
   * handler for onBlur to search results element.
   */
  const onSearchResultsBlur = useCallback(() => {
    timeoutId.current = setTimeout(() => {
      action('clearTypeahead');
    }, 200);
  }, [action]);

  /**
   * handler for onFocus to search results element.
   */
  const onSearchResultsFocus = useCallback(() => {
    clearTimeout(timeoutId.current);
  }, []);

  return (
    <Styled id="QuickOrder__SearchResults" css={css}>
      {searchInput.current === id && records && records.length > 0 && (
        <div className="QuickOrder__SearchResults">
          {records &&
            records.map((record, index) => (
              <div
                className={`${
                  index > 0
                    ? 'QuickOrder__SearchResults_RecordRow_border'
                    : 'QuickOrder__SearchResults_RecordRow_noBorder'
                }`}
                key={record.records[0].attributes['product.repositoryId'][0]}
              >
                <button
                  className="QuickOrder__SearchResults_RecordRow"
                  type="button"
                  onClick={() => {
                    onSelect(record.records[0].attributes, record.numRecords);
                  }}
                  onFocus={onSearchResultsFocus}
                  onBlur={onSearchResultsBlur}
                  data-testid={`QuickOrder__SearchResults_${index}`}
                >
                  <div className="QuickOrder__SearchResults_RecordColumn QuickOrder__SearchResults_Image col-4">
                    <Img
                      src={
                        record.records[0].attributes['sku.listingThumbImageURL']
                          ? record.records[0].attributes['sku.listingThumbImageURL'][0]
                          : record.records[0].attributes['product.primaryThumbImageURL'][0]
                      }
                      title={record.records[0].attributes['product.displayName']}
                      alt={record.records[0].attributes['product.displayName']}
                      size="xsmall"
                    />
                  </div>
                  <div className="QuickOrder__SearchResults_RecordColumn QuickOrder__SearchResults_Name col-5">
                    <div>
                      <b>{record.records[0].attributes['product.displayName']}</b>
                    </div>
                    <div>{`SKU: ${record.records[0].attributes['sku.repositoryId']}`}</div>
                  </div>
                  <div className="QuickOrder__SearchResults_RecordColumn QuickOrder__SearchResults_Price col-3">
                    <div className="QuickOrder__SearchResults_PriceItem">
                      <b>{formatCurrency(record.records[0].attributes['sku.activePrice'][0], props.priceListGroup)}</b>
                    </div>
                  </div>
                </button>
              </div>
            ))}
        </div>
      )}
    </Styled>
  );
};

SearchResultsPanel.propTypes = {
  /** instance id of each row in quick order widget */
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  /** current search input row that is active */
  searchInput: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({current: PropTypes.number})]).isRequired,
  /** callback to handle click on a search result */
  onSelect: PropTypes.func.isRequired
};

SearchResultsPanel.defaultProps = {};

export default connect(getSearchResults)(SearchResultsPanel);
