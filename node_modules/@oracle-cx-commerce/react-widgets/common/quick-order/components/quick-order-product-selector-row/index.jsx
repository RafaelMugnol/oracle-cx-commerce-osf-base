/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {ContainerContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {Suspense, useCallback, useContext, useRef, useState} from 'react';
import {debounce, throttle} from '@oracle-cx-commerce/utils/generic';

import PropTypes from 'prop-types';
import Quantity from '@oracle-cx-commerce/react-widgets/common/quick-order/components/quick-order-product-quantity';
import SearchResultsPanel from '@oracle-cx-commerce/react-widgets/common/quick-order/components/quick-order-search-results';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/quick-order/components/added-to-cart-modal/style.css';
import {getGlobalContext} from '@oracle-cx-commerce/commerce-utils/selector';
import {getProductData} from '@oracle-cx-commerce/react-widgets/profile/profile-purchase-list-information/utils';
import {useProductData} from '@oracle-cx-commerce/react-widgets/profile/profile-purchase-list-information/selectors';

// Lazy load Quick View
const QuickView = React.lazy(() =>
  import('@oracle-cx-commerce/react-widgets/profile/profile-purchase-list-information/components/quick-view')
);

/**
 * Sub component for each input row in quick order widget.
 */
const ProductSelectorRow = props => {
  const {entry, formDisabled, skuSuggestions, listSkuEntries, setListSkuEntries, searchInput, resources} = props;

  const {action, getState} = useContext(StoreContext);
  const {locale} = getGlobalContext(getState());

  const clearTypeaheadThrottle = throttle(action, 200);
  const stopPropogation = useRef(false);
  const [showQuickView, setShowQuickView] = useState(false);
  const [product, setProduct] = useState({});
  const [currentRecord, setCurrentRecord] = useState({});
  const {selections, setSelections} = useProductData();
  const quantityRef = useRef(null);

  /**
   * Handler to open quick view pop up and fetch product data
   */
  const handleQuickView = useCallback(
    productId => {
      if (productId) {
        getProductData(action, productId, response => {
          const {products} = response.getProductResponse.delta.catalogRepository;
          setProduct(products[Object.keys(products)[0]]);
        });
      }

      // Open quick view modal
      setShowQuickView(true);
    },
    [setShowQuickView, setProduct, action]
  );

  /**
   * gets error message based on the given error type.
   */
  const getErrorMessage = errorType => {
    if (errorType === 'invalid') {
      return resources.quickOrderInvalidText;
    }
    if (errorType === 'inactive') {
      return resources.quickOrderInactiveText;
    }
    if (errorType === 'outOfStock') {
      return resources.quickOrderOutOfStockText;
    }
    if (errorType === 'inSufficientStock') {
      return resources.quickOrderInsufficientStockText;
    }
    if (errorType === 'invalidImport') {
      return resources.quickOrderRowInvalidText;
    }
    if (errorType === 'invalidQuantity') {
      return resources.quickOrderInvalidQuantity;
    }
  };

  /**
   * fetches search results using typeahead action based on the search input.
   */
  const fetchSearchResults = useCallback(
    debounce((event, value) => {
      // Issue a typeahead request if input is at least one character for
      // Chinese, Japanese and Korean locales, or two characters for all other locales
      if (value.length > (locale.startsWith('zh') || locale.startsWith('ja') || locale.startsWith('ko') ? 0 : 1)) {
        action('typeahead', {
          text: value,
          maxResults: skuSuggestions,
          searchServicePath: 'Default/services/typeahead',
          searchKey: 'TypeAhead'
        });
      } else {
        action('clearTypeahead');
      }
    }, 200),
    [action, locale, skuSuggestions]
  );

  /**
   * handler for onChange to search input element.
   */
  const onInput = useCallback(
    (event, id) => {
      const {value} = event.target;
      searchInput.current = id || 0;
      const skuEntries = {...listSkuEntries};
      skuEntries[searchInput.current].product.displayName = value;
      skuEntries[searchInput.current].product.catRefId = '';
      skuEntries[searchInput.current].product.errorType = '';
      setListSkuEntries(skuEntries);
      fetchSearchResults(event, value);
    },
    [listSkuEntries, fetchSearchResults, searchInput, setListSkuEntries]
  );

  /**
   * handler for onBlur to search input element.
   */
  const onSearchInputBlur = useCallback(() => {
    if (!stopPropogation.current) {
      clearTypeaheadThrottle('clearTypeahead');
    }
    stopPropogation.current = false;
  }, [clearTypeaheadThrottle]);

  /**
   * handler for onKeyDown to search input element.
   */
  const onSearchInputKey = useCallback(event => {
    if (event.key === 'Tab') {
      stopPropogation.current = true;
    }
  }, []);

  /**
   * handler for product selection from search results.
   */
  const addToQuickOrder = useCallback(
    (product, variantData = {}) => {
      let skuId = product['sku.repositoryId'][0];
      if (variantData && variantData.skuId) {
        skuId = variantData.skuId;
      }
      const skuEntries = {...listSkuEntries};
      [skuEntries[searchInput.current].product.productId] = product['product.repositoryId'];
      [skuEntries[searchInput.current].product.catRefId] = [skuId];

      setListSkuEntries(skuEntries);
      if (quantityRef.current) {
        quantityRef.current.focus();
      }
      action('clearTypeahead');
    },
    [action, listSkuEntries, searchInput, setListSkuEntries]
  );

  /**
   * handler for product selection from search results and open quick view modal.
   */
  const selectProduct = useCallback(
    (product, variants) => {
      if (variants !== 1) {
        setCurrentRecord(product);
        handleQuickView(product['product.repositoryId'][0]);
      } else {
        addToQuickOrder(product);
      }
    },
    [addToQuickOrder, handleQuickView]
  );

  /**
   * handler for onChange to quantity input.
   */
  const handleQuantityChanged = useCallback(
    quantity => {
      const skuEntries = {...listSkuEntries};
      skuEntries[searchInput.current].product.quantity = quantity;
      if (isNaN(quantity) || quantity <= 0) {
        skuEntries[searchInput.current].product.errorType = 'invalidQuantity';
      } else {
        skuEntries[searchInput.current].product.errorType = '';
      }
      setListSkuEntries(skuEntries);
    },
    [listSkuEntries, searchInput, setListSkuEntries]
  );

  /**
   * Handler to close quick view pop up
   */
  const closeQuickView = useCallback(() => {
    setShowQuickView(false);
  }, [setShowQuickView]);

  return (
    <Styled id="AddedToCart" css={css}>
      <ContainerContext.Provider value={{selections, setSelections}}>
        <div className="QuickOrder__Row" key={`Product-${entry.id}`}>
          <div className="QuickOrder__Column1">
            <label htmlFor={`ProductName-${entry.id}`}>{}</label>
            <input
              name="Ntt"
              type="search"
              id={`ProductName-${entry.id}`}
              aria-label={resources.textQuickOrderSearchRow}
              className={`QuickOrder__RowInput ${entry.product.errorType ? 'QuickOrder__RowInput__Invalid' : ''}`}
              value={entry.product.catRefId || entry.product.displayName || ''}
              placeholder={resources.textQuickOrderSearchRow}
              autoComplete="off"
              onChange={event => {
                onInput(event, entry.id);
              }}
              onBlur={onSearchInputBlur}
              onKeyDown={onSearchInputKey}
              disabled={formDisabled}
            />
          </div>
          <SearchResultsPanel id={entry.id} searchInput={searchInput} onSelect={selectProduct} />
          {typeof window !== 'undefined' && (
            <Suspense fallback={null}>
              <QuickView
                closeQuickView={closeQuickView}
                showQuickView={showQuickView}
                product={product}
                record={currentRecord}
                addToList={addToQuickOrder}
                altText={''}
                labelAddToButton={resources.labelAddToQuickOrder}
                {...props}
              />
            </Suspense>
          )}
          <div className="QuickOrder__Column2">
            <Quantity
              id={`QuickOrderProductQuantity-${entry.id}`}
              name={`QuickOrderProductQuantity-${entry.id}`}
              label={resources.labelProductQuantity}
              data-testid={`QuickOrderProductQuantity-${entry.id}`}
              handleQuantityChanged={quantity => {
                searchInput.current = entry.id;
                handleQuantityChanged(quantity);
              }}
              value={entry.product.quantity}
              formDisabled={formDisabled}
              errorType={entry.product.errorType}
              quantityRef={quantityRef}
            />
          </div>
          {entry.product.errorType && (
            <div className="QuickOrder__InlineError">{getErrorMessage(entry.product.errorType)}</div>
          )}
        </div>
      </ContainerContext.Provider>
    </Styled>
  );
};

ProductSelectorRow.propTypes = {
  /** sku entries object representing rows in quick order widget */
  listSkuEntries: PropTypes.objectOf(PropTypes.object).isRequired,
  /** Callback function to be invoked to update the sku entries list */
  setListSkuEntries: PropTypes.func.isRequired,
  /** widget config property suggesting how many search results to be displayed in typeahead */
  skuSuggestions: PropTypes.string.isRequired,
  /** instance of each row in quick order widget */
  entry: PropTypes.objectOf(PropTypes.any).isRequired,
  /** current search input row that is active */
  searchInput: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({current: PropTypes.number})]).isRequired,
  /** boolean flag that determines if add to cart is in progress */
  formDisabled: PropTypes.bool.isRequired
};

ProductSelectorRow.defaultProps = {};

export default ProductSelectorRow;
