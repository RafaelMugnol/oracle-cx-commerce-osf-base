/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import React, {useEffect, useMemo, useState} from 'react';
import {getPromotionUpsellMessageData} from '@oracle-cx-commerce/react-widgets/common/promotion-upsell-messaging/selectors';
import css from '@oracle-cx-commerce/react-widgets/common/promotion-upsell-messaging/styles.css';
/**
 * A component for displaying list of promotion up-sell messaging
 */
const PromotionUpsellMessaging = props => {
  const {messageLimit = 1, tags = '', messages = []} = props;

  const maxNumberOfMessages = parseInt(messageLimit, 10);

  const [current, setCurrent] = useState(0);

  const widgetTags = useMemo(() => {
    return tags.split(',').map(tag => {
      return tag.trim();
    });
  }, [tags]);

  const messageToBeShown = useMemo(() => {
    const computedMessages = [];
    const messagesLength = messages.length || 0,
      widgetTagsLength = widgetTags.length || 0;
    if (messagesLength > 0 && widgetTagsLength > 0 && maxNumberOfMessages > 0) {
      for (let j = 0; j < messagesLength; j++) {
        for (let i = 0; i < widgetTagsLength; i++) {
          if (messages[j].tags.includes(widgetTags[i])) {
            computedMessages.push(messages[j].text);
          }
          if (computedMessages.length === maxNumberOfMessages) break;
        }
        if (computedMessages.length === maxNumberOfMessages) break;
      }
    }

    return computedMessages;
  }, [maxNumberOfMessages, messages, widgetTags]);

  useEffect(() => {
    const timer = setTimeout(() => {
      if (current + 1 === messageToBeShown.length || messageToBeShown.length < current - 1) {
        setCurrent(0);
      } else {
        setCurrent(current + 1);
      }
    }, 5000);

    return () => clearTimeout(timer);
  });

  return (
    <Styled id="PromotionUpsellMessaging" css={css}>
      <div className="PromotionUpsellMessaging">
        {messageToBeShown.length > 0 && messageToBeShown[current] && (
          // eslint-disable-next-line react/no-danger
          <div dangerouslySetInnerHTML={{__html: messageToBeShown[current]}}></div>
        )}
      </div>
    </Styled>
  );
};
export default connect(getPromotionUpsellMessageData)(PromotionUpsellMessaging);
