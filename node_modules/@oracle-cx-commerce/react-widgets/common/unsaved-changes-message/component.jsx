/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {Suspense, useCallback, useEffect, useRef, useState} from 'react';

import Alert from '@oracle-cx-commerce/react-components/alert';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/common/unsaved-changes-message/styles.css';

const Modal = React.lazy(() => import('@oracle-cx-commerce/react-components/modal'));

/**
 * Determine if there are any unsaved forms in the document.
 *
 * @returns {Boolean}
 */
const documentHasUnsavedChanges = () => document.querySelectorAll('form[data-dirty=true]').length > 0;

const UnsavedChangesMessage = props => {
  const {cssOverride = ''} = props;
  const {headingUnsavedChanges, textUnsavedChangesWarningMessage, actionContinue, actionCancel, textClose} = props;

  const [showUnsavedChangesMessage, setShowUnsavedChangesMessage] = useState(false);

  /**
   * Mark all dirty forms (in the document) as clean.
   */
  const clearAllUnsavedChanges = () => {
    for (const form of document.querySelectorAll('form[data-dirty=true]')) {
      delete form.dataset.dirty;
    }
  };

  const eventsInitialized = useRef(false);
  const anchorTag = useRef(null);

  /**
   * Closes the Unsaved Changes Modal and redirects the user to Target page of the link clicked.
   */
  const gotoTargetPage = useCallback(() => {
    setShowUnsavedChangesMessage(false);
    clearAllUnsavedChanges();

    anchorTag.current.click();
  }, []);

  /**
   * Sets the boolean flag value as TRUE to display the Modal and stores the Anchor tag in the reference.
   * @param {*} anchor - Anchor tag of the link to target page.
   */
  const showModal = useCallback(anchor => {
    setShowUnsavedChangesMessage(true);
    anchorTag.current = anchor;
  }, []);

  /**
   * Renders the Unsaved Changes Warning Message on the modal.
   */
  const getUnsavedChangesWarningMessage = () => (
    <div
      className="UnsavedChangesMessage__WarningMessage__Text"
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML={{
        __html: textUnsavedChangesWarningMessage
      }}
    ></div>
  );

  /**
   * Method hide the Unsaved Changes Message overlay
   * @param {*} event - contains context of the event from which event is triggered
   */
  const hideUnsavedChangesMessage = event => {
    if (event) {
      event.preventDefault();
    }
    setShowUnsavedChangesMessage(false);
  };

  /**
   * Renders the Unsaved Changes Message Modal.
   */
  const unsavedChangesMessageModal = () => (
    <div className="UnsavedChangesMessage__Content">
      <div className="UnsavedChangesMessage__WarningMessage">
        <Alert id="UnsavedChangesMessage" type={'warning'} message={getUnsavedChangesWarningMessage()} />
      </div>

      <div className="UnsavedChangesMessage__Buttons">
        <button type="button" className="UnsavedChangesMessage__SubmitButton" onClick={gotoTargetPage}>
          {actionContinue}
        </button>
        <button
          type="button"
          className="UnsavedChangesMessage__CancelButton secondary"
          onClick={hideUnsavedChangesMessage}
        >
          {actionCancel}
        </button>
      </div>
    </div>
  );

  useEffect(() => {
    if (eventsInitialized.current === false) {
      eventsInitialized.current = true;

      addEventListener(
        'click',
        event => {
          const anchor = event.target.closest('a[href]');

          // Is this a hyperlink click?
          if (!anchor || !anchor.href) {
            return;
          }

          if (documentHasUnsavedChanges()) {
            event.preventDefault();

            // Simulate an modal
            showModal(anchor);
          }
        },
        true // !!! Capture click event !!!
      );
    }
  }, [showModal]);

  return (
    <Styled id="UnsavedChangesMessage" css={css}>
      <>
        {typeof window !== 'undefined' && (
          <Suspense fallback={null}>
            <div className="UnsavedChangesMessage">
              <Modal
                show={showUnsavedChangesMessage}
                closeIconTitle={textClose}
                closeAriaLabel={textClose}
                onClose={hideUnsavedChangesMessage}
                title={headingUnsavedChanges}
                cssOverride={cssOverride}
              >
                {unsavedChangesMessageModal()}
              </Modal>
            </div>
          </Suspense>
        )}
      </>
    </Styled>
  );
};

export default UnsavedChangesMessage;
