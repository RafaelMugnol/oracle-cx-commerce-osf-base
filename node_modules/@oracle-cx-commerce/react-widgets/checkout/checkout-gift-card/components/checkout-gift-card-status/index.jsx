/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CheckIcon from '@oracle-cx-commerce/react-components/icons/check';
import React, {useContext, useState} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/components/checkout-gift-card-status/styles.css';
import {getCheckoutGiftCardStatusData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/components/checkout-gift-card-status/selectors';
import {t} from '@oracle-cx-commerce/utils/generic';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';
import {isPaymentGroupPaid} from '@oracle-cx-commerce/react-components/utils/payment';
import {ORDER_STATE_PENDING_PAYMENT, ORDER_STATE_QUOTED} from '@oracle-cx-commerce/commerce-utils/constants';

//constants
const CURRENCY = 'currency',
  REMOVE_LINK_ID_PREFIX = 'removeAppliedGiftCardBalance-';

/**
 * This component show payment status of the applied gift cards to the order.
 * This is a display component for the applied gift card.
 * @param {Object} props properties object
 */
const CheckoutGiftCardStatus = props => {
  const {
    actionRemove,
    giftCardErrorMessage,
    textGiftCardAdded,
    setGiftCardErrorMessage,
    labelRemoveGiftCard,
    orderState,
    textGiftCardAddedToOrder
  } = props;
  //variable to hold gift card payment groups
  const {giftCardPaymentGroups = []} = props;
  //local state 'isInProgress' to disable 'apply' and 'check balance' buttons
  //when an action triggered by either of these button is progress.
  const [isInProgress, setIsInProgress] = useState(false);
  const formatCurrency = useNumberFormatter({style: CURRENCY});
  const {action} = useContext(StoreContext);

  /**
   * Handler method to remove applied gift card from the order
   * @param {string} giftCardPaymentGroupId the payment group id for the applied
   * gift card which to be removed from the order
   */
  const removeGiftCard = giftCardPaymentGroupId => {
    const payload = {
      paymentGroupId: giftCardPaymentGroupId
    };
    setIsInProgress(true);
    //clear previous error messages
    if (giftCardErrorMessage !== '') {
      setGiftCardErrorMessage('');
    }
    action('deleteAppliedPayment', payload)
      .then(response => {
        if (response.error && response.error.errors && response.error.errors.length > 0) {
          const errorMessage = response.error.errors.reduce(
            (errorMessage, error) => `${errorMessage} ${error.message}`,
            ''
          );
          setGiftCardErrorMessage(errorMessage);
        } else if (response.error && response.error.message) {
          setGiftCardErrorMessage(response.error.message);
        }
      })
      .finally(() => {
        setIsInProgress(false);
      });
  };

  const isContainsAutorizedGiftCard = giftCards => {
    return Object.values(giftCards).some(isPaymentGroupPaid);
  };

  //UI to show applied gift card payment status
  return (
    <Styled id="CheckoutGiftCardStatus" css={css}>
      {giftCardPaymentGroups.length > 0 &&
        ((orderState === ORDER_STATE_PENDING_PAYMENT && isContainsAutorizedGiftCard(giftCardPaymentGroups)) ||
          orderState !== ORDER_STATE_PENDING_PAYMENT) && (
          <div className="CheckoutGiftCardStatus">
            {giftCardPaymentGroups.map(giftCard => (
              <React.Fragment key={`PaymentGroup-${giftCard.paymentGroupId}`}>
                {(orderState !== ORDER_STATE_PENDING_PAYMENT ||
                  (orderState === ORDER_STATE_PENDING_PAYMENT && isPaymentGroupPaid(giftCard))) && (
                  <div key={giftCard.maskedCardNumber} className="CheckoutGiftCardStatus__Content">
                    <div className="CheckoutGiftCardStatus__IconContainer">
                      <CheckIcon className="CheckoutGiftCardStatus__Icon--Check" />
                    </div>
                    <div className="CheckoutGiftCardStatus__MessageContainer">
                      <div>
                        <span className="CheckoutGiftCardStatus__StatutText">
                          {orderState !== ORDER_STATE_PENDING_PAYMENT
                            ? t(textGiftCardAdded, {
                                giftCardAmount: formatCurrency(Math.abs(giftCard.amount))
                              })
                            : t(textGiftCardAddedToOrder, {
                                giftCardAmount: formatCurrency(Math.abs(giftCard.amount))
                              })}
                        </span>
                      </div>
                      { (orderState !== ORDER_STATE_PENDING_PAYMENT && orderState !== ORDER_STATE_QUOTED) && (
                        <button
                          className="CheckoutGiftCardStatus__LinkRemove"
                          id={`${REMOVE_LINK_ID_PREFIX}${giftCard.giftCardNumber}`}
                          type="button"
                          aria-label={`${t(textGiftCardAdded, {
                            giftCardAmount: formatCurrency(Math.abs(giftCard.amount))
                          })} ${labelRemoveGiftCard}`}
                          disabled={isInProgress}
                          onClick={() => removeGiftCard(giftCard.paymentGroupId)}
                        >
                          {t(actionRemove)}
                        </button>
                      )}
                    </div>
                  </div>
                )}
              </React.Fragment>
            ))}
          </div>
        )}
    </Styled>
  );
};

export default connect(getCheckoutGiftCardStatusData)(CheckoutGiftCardStatus);
