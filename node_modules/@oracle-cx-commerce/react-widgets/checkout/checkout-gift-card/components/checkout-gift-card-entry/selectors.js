/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  getCurrentOrder,
  getInquireBalanceResponseForCurrentUser,
  getPaymentConfigurations,
  getPage,
  getOrder,
  getCurrentOrderId,
  getCurrentProfileId
} from '@oracle-cx-commerce/commerce-utils/selector';
import {
  PAYMENT_TYPE_GIFTCARD,
  ORDER_STATE_PENDING_PAYMENT,
  ORDER_STATE_QUOTED
} from '@oracle-cx-commerce/commerce-utils/constants';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import {
  isPaymentDisabled,
  getAmountRemaining,
  getAmountRemainingPaymentGroup
} from '@oracle-cx-commerce/react-components/utils/payment';

export const getCheckoutGiftCardEntryData = state => {
  //get payments configurations
  const {settings = {}} = getPaymentConfigurations(state);
  //get gift card payment configurations
  const giftCardGatewaySettings =
    settings[Object.keys(settings).find(key => settings[key].paymentMethods === PAYMENT_TYPE_GIFTCARD)];
  //inquire gift card balances
  const {giftCards} = getInquireBalanceResponseForCurrentUser(state);
  const contextOrderId = getPage(state).contextId;
  const order = contextOrderId ? getOrder(state, {id: contextOrderId}) : getCurrentOrder(state);
  const {priceInfo: {total = 0} = {}, numberOfItems = 0, paymentGroups = {}} = order;

  // get applied gift card payment groups
  // which is not expired or used amount is greater than zero
  const giftCardPaymentGroups = Object.values(paymentGroups).filter(
    pGroup => pGroup.paymentMethod === PAYMENT_TYPE_GIFTCARD && !pGroup.paymentExpired && pGroup.amount > 0
  );

  //determine whether new payment can be applied or not
  const isGiftCardPaymentDisabled = isPaymentDisabled(order);
  let applicableOrderAmount = 0;

  // if payment is not disabled then determine the applicable amount for gift card
  if (!isGiftCardPaymentDisabled) {
    if (order && order.state !== ORDER_STATE_PENDING_PAYMENT && order.state !== ORDER_STATE_QUOTED) {
      const amountRemainingPaymentGroup = getAmountRemainingPaymentGroup(paymentGroups);

      //determine amount which will be applicable for new gift card
      if (numberOfItems > 0) {
        if (Object.keys(paymentGroups).length === 0) {
          applicableOrderAmount = total;
        } else if (amountRemainingPaymentGroup) {
          applicableOrderAmount = amountRemainingPaymentGroup.amount;
        }
      }
    } else {
      applicableOrderAmount = getAmountRemaining(order);
    }
  }

  return {
    applicableOrderAmount,
    //an empty object is always treated as new object and causes render of widget so explicitly
    //check if gift cards is not empty object then only return it otherwise return undefined
    giftCards: !isEmptyObject(giftCards) ? giftCards : undefined,
    giftCardGatewaySettings,
    giftCardPaymentGroups,
    isGiftCardPaymentDisabled,
    orderId: contextOrderId ? contextOrderId : getCurrentOrderId(state),
    orderState: order.state,
    currentProfileId: getCurrentProfileId(state),
    uuid: order.uuid
  };
};
