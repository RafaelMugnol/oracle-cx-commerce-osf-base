/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useState} from 'react';
import Alert from '@oracle-cx-commerce/react-components/alert';
import CheckoutGiftCardEntry from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/components/checkout-gift-card-entry';
import CheckoutGiftCardStatus from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/components/checkout-gift-card-status';
import Minus from '@oracle-cx-commerce/react-components/icons/minus';
import Plus from '@oracle-cx-commerce/react-components/icons/plus';
import {PaymentsContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/styles.css';
import {getCheckoutGiftCardData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-gift-card/selectors';
import {noop} from '@oracle-cx-commerce/utils/generic';
import PropTypes from 'prop-types';

/**
 * Expand and collapse Title component
 * It also has alert component to show error/warning messages
 * @param {Object} props the properties object
 */
const HeadingRegion = props => {
  const {labelApplyAGiftCard, setShowApplyGiftCardView, showApplyGiftCardView} = props;

  /**
   * Handler method to show or hide enter gift card view on click of '+'/'-' button
   */
  const toggleGiftCardView = () => {
    setShowApplyGiftCardView(!showApplyGiftCardView);
  };

  return (
    <div className="CheckoutGiftCard__HeadingContainer">
      <button
        type="button"
        onClick={toggleGiftCardView}
        aria-label={labelApplyAGiftCard}
        aria-expanded={showApplyGiftCardView}
        className="CheckoutGiftCard__IconContainer"
      >
        <span className="CheckoutGiftCard__Icon">{showApplyGiftCardView ? <Minus /> : <Plus />}</span>
      </button>
      <span
        tabIndex="-1"
        aria-label={labelApplyAGiftCard}
        onClick={toggleGiftCardView}
        onKeyDown={() => noop}
        role="button"
      >
        <h4 className="CheckoutGiftCard__HeadingLabel">{labelApplyAGiftCard}</h4>
      </span>
    </div>
  );
};

/***
 * Error component to show errors as alerts
 * @param {Object} props the properties object
 */
const ErrorRegion = props => {
  const {giftCardErrorMessage, id} = props;

  return (
    giftCardErrorMessage !== '' && (
      <div className="CheckoutGiftCard__ErrorContainer" aria-live="polite" role="alert">
        <Alert id={`giftCardEntryError-${id}`} type="error" message={giftCardErrorMessage}></Alert>
      </div>
    )
  );
};

/**
 * This is top level component which combines title component, checkout gift card entry and checkout gift card status components
 * It provides functionality to apply a gift card and display already applied gift card
 * @param {Object} props properties object
 */
const CheckoutGiftCard = props => {
  //UI to show applied gift card payment status
  const {isDisplayGiftCard, giftCardDefaultState, PaymentInfoForScheduledOrder} = props;
  //local state 'showApplyGiftCardView' to handle visibility of add gift card view
  const [showApplyGiftCardView, setShowApplyGiftCardView] = useState(giftCardDefaultState === 'expanded');
  //local state 'giftCardErrorMessage' to hold error message occurred during apply gift card
  const [giftCardErrorMessage, setGiftCardErrorMessage] = useState('');

  const {isApprovalRequired} = useContext(PaymentsContext) || {};

  return (
    isDisplayGiftCard &&
    (!isApprovalRequired || PaymentInfoForScheduledOrder.enabledForScheduledOrder) && (
      <Styled id="CheckoutGiftCard" css={css}>
        <div className="CheckoutGiftCard">
          <HeadingRegion
            setShowApplyGiftCardView={setShowApplyGiftCardView}
            showApplyGiftCardView={showApplyGiftCardView}
            {...props}
          />
          <div className={`CheckoutGiftCard__MainContainer${showApplyGiftCardView ? '' : '--Hidden'}`}>
            <ErrorRegion giftCardErrorMessage={giftCardErrorMessage} {...props} />
            <CheckoutGiftCardEntry
              giftCardErrorMessage={giftCardErrorMessage}
              setGiftCardErrorMessage={setGiftCardErrorMessage}
              {...props}
            />
            <CheckoutGiftCardStatus
              giftCardErrorMessage={giftCardErrorMessage}
              setGiftCardErrorMessage={setGiftCardErrorMessage}
              {...props}
            />
          </div>
        </div>
      </Styled>
    )
  );
};

CheckoutGiftCard.propTypes = {
  /**
   * The unique id for the component
   */
  id: PropTypes.string.isRequired,

  /**
   * Flag indicates whether to display component UI or not
   */
  isDisplayGiftCard: PropTypes.bool.isRequired,

  /**
   * Specify whether the shopper must click the widget to expand it
   */
  giftCardDefaultState: PropTypes.string.isRequired,

  /**
   * Specify whether the shopper must enter a PIN to use the gift card
   */
  isPinRequired: PropTypes.bool.isRequired
};

export default connect(getCheckoutGiftCardData)(CheckoutGiftCard);
