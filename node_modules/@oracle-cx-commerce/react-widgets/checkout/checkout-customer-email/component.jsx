/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext, useState, useEffect, useCallback, useRef} from 'react';
import {OrderContext, ContainerContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import WarningIcon from '@oracle-cx-commerce/react-components/icons/warning';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-customer-email/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-customer-email/selectors';
import {noop} from '@oracle-cx-commerce/utils/generic';

/**
 * Returns an input field for providing an email address
 * Widget renders the email field only for anonymous users
 * @param {props} component props
 */

const CheckoutCustomerEmail = props => {
  //locales
  const {labelEmail, headingContactInformation} = props;
  //selector
  const {authenticated = true} = props;
  //context
  const {shippingGroups = {}} = useContext(OrderContext);
  const {setGuestEmailDetails = noop, guestEmailDetails = {}} = useContext(ContainerContext);

  //component state
  const [emailValidationError, setEmailValidationError] = useState('');
  const count = useRef(0);

  /**
   * Method to update the container context with email status and value
   * Invokes the setter method only if the values in object gets changed.
   */
  const updateEmailToContext = useCallback(
    (isEmailValid, emailAddress) => {
      if (!(guestEmailDetails.isEmailValid === isEmailValid && guestEmailDetails.emailAddress === emailAddress)) {
        setGuestEmailDetails({
          isEmailValid,
          emailAddress
        });
      }
    },
    [guestEmailDetails.emailAddress, guestEmailDetails.isEmailValid, setGuestEmailDetails]
  );

  /**
   * Method to handle email validation and triggers update shipping group action
   * @param {event} onChange event
   */
  const handleEmailUpdate = emailOnChangeEvent => {
    const emailAddress = emailOnChangeEvent.target.value;
    let isEmailAddressValid;
    if (!emailOnChangeEvent.target.checkValidity()) {
      isEmailAddressValid = false;
    } else {
      isEmailAddressValid = true;
    }
    updateEmailToContext(isEmailAddressValid, emailAddress);
  };

  const handleEmailError = emailOnChangeEvent => {
    if (!emailOnChangeEvent.target.checkValidity()) {
      setEmailValidationError(emailOnChangeEvent.target.validationMessage);
    } else {
      setEmailValidationError('');
    }
  };

  /**
   * Populate the input field with email available in shipping groups
   */
  useEffect(() => {
    if (count.current === 0) {
      //Get the default value only once
      for (const index of Object.keys(shippingGroups)) {
        const shippingGroup = shippingGroups[index] || {};
        const {shippingAddress = {}} = shippingGroup;
        const {email = ''} = shippingAddress;
        updateEmailToContext(email && email !== 'null' ? true : false, email);
        count.current++;
      }
    }
  }, [shippingGroups, updateEmailToContext]);

  /**
   * Don't show anything if user is loggedIn
   */
  if (authenticated) {
    return null;
  }

  return (
    <Styled id="CheckoutCustomerEmail" css={css}>
      <div className="CheckoutCustomerEmail">
        <h2>{headingContactInformation}</h2>
        <div className="CheckoutCustomerEmail__InputFields">
          <label htmlFor="email" className="CheckoutCustomerEmail__EmailLabel">
            {labelEmail}
          </label>
          <input
            id="email"
            type="email"
            maxLength="255"
            name="username"
            autoComplete="email"
            defaultValue={guestEmailDetails.emailAddress}
            className={emailValidationError && 'CheckoutCustomerEmail__EmailFieldInValid'}
            required
            onChange={event => handleEmailUpdate(event)}
            onBlur={event => handleEmailError(event)}
          />
          <span className="validationMessage">
            {emailValidationError && <WarningIcon className="warningIcon" />}
            {emailValidationError}
          </span>
        </div>
      </div>
    </Styled>
  );
};

export default connect(getComponentData)(CheckoutCustomerEmail);
