/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import React, {useContext, useState} from 'react';
import {PaymentsContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getPage, getOrder, getCurrentOrder} from '@oracle-cx-commerce/commerce-utils/selector';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-review-and-place-quoted-order-button/styles.css';
import {
  handleOrderSubmitSuccess,
  handleOrderSubmitFailure
} from '@oracle-cx-commerce/react-widgets/checkout/checkout-place-order-button/utils';
import {
  isZeroValueOrder,
  getAmountRemaining,
  handleAddPaymentSuccess,
  handleAddPaymentFailure
} from '@oracle-cx-commerce/react-components/utils/payment';
import {PAYMENT_TYPE_PAY_LATER, ORDER_STATE_PENDING_PAYMENT} from '@oracle-cx-commerce/commerce-utils/constants';

/**
 * Widget for Continue To Review Order button, navigates to review order page on click after applying selected payment.
 * @param props
 */
const CheckoutReviewAndPlaceQuotedOrderButton = props => {
  const {buttonPlaceOrder, buttonPlacingOrder, alertOrderNotPlacedPaymentDeclined, alertTechnicalProblemContactUs} =
    props;
  const {payments = [], selectedPaymentType} = useContext(PaymentsContext) || {};
  const store = useContext(StoreContext);
  const {action, getState} = store;

  const [inProgress, setInProgress] = useState(false);

  const goToPage = useNavigator();

  /**
   * Invokes apply payment action on the passed in payments payload.
   * @param paymentsToApply Array The payments to be applied
   */
  const applyPayments = paymentsToApply => {
    if (paymentsToApply.length > 0) {
      const contextOrderId = getPage(getState()).contextId;
      const payload = {
        orderId: contextOrderId,
        payments: paymentsToApply
      };

      action('submitQuotedOrder', payload).then(response => {
        setInProgress(false);
        if (response.ok) {
          const messages = {alertOrderNotPlacedPaymentDeclined, alertTechnicalProblemContactUs};
          handleOrderSubmitSuccess(goToPage, response, action, messages);
        } else {
          handleOrderSubmitFailure(action, goToPage, response);
        }
      });
    } else {
      action('notify', {level: 'error', message: 'Please provide payment details'});
    }
  };

  /**
   * Invokes add payment action on the passed in payments payload. Added for 'pending-payments'.
   * @param paymentsToApply Array The payments to be applied
   */
  const addPayments = (paymentsToApply, order) => {
    if (paymentsToApply.length > 0) {
      if (order && order.id) {
        paymentsToApply[0].seqNum = '0';
        const amountRemaining = getAmountRemaining(order);
        if (amountRemaining) {
          paymentsToApply[0].amount = amountRemaining;
        }
        const payload = {orderId: order.id, payments: paymentsToApply, uuid: order.uuid};
        action('addPayments', payload).then(response => {
          //Enable Place Order Button
          setInProgress(false);
          if (response.ok === true) {
            const messages = {alertOrderNotPlacedPaymentDeclined, alertTechnicalProblemContactUs};
            handleAddPaymentSuccess(order.id, goToPage, response, action, messages);
          } else {
            handleAddPaymentFailure(action, goToPage, response);
          }
        });
      }
    }
  };

  /**
   * Processes the payments in the context
   * Updates the payment group if the payment in the context has an paymentGroupId
   * or calls the apply payments to apply the payment in the context.
   * @param payments Array The payments to be processed
   */
  const processPayments = async payments => {
    const paymentsToApply = [];

    for (const payment of payments) {
      const {paymentGroupId, ...paymentDetails} = payment;
      paymentsToApply.push(paymentDetails);
    }
    const contextOrderId = getPage(getState()).contextId;
    const order = contextOrderId ? getOrder(getState(), {id: contextOrderId}) : getCurrentOrder(getState());
    if (order.state === ORDER_STATE_PENDING_PAYMENT) {
      addPayments(paymentsToApply, order);
    } else {
      applyPayments(paymentsToApply);
    }
  };

  /**
   * Handler for continue to review order button
   */
  const onPlaceOrder = () => {
    action('notifyClearAll');
    setInProgress(true);
    if (payments.length > 0) {
      processPayments(payments);
    } else {
      action('notify', {level: 'error', message: 'Please provide payment details'});
    }
  };

  /**
   * Returns true if Continue to review order button should be disabled
   * Disable continue to review order button, when
   * Continue to review order is in progress,
   * There are no payments in the payment context when
   * the order is not a zero value order
   * or there are no existing payment groups or there is a default payment group or appliedPaymentGroup
   */
  const isPlaceOrderButtonDisabled = () => {
    return (
      inProgress ||
      (!isZeroValueOrder(props) && selectedPaymentType !== PAYMENT_TYPE_PAY_LATER && payments.length === 0)
    );
  };

  return (
    <Styled id="CheckoutReviewAndPlaceQuotedOrderButton" css={css}>
      <div className="CheckoutReviewAndPlaceQuotedOrderButton">
        <button
          type="button"
          className="CheckoutReviewAndPlaceQuotedOrderButton__Button"
          disabled={isPlaceOrderButtonDisabled()}
          onClick={onPlaceOrder}
        >
          {inProgress ? buttonPlacingOrder : buttonPlaceOrder}
        </button>
      </div>
    </Styled>
  );
};

CheckoutReviewAndPlaceQuotedOrderButton.propTypes = {};

CheckoutReviewAndPlaceQuotedOrderButton.defaultProps = {};

export default connect(getCurrentOrder)(CheckoutReviewAndPlaceQuotedOrderButton);
