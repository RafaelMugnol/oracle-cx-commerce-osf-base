/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useEffect, useMemo, useRef, useState} from 'react';
import CheckoutDeliveryAddressForm from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/delivery-address-form';
import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import HardgoodShippingGroupsDetails from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/hardgood-shipping-groups-details';
import MultiShippingDetailsEdit from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/multi-shipping-details-edit';
import {MultiShippingLink} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/multi-shipping-link';
import PickupInstoreItems from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/pickup-instore-items';
import HomeDeliveryItems from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/home-delivery-items';
import MultiShippingBopisDetailsEdit from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/multishipping-bopis-details-edit';
import {CartContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/styles.css';
import {fetchShippingCountries} from '@oracle-cx-commerce/fetchers/shipping-countries';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/selectors';
import {useCartInitializer} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import {useShippingCountriesFetcher} from '@oracle-cx-commerce/fetchers/shipping-countries/hooks';
import {noop} from '@oracle-cx-commerce/utils/generic';
import {SingleShippingLink} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/single-shipping-link';
import {getHardgoodShippingGroupsWithItems} from '@oracle-cx-commerce/react-components/utils/shipping';
import ShippingGroupDetails from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/shipping-group-details';
import {
  MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX,
  SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX,
  SINGLE_SHIPPING_SUMMARY_TAB_INDEX,
  MULTI_SHIPPING_EDIT_TAB_INDEX,
  MULTI_SHIPPING_SUMMARY_TAB_INDEX,
  useMultiShippingBopisInitializer,
  useSetNextTabIndex
} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/hooks';
import PropTypes from 'prop-types';

/**
 * export fetchers to load all the shipping countries into the state during server-side rendering.
 */
export const fetchers = [fetchShippingCountries];

/**
 * Widget to handle the checkout multi shipping with BOPIS flow.
 * All the shipping groups of the order are of type 'hardgoodShippingGroup'
 * @param props
 */
const CheckoutMultiShippingWithBOPISDetails = props => {
  // resources
  const {currentOrder = {}, isGetCartInProgress, isB2BUser, currentProfile, isUserLoggedIn} = props;
  const {shippingGroups = {}, commerceItems = {}, priceInfo = {}} = currentOrder;

  const store = useContext(StoreContext);
  // To find the right tab index only for the initial page load
  const isShippingInitializedRef = useRef(false);

  // Checkout Shipping Context
  const {shippingStatus = {}, setShippingStatus = noop, checkoutShippingTabs} = useContext(CheckoutShippingContext);

  // Cart Context to check for cart validity
  const {
    cartStatus: {isCartInValid}
  } = useContext(CartContext);

  // Store's currentTabIndex value
  const [currentTabIndex, setCurrentTabIndex] = useState();

  // List of hardGoodShippingGroups which has items
  const hardGoodShippingGroups = useMemo(() => {
    return getHardgoodShippingGroupsWithItems(shippingGroups) || [];
  }, [shippingGroups]);

  // Reprice the current incomplete order on page load.
  useCartInitializer(currentOrder, isGetCartInProgress);

  /**
   * Executes for the first time page load
   * Sets tabIndex for the shipping phases
   * Check for default profile address and updates the shipping group address if it has invalid/no address
   * Fetches the default tabIndex to be shown initially
   */
  useMultiShippingBopisInitializer({
    setCurrentTabIndex,
    isShippingInitializedRef,
    isGetCartInProgress,
    currentOrder,
    isUserLoggedIn,
    currentProfile,
    isB2BUser
  });

  /**
   * Get the next tabIndex based on the cart state
   */
  useSetNextTabIndex({
    currentOrder,
    isShippingInitializedRef,
    isB2BUser,
    currentTabIndex,
    setCurrentTabIndex
  });

  /**
   * Gets shipping methods for all home delivery shipping groups on change of amount of the order
   */
  useEffect(() => {
    setShippingStatus(prevState => {
      return {...prevState, loadShippingMethods: true};
    });
  }, [priceInfo.amount, setShippingStatus, store]);
  /**
   * Disables the continue button when there is no proper store selected for the BOPIS item
   */
  useEffect(() => {
    if (shippingStatus.tabIndex === MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX) {
      if (isCartInValid && shippingStatus.enableContinue) {
        setShippingStatus(prevState => {
          return {...prevState, enableContinue: false};
        });
      } else if (!isCartInValid && !shippingStatus.enableContinue) {
        setShippingStatus(prevState => {
          return {...prevState, enableContinue: true};
        });
      }
    }
  }, [isCartInValid, setShippingStatus, shippingStatus.enableContinue, shippingStatus.tabIndex]);

  /**
   * Click handler function for the 'edit' link
   * It sets the shipping index to the multi shipping edit screen
   */
  const onEditClick = () => {
    setShippingStatus(prevState => {
      return {
        ...prevState,
        tabIndex: checkoutShippingTabs.MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX,
        showConinueToPayment: false,
        enableContinue: false
      };
    });
  };

  /**
   * Invoke fetcher hook to load all the shipping countries into the state
   * This will not perform any task if the state has already the shipping countries
   * It is effective if the SSR didn't populate the state with shipping countries data
   */
  useShippingCountriesFetcher(store);

  /**
   * Function to render the shipping layer based on the shipping tab index
   * tabIndex 0 : Select delivery method(for each item)
   * tabIndex 1 : Add shipping address for home deliver items
   * tabIndex 2 : display single shipping summary
   * tabIndex 3 : display the multi shipping edit layer
   * tabIndex 4 : display the multi shipping summary
   */
  const renderShippingPhase = () => {
    const shippingTabIndex = shippingStatus.tabIndex;
    if (shippingTabIndex === MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX) {
      return (
        <>
          <MultiShippingBopisDetailsEdit {...props} />
        </>
      );
    }
    if (shippingTabIndex === SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX) {
      return (
        <>
          <HomeDeliveryItems {...props} />
          <h3>{props.labelHomeDeliveryAddress}</h3>
          <MultiShippingLink
            {...props}
            actionShipItemsToMultipleAddresses={props.actionShipHomeDeliveryItemsToMultipleAddresses}
          />
          <CheckoutDeliveryAddressForm {...props} />
        </>
      );
    }
    if (shippingTabIndex === SINGLE_SHIPPING_SUMMARY_TAB_INDEX) {
      return (
        <div className="CheckoutMultiShippingWithBOPISDetails__SingleShippingSummary">
          {hardGoodShippingGroups.length > 0 && (
            <>
              <MultiShippingLink
                {...props}
                actionShipItemsToMultipleAddresses={props.actionShipHomeDeliveryItemsToMultipleAddresses}
              />
              <button
                type="button"
                className="link CheckoutMultiShippingWithBOPISDetails__SingleShippingSummary-edit"
                onClick={() => onEditClick()}
              >
                {props.labelEdit}
              </button>
            </>
          )}
          <ShippingGroupDetails shippingGroup={hardGoodShippingGroups[0]} commerceItems={commerceItems} {...props} />
          <PickupInstoreItems {...props} />
        </div>
      );
    }
    if (shippingTabIndex === MULTI_SHIPPING_EDIT_TAB_INDEX) {
      return (
        <>
          <h3>{props.labelHomeDeliveryAddresses}</h3>
          <MultiShippingDetailsEdit
            {...props}
            actionShipAllItemsToASingleAddress={props.actionShipHomeDeliveryItemsToASingleAddress}
          />
        </>
      );
    }
    if (shippingTabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX) {
      return (
        <>
          <SingleShippingLink
            {...props}
            actionShipAllItemsToASingleAddress={props.actionShipHomeDeliveryItemsToASingleAddress}
          />
          <HardgoodShippingGroupsDetails
            shippingGroups={shippingGroups}
            commerceItems={commerceItems}
            isMultiShipping={true}
            editButtonRedirectIndex={MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX}
            {...props}
          />
          <PickupInstoreItems {...props} />
        </>
      );
    }
  };

  return (
    <Styled css={css} id="CheckoutMultiShippingWithBOPISDetails">
      <div className="CheckoutMultiShippingWithBOPISDetails">{renderShippingPhase()}</div>
    </Styled>
  );
};

CheckoutMultiShippingWithBOPISDetails.propTypes = {
  /**
   * Logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,
  /**
   * Type of the shopper.
   */
  isB2BUser: PropTypes.bool.isRequired,
  // eslint-disable-next-line spellcheck/spell-checker
  /**
   * The contactInfos (address) object from redux state(ProfileRepository->contactInfos)
   */
  contactInfos: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string.isRequired,
      city: PropTypes.string.isRequired,
      state: PropTypes.string.isRequired,
      postalCode: PropTypes.string.isRequired,
      country: PropTypes.string.isRequired,
      phoneNumber: PropTypes.string
    })
  ),
  /**
   * This is the flag to know whether get-cart action is in-progress.
   */
  isGetCartInProgress: PropTypes.number.isRequired,
  /**
   * This is the object to get the current order
   */
  currentOrder: PropTypes.shape({
    shippingGroups: PropTypes.object,
    commerceItems: PropTypes.object
  }).isRequired,
  /**
   * This is the object to get the current profile
   */
  currentProfile: PropTypes.shape({
    shippingAddresses: PropTypes.arrayOf(PropTypes.string)
  }).isRequired,
  /**
   * This is the array of shipping countries
   */
  shippingCountries: PropTypes.objectOf(PropTypes.object).isRequired,
  /**
   * This is the default shipping country code
   */
  defaultShippingCountry: PropTypes.string,
  /**
   * This is the object to get the address saved in session context
   */
  componentData: PropTypes.objectOf(PropTypes.object)
};

CheckoutMultiShippingWithBOPISDetails.defaultProps = {
  contactInfos: {},
  componentData: {},
  defaultShippingCountry: ''
};

export default connect(getComponentData)(CheckoutMultiShippingWithBOPISDetails);
