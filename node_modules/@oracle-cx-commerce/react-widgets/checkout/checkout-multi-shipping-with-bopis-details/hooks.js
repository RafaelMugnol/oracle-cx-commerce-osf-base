/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {
  isShippingDetailsComplete,
  getHardgoodShippingGroupsWithItems,
  getInStorePickUpShippingGroupWithItems
} from '@oracle-cx-commerce/react-components/utils/shipping';
import {useEffect, useContext} from 'react';
import {isEmptyObject, noop, isObject} from '@oracle-cx-commerce/utils/generic';
import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import {isAddressValid, updateSGWithProfileDefaultAddress} from '@oracle-cx-commerce/react-components/utils/address';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {SHIPPING_GROUP_HARDGOOD, SHIPPING_GROUP_IN_STORE_PICKUP} from '@oracle-cx-commerce/commerce-utils/constants';

export const MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX = 0;
export const SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX = 1;
export const SINGLE_SHIPPING_SUMMARY_TAB_INDEX = 2;
export const MULTI_SHIPPING_EDIT_TAB_INDEX = 3;
export const MULTI_SHIPPING_SUMMARY_TAB_INDEX = 4;

let inStorepickUpShippingGroups = [],
  hardGoodShippingGroups = [],
  shippingGroups;
const getProfileDefaultAddress = ({isUserLoggedIn, isB2BUser, currentProfile}) => {
  if (isUserLoggedIn) {
    return isB2BUser ? currentProfile.contactShippingAddress : currentProfile.shippingAddress;
  }

  return null;
};

/**
 * Method to check if the shipping information for an order is complete or not
 * @param {Object} order an order object
 * @returns {boolean} true if the shipping information for an order is complete
 */
export const hasValidAddressOrLocationIdInShippingGroups = (order, isB2BUser) => {
  const {shippingGroups = {}} = order;

  if (!isObject(order) || isEmptyObject(order) || Object.keys(shippingGroups).length === 0) {
    return false;
  }

  for (const shippingGroup of Object.values(shippingGroups)) {
    if (shippingGroup.items.length === 0) {
      continue;
    }

    if (shippingGroup.type === SHIPPING_GROUP_HARDGOOD) {
      // for 'hardgoodShippingGroup', if the shipping address and the shipping method are not valid, then return false
      if (!isAddressValid(shippingGroup.shippingAddress, isB2BUser)) {
        return false;
      }
    } else if (shippingGroup.type === SHIPPING_GROUP_IN_STORE_PICKUP) {
      if (shippingGroup.store && !shippingGroup.store.locationId) {
        // for 'inStorePickupShippingGroup', if the location is not selected, then return false
        return false;
      }
    }
  }

  return true;
};

/**
 * Function to find the default tab index in the multi shipping flow
 */
const findDefaultPageIndex = (currentOrder, isB2BUser) => {
  if (hasValidAddressOrLocationIdInShippingGroups(currentOrder, isB2BUser)) {
    if (
      (inStorepickUpShippingGroups.length > 0 && hardGoodShippingGroups.length === 0) ||
      hardGoodShippingGroups.length === 1
    ) {
      return SINGLE_SHIPPING_SUMMARY_TAB_INDEX;
    }

    return MULTI_SHIPPING_SUMMARY_TAB_INDEX;
  }

  return MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX;
};

/**
 * Function to update shipping group address with profile default address
 */
const updateShippingGroupAddress = ({store, setShippingStatus, setCurrentTabIndex}) => {
  updateSGWithProfileDefaultAddress(store, hardGoodShippingGroups[0])
    .then(response => {
      if (response.ok === false) {
        setShippingStatus(prevState => {
          return {...prevState, tabIndex: MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX};
        });
        setCurrentTabIndex(MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX);
      } else {
        setCurrentTabIndex(SINGLE_SHIPPING_SUMMARY_TAB_INDEX);
        setShippingStatus(prevState => {
          return {...prevState, tabIndex: SINGLE_SHIPPING_SUMMARY_TAB_INDEX};
        });
      }
    })
    .catch(() => {
      setShippingStatus(prevState => {
        return {...prevState, tabIndex: MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX, enableContinue: false};
      });
      setCurrentTabIndex(MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX);
    });
};

/**
 * Function to find the next tabIndex based on the current tabIndex and order state
 * @param {tabIndex, currentOrder, isB2BUser}
 */
const evaluateNextTabIndex = ({tabIndex, currentOrder, isB2BUser}) => {
  let nextTabIndex = tabIndex;
  if (tabIndex === SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX) {
    if (
      hardGoodShippingGroups.length === 0 ||
      (hardGoodShippingGroups.length === 1 && isAddressValid(hardGoodShippingGroups[0].shippingAddress, isB2BUser))
    ) {
      nextTabIndex = SINGLE_SHIPPING_SUMMARY_TAB_INDEX;
    } else if (hardGoodShippingGroups.length > 1) {
      if (hasValidAddressOrLocationIdInShippingGroups(currentOrder, isB2BUser)) {
        nextTabIndex = MULTI_SHIPPING_SUMMARY_TAB_INDEX;
      } else {
        nextTabIndex = MULTI_SHIPPING_EDIT_TAB_INDEX;
      }
    }
  }

  return nextTabIndex;
};

/**
 * Function to set the shippingStatus object based on the tabIndex
 */
const setShippingStatusWithNextTabIndex = ({nextTabIndex, setShippingStatus, setDeliveryAddressForm}) => {
  scrollTo(0, 0);
  if (nextTabIndex === SINGLE_SHIPPING_SUMMARY_TAB_INDEX || nextTabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX) {
    setShippingStatus(prevState => {
      return {...prevState, showConinueToPayment: true, loadShippingMethods: true};
    });
  }
  if (nextTabIndex === MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX || nextTabIndex === MULTI_SHIPPING_EDIT_TAB_INDEX) {
    setDeliveryAddressForm(prevState => {
      return {...prevState, isModified: false};
    });
  }
};
/**
 * Executes for the first time page load
 * Sets tabIndex for the shipping phases
 * Check for default profile address and updates the shipping group address if it has invalid/no address
 * Fetches the default tabIndex to be shown initially
 */
export const useMultiShippingBopisInitializer = ({
  setCurrentTabIndex,
  isShippingInitializedRef,
  isGetCartInProgress,
  currentOrder = {},
  isUserLoggedIn,
  currentProfile,
  isB2BUser
}) => {
  const {commerceItems = {}} = currentOrder;
  shippingGroups = currentOrder.shippingGroups;
  inStorepickUpShippingGroups = getInStorePickUpShippingGroupWithItems(shippingGroups);
  hardGoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);
  /* Store Context */
  const store = useContext(StoreContext);
  const {action} = store;

  // Checkout Shipping Context
  const {setShippingStatus = noop, setCheckoutShippingTabs = noop} = useContext(CheckoutShippingContext);

  useEffect(() => {
    if (isShippingInitializedRef.current === false && isGetCartInProgress !== 1 && !isEmptyObject(commerceItems)) {
      setCheckoutShippingTabs({
        MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX,
        SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX,
        SINGLE_SHIPPING_SUMMARY_TAB_INDEX,
        MULTI_SHIPPING_EDIT_TAB_INDEX,
        MULTI_SHIPPING_SUMMARY_TAB_INDEX
      });
      /**
       * When the shipping address is not available, update the shipping group with the profile default address
       */
      if (
        hardGoodShippingGroups.length === 1 &&
        hardGoodShippingGroups[0].shippingGroupId &&
        !isAddressValid(hardGoodShippingGroups[0].shippingAddress, isB2BUser) &&
        getProfileDefaultAddress({isUserLoggedIn, isB2BUser, currentProfile})
      ) {
        updateShippingGroupAddress({store, action, setShippingStatus, setCurrentTabIndex});
      } else {
        const defaultTabIndex = findDefaultPageIndex(currentOrder, isB2BUser);
        if (
          defaultTabIndex === SINGLE_SHIPPING_SUMMARY_TAB_INDEX ||
          defaultTabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX
        ) {
          setShippingStatus(prevState => {
            return {...prevState, tabIndex: defaultTabIndex, showConinueToPayment: true, loadShippingMethods: true};
          });
        } else {
          setShippingStatus(prevState => {
            return {...prevState, tabIndex: defaultTabIndex, enableContinue: true};
          });
        }
        setCurrentTabIndex(defaultTabIndex);
      }
      isShippingInitializedRef.current = true;
    }
  }, [
    action,
    commerceItems,
    currentOrder,
    currentProfile,
    isB2BUser,
    isGetCartInProgress,
    isUserLoggedIn,
    isShippingInitializedRef,
    setCheckoutShippingTabs,
    setCurrentTabIndex,
    setShippingStatus,
    store
  ]);
};

/**
 * Custom hook which evaluates the next tabIndex and sets the shippingStatus data accordingly
 * @param {store, currentOrder, isShippingInitializedRef, isB2BUser, currentTabIndex, setCurrentTabIndex}
 */
export const useSetNextTabIndex = ({
  currentOrder,
  isShippingInitializedRef,
  isB2BUser,
  currentTabIndex,
  setCurrentTabIndex
}) => {
  const store = useContext(StoreContext);

  // Checkout Shipping Context
  const {
    shippingStatus = {},
    setShippingStatus = noop,
    setDeliveryAddressForm = noop
  } = useContext(CheckoutShippingContext);

  /**
   * Executes on every change of tabIndex
   * Sets appropriate tabIndex value on click of continue button and next button to be displayed
   * Loads Shipping methods for the summary screens
   */
  useEffect(() => {
    if (shippingStatus.tabIndex !== currentTabIndex && isShippingInitializedRef.current) {
      const nextTabIndex = evaluateNextTabIndex({
        tabIndex: shippingStatus.tabIndex,
        currentOrder,
        isB2BUser,
        store,
        setShippingStatus
      });
      shippingGroups = currentOrder.shippingGroups;
      inStorepickUpShippingGroups = getInStorePickUpShippingGroupWithItems(shippingGroups);
      hardGoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);
      setShippingStatusWithNextTabIndex({nextTabIndex, setShippingStatus, setDeliveryAddressForm});
      if (nextTabIndex !== shippingStatus.tabIndex) {
        setShippingStatus(prevState => {
          return {...prevState, tabIndex: nextTabIndex};
        });
      }
      setCurrentTabIndex(nextTabIndex);
    }
    if (
      shippingStatus.showConinueToPayment &&
      isShippingDetailsComplete(currentOrder, isB2BUser) &&
      !shippingStatus.enableContinue
    ) {
      setShippingStatus(prevState => {
        return {...prevState, showConinueToPayment: true, enableContinue: true};
      });
    }
  }, [
    currentOrder,
    currentTabIndex,
    isB2BUser,
    isShippingInitializedRef,
    setCurrentTabIndex,
    setDeliveryAddressForm,
    setShippingStatus,
    shippingStatus.enableContinue,
    shippingStatus.showConinueToPayment,
    shippingStatus.tabIndex,
    store
  ]);
};
