/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useMemo} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/home-delivery-items/styles.css';
import Collapsible from '@oracle-cx-commerce/react-components/collapsible';
import CartItemRow from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-item-row';
import CartItemsTableHeader from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-items-table-header';
import {getHardgoodShippingGroupsWithItems} from '@oracle-cx-commerce/react-components/utils/shipping';
import {useCartState} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import GWPPlaceholder from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-placeholder';
import {t} from '@oracle-cx-commerce/utils/generic';

const HomeDeliveryItems = props => {
  const {shippingGroups, commerceItems = {}} = props.currentOrder;

  const {setInvalidItems} = useCartState();

  // Filter the shipping groups of type 'hardgoodShippingGroup' which has some commerce items
  const hardgoodShippingGroups = useMemo(() => {
    return getHardgoodShippingGroupsWithItems(shippingGroups);
  }, [shippingGroups]);

  return (
    <Styled id="HomeDeliveryItems" css={css}>
      <div className="HomeDeliveryItems">
        <Collapsible
          expanded={false}
          title={
            <h3>
              {t(props.labelHomeDeliveryItems, {HOME_DELIVERY_ITEMS_COUNT: hardgoodShippingGroups[0] ? hardgoodShippingGroups[0].items.length : 0})}
            </h3>
          }
        >
          <div>
            <div className="HomeDeliveryItems__TableHeader">
              <CartItemsTableHeader {...props} />
            </div>
            <div className="HomeDeliveryItems__Table-Body">
              {(hardgoodShippingGroups || []).map(shippingGroup => (
                <div key={shippingGroup.shippingGroupId}>
                  {shippingGroup.items.map(item => {
                    return (
                      <CartItemRow
                        key={`${shippingGroup.shippingGroupId}-${item.commerceId}`}
                        shippingGroupCommerceItem={item}
                        shippingGroupId={shippingGroup.shippingGroupId}
                        commerceItem={commerceItems[item.commerceId]}
                        setInvalidItems={setInvalidItems}
                        pdpUrlNotRequired={true}
                        isSplitShipping={true}
                        isMultiShipping={true}
                        {...props}
                      />
                    );
                  })}
                </div>
              ))}
              <GWPPlaceholder {...props} />
            </div>
          </div>
        </Collapsible>
      </div>
    </Styled>
  );
};

export default HomeDeliveryItems;
