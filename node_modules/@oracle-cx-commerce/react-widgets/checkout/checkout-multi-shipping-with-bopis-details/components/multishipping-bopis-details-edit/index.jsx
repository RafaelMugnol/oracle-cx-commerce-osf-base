/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import ExtendedCartItemsTableHeader from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-items-table-header';
import GWPPlaceholder from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-placeholder';
import { ShipItemToNewAddress } from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/ship-item-to-new-address';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/multishipping-bopis-details-edit/styles.css';
import { useCartState } from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import ExtendedCartItemRow from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-item-row';

/**
 * Component to edit the shipping groups in the multi shipping flow
 * It provides options to edit any shipping address, to split a cart item to multiple addresses
 * and to ship all items to single address
 * @param props
 */
const MultiShippingBopisDetailsEdit = props => {
  const { currentOrder = {} } = props;
  const { shippingGroups = {}, commerceItems = {}, id } = currentOrder;

  const { setInvalidItems } = useCartState();

  // TODO: Can we use useMemo for this?
  let commerceItemsBySGs = new Map();

  (Object.keys(shippingGroups || {}) || []).forEach(shippingGroupId => {
    shippingGroups[shippingGroupId].items.forEach(item => {
      commerceItemsBySGs.set(`${item.commerceId}-${shippingGroupId}`, item);
    });
  });

  commerceItemsBySGs = new Map([...commerceItemsBySGs.entries()].sort());

  return (
    <Styled id="MultiShippingBopisDetailsEdit" css={css}>
      <div className="MultiShippingBopisDetailsEdit">
        <div className="MultiShippingBopisDetailsEdit__TableHeader">
          <ExtendedCartItemsTableHeader {...props} />
        </div>
        {[...commerceItemsBySGs.keys()].map(function (keyName) {
          if (keyName && typeof(keyName) === 'string') {
            const commerceItem = commerceItemsBySGs.get(keyName);
            const splitKeyName = keyName.split('-');
            const shippingGroup = splitKeyName.length >=2 ? shippingGroups[keyName.split('-')[1]] : {};

            return (
              <div className="MultiShippingBopisDetailsEdit__CartItem" key={`${keyName}`}>
                <ExtendedCartItemRow
                  key={`${shippingGroup.shippingGroupId}-${commerceItem.commerceId}`}
                  shippingGroupCommerceItem={commerceItem}
                  shippingGroupId={shippingGroup.shippingGroupId}
                  commerceItem={commerceItems[commerceItem.commerceId]}
                  setInvalidItems={setInvalidItems}
                  pdpUrlNotRequired={true}
                  isSplitShipping={true}
                  {...props}
                  isMultiShipping={true}
                />

                {commerceItem.quantity > 1 && (
                  <ShipItemToNewAddress
                    shippingAddress={shippingGroup.shippingAddress}
                    shippingGroupId={shippingGroup.shippingGroupId}
                    commerceId={commerceItem.commerceId}
                    quantity={commerceItem.quantity}
                    shippingGroups={shippingGroups}
                    currentOrderId={id}
                    {...props}
                  />
                )}
              </div>
            );
          }
        })}

        <GWPPlaceholder {...props} />
      </div>
    </Styled>
  );
};

export default React.memo(MultiShippingBopisDetailsEdit);
