/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useMemo, useContext} from 'react';
import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-with-bopis-details/components/pickup-instore-items/styles.css';
import {
  getInStorePickUpShippingGroupWithItems,
  getHardgoodShippingGroupsWithItems
} from '@oracle-cx-commerce/react-components/utils/shipping';
import {useCartState} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import GWPPlaceholder from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-placeholder';
import ExtendedCartItemRow from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-item-row';
import ExtendedCartItemsTableHeader from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-items-table-header';
import {noop} from '@oracle-cx-commerce/utils/generic';
import { ORDER_STATE_QUOTED } from '@oracle-cx-commerce/commerce-utils/constants';

const PickupInstoreItems = props => {
  const {shippingGroups, commerceItems = {}, state} = props.currentOrder;

  const {setInvalidItems} = useCartState();

  const {checkoutShippingTabs = {}, setShippingStatus = noop} = useContext(CheckoutShippingContext);

  // Filter the shipping groups of type 'hardgoodShippingGroup' which has some commerce items
  const inStorepickUpShippingGroups = useMemo(() => {
    return getInStorePickUpShippingGroupWithItems(shippingGroups);
  }, [shippingGroups]);

  // Filter the shipping groups of type 'hardgoodShippingGroup' which has some commerce items
  const hardgoodShippingGroups = useMemo(() => {
    return getHardgoodShippingGroupsWithItems(shippingGroups);
  }, [shippingGroups]);

  /**
   * Click handler function for the 'edit' link
   * It sets the shipping index to the multi shipping edit screen
   */
  const onEditClick = () => {
    setShippingStatus(prevState => {
      return {
        ...prevState,
        tabIndex: checkoutShippingTabs.MULTI_SHIPPING_DELIVERY_METHOD_TAB_INDEX,
        showConinueToPayment: false,
        enableContinue: false
      };
    });
  };

  return (
    <Styled id="PickupInstoreItems" css={css}>
      {inStorepickUpShippingGroups.length > 0 && (
        <div className="PickupInstoreItems">
          <div className="PickInstoreItems__Heading">
            <h3>{props.labelPickUpInStore}</h3>
            <span>
              {state !== ORDER_STATE_QUOTED && (
                <button className="link" type="button" onClick={onEditClick}>
                  {props.labelEdit}
                </button>
              )}
            </span>
          </div>
          <div className="CartItemsTable_Body">
            <div className="MultiShippingBopisDetailsEdit__TableHeader">
              <ExtendedCartItemsTableHeader {...props} />
            </div>
            {(inStorepickUpShippingGroups || []).map(shippingGroup => (
              <div key={shippingGroup.shippingGroupId} className="PickInstoreItems__CartItems">
                {shippingGroup.items.map(item => {
                  return (
                    <ExtendedCartItemRow
                      key={`${shippingGroup.shippingGroupId}-${item.commerceId}`}
                      shippingGroupCommerceItem={item}
                      shippingGroupId={shippingGroup.shippingGroupId}
                      commerceItem={commerceItems[item.commerceId]}
                      setInvalidItems={setInvalidItems}
                      pdpUrlNotRequired={true}
                      isSplitShipping={true}
                      {...props}
                      showStorePickUpAtLabel={true}
                      isMultiShipping={true}
                      displayDeliveryOptions={false}
                    />
                  );
                })}
              </div>
            ))}
            {hardgoodShippingGroups.length === 0 && <GWPPlaceholder {...props} />}
          </div>
        </div>
      )}
    </Styled>
  );
};

export default PickupInstoreItems;
