/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  ORDER_STATE_PENDING_PAYMENT,
  ORDER_STATE_SUBMITTED,
  PAGE_CHECKOUT_ORDER_CONFIRMATION_LINK,
  PAGE_CHECKOUT_PAYMENT_LINK,
  PAGE_CHECKOUT_REVIEW_ORDER_LINK,
  PAGE_PENDING_PAYMENT_LINK,
  PAYMENT_AUTH_DECLINED,
  PAYMENT_AUTH_SUCCESS,
  PAYMENT_AUTH_TIMED_OUT,
  PAYMENT_REVERSAL_FAILED,
  PAYMENT_STATE_REMOVED
} from '@oracle-cx-commerce/commerce-utils/constants';
import React, {useCallback, useContext} from 'react';

import PayerAuthForm from '@oracle-cx-commerce/react-widgets/checkout/checkout-payer-authentication/components/payer-auth-form';
import PropTypes from 'prop-types';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-payer-authentication/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-payer-authentication/selectors';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {verifyPaymentAuthorization} from '@oracle-cx-commerce/react-widgets/checkout/checkout-payer-authentication/utils';

//constants
const ERROR = 'error';

/**
 * Checkout Payer Authentication component which includes payer-auth-form sub component
 * It is used to verify payment group (which need ui intervention) authentication provided by user after order is placed.
 * The payment group's customer properties should include properties required by PayerAuthForm.
 */
const CheckoutPayerAuthentication = props => {
  const {
    alertCardDeclinedDefault,
    alertTechnicalProblemContactingCardIssuingBank,
    alertTechnicalProblemTimeOut,
    alertTechnicalProblemTryAgain,
    payerAuthPaymentGroup = {},
    orderId,
    orderUUID,
    textGenericCard3DSPaymentAuthorizationOutput,
    textProcessingDoNotRefresh
  } = props;

  const {action, getState} = useContext(StoreContext);
  const goToPage = useNavigator();
  const {paymentGroupId, customPaymentProperties = {}} = payerAuthPaymentGroup;

  /**
   * Determines user navigation based on order state.
   * @param orderState the orderState
   */
  const handleNavigation = useCallback(
    orderState => {
      if (orderState === ORDER_STATE_SUBMITTED) {
        goToPage(`${PAGE_CHECKOUT_ORDER_CONFIRMATION_LINK}/${orderUUID}`);
      } else if (orderState === ORDER_STATE_PENDING_PAYMENT) {
        goToPage(`${PAGE_PENDING_PAYMENT_LINK}/${orderId}`);
      } else {
        goToPage(PAGE_CHECKOUT_PAYMENT_LINK);
      }
    },
    [goToPage, orderId, orderUUID]
  );

  /**
   * Callback method to proceed with response and navigate to checkout payment or checkout order confirmation page
   * based on payment status
   * @param {object} response the response object
   */
  const onVerifyPaymentAuthorization = useCallback(
    response => {
      if (response.status === PAYMENT_AUTH_SUCCESS) {
        handleNavigation(response.orderState);
      } else if (response.status === PAYMENT_REVERSAL_FAILED) {
        action('notify', {level: ERROR, message: alertTechnicalProblemContactingCardIssuingBank});
        goToPage(PAGE_CHECKOUT_REVIEW_ORDER_LINK);
      } else if (response.status === PAYMENT_STATE_REMOVED) {
        action('notify', {level: ERROR, message: alertTechnicalProblemTryAgain});
        goToPage(PAGE_CHECKOUT_REVIEW_ORDER_LINK);
      } else if (response.status === PAYMENT_AUTH_DECLINED) {
        let errorMessage = alertCardDeclinedDefault;
        if (response.responseData) {
          errorMessage = `(${response.responseData.responseCode}) ${response.responseData.responseDescription}`;
        }
        action('notify', {level: ERROR, message: errorMessage});
        handleNavigation(response.orderState);
      } else if (response.status === PAYMENT_AUTH_TIMED_OUT) {
        action('notify', {level: ERROR, message: alertTechnicalProblemTimeOut});
        handleNavigation(response.orderState);
      }
    },
    [
      action,
      alertCardDeclinedDefault,
      alertTechnicalProblemContactingCardIssuingBank,
      alertTechnicalProblemTimeOut,
      alertTechnicalProblemTryAgain,
      goToPage,
      handleNavigation
    ]
  );

  /**
   * Make call to utils method verifyPaymentAuthorization to get and check payment authorization status
   */
  const callVerifyPaymentAuthorization = useCallback(() => {
    const messageDetails = [
      {
        orderId,
        paymentGroupId,
        numOfRetries: customPaymentProperties.maxRetryCount,
        delay: customPaymentProperties.delayInMillis,
        action,
        getState,
        callback: onVerifyPaymentAuthorization
      }
    ];

    verifyPaymentAuthorization(messageDetails);
  }, [
    action,
    customPaymentProperties.delayInMillis,
    customPaymentProperties.maxRetryCount,
    getState,
    onVerifyPaymentAuthorization,
    orderId,
    paymentGroupId
  ]);

  //UI for checkout payer authentication component
  return (
    <Styled id="CheckoutPayerAuthentication" css={css}>
      <div className="CheckoutPayerAuthentication">
        <span>{textProcessingDoNotRefresh}</span>
        <PayerAuthForm {...customPaymentProperties} callVerifyPaymentAuthorization={callVerifyPaymentAuthorization} />
        <iframe
          title={textGenericCard3DSPaymentAuthorizationOutput}
          frameBorder="0"
          className="OutputFrame"
          scrolling="no"
          name="output_frame"
          src=""
        ></iframe>
      </div>
    </Styled>
  );
};

CheckoutPayerAuthentication.propTypes = {
  /**
   * The unique id for the component
   */
  id: PropTypes.string.isRequired,

  /**
   * Order id
   */
  orderId: PropTypes.string.isRequired,

  /**
   * Order UUID
   */
  orderUUID: PropTypes.string.isRequired,

  /**
   * Payer Auth Payment Group
   */
  payerAuthPaymentGroup: PropTypes.shape({
    /**
     * PaymentGroupId of paymentGroup
     */
    paymentGroupId: PropTypes.string.isRequired,

    /**
     * custom payment properties of paymentGroup
     */
    customPaymentProperties: PropTypes.shape({
      /**
       * the acs URL
       */
      // eslint-disable-next-line camelcase
      payerAuthEnrollReply_acsURL: PropTypes.string,
      /**
       * the PA request
       */
      // eslint-disable-next-line camelcase
      payerAuthEnrollReply_paReq: PropTypes.string,
      /**
       * the merchant data
       */
      MD: PropTypes.string,
      /**
       * the payer auth transaction id
       */
      // eslint-disable-next-line camelcase
      payerAuthEnrollReply_xid: PropTypes.string,
      /**
       * the transaction type
       */
      transactionType: PropTypes.string,
      /**
       * the currency Code
       */
      currencyCode: PropTypes.string,
      /**
       * the locale
       */
      locale: PropTypes.string,
      /**
       * the channel
       */
      channel: PropTypes.string,
      /**
       * the order id
       */
      orderId: PropTypes.string,
      /**
       * the payment group's id
       */
      paymentId: PropTypes.string,
      /**
       * the transaction id
       */
      transactionId: PropTypes.string,
      /**
       * the time stamp
       */
      transactionTimestamp: PropTypes.string,
      /**
       * the payment method
       */
      paymentMethod: PropTypes.string,
      /**
       * the gateway id
       */
      gatewayId: PropTypes.string,
      /**
       * the amount
       */
      amount: PropTypes.string,
      /**
       * the profile id
       */
      profileId: PropTypes.string,
      /**
       * the site Id
       */
      siteId: PropTypes.string,
      /**
       * the delay b/w two successive tries
       */
      delayInMillis: PropTypes.string,
      /**
       * the number of retries to be done
       */
      maxRetryCount: PropTypes.string
    }),

    /**
     * Payment method of payment Group
     */
    paymentMethod: PropTypes.string.isRequired,

    /**
     * Payment state of payment Group
     */
    paymentState: PropTypes.string.isRequired,

    /**
     * amount of payment Group
     */
    amount: PropTypes.number.isRequired
  })
};

/**
 * Default values for not required properties
 */
CheckoutPayerAuthentication.defaultProps = {
  payerAuthPaymentGroup: {}
};

export default connect(getComponentData)(CheckoutPayerAuthentication);
