/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import React, {useContext, useState} from 'react';
import {PaymentsContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-complete-payment-button/selectors';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-complete-payment-button/styles.css';
import {
  getAmountRemaining,
  handleAddPaymentSuccess,
  handleAddPaymentFailure
} from '@oracle-cx-commerce/react-components/utils/payment';
import PropTypes from 'prop-types';

/**
 * Widget for Complete Payment button.
 */
const CheckoutCompletePaymentButton = props => {
  const {order, actionCompletePendingPaymentOrder, alertOrderNotPlacedPaymentDeclined, alertTechnicalProblemContactUs} =
    props;
  const {payments = []} = useContext(PaymentsContext) || {};
  const store = useContext(StoreContext);
  const {action} = store;

  const [inProgress, setInProgress] = useState(false);

  const goToPage = useNavigator();
  /**
   * Invokes add payment action on the passed in payments payload.
   * @param paymentsToApply Array The payments to be applied
   */
  const addPayments = paymentsToApply => {
    if (paymentsToApply.length > 0) {
      if (order && order.id) {
        paymentsToApply[0].seqNum = '0';
        const amountRemaining = getAmountRemaining(order);
        if (amountRemaining) {
          paymentsToApply[0].amount = amountRemaining;
        }
        const payload = {orderId: order.id, payments: paymentsToApply, uuid: order.uuid};
        action('addPayments', payload).then(response => {
          //Enable Place Order Button
          setInProgress(false);
          if (response.ok === true) {
            const messages = {alertOrderNotPlacedPaymentDeclined, alertTechnicalProblemContactUs};
            handleAddPaymentSuccess(order.id, goToPage, response, action, messages);
          } else {
            handleAddPaymentFailure(action, goToPage, response);
          }
        });
      }
    }
  };

  /**
   * Processes the payments in the context
   * Updates the payment group if the payment in the context has an paymentGroupId
   * or calls the apply payments to apply the payment in the context.
   * @param payments Array The payments to be processed
   */
  const processPayments = async payments => {
    const paymentsToApply = [];
    for (const payment of payments) {
      const {paymentGroupId, ...paymentDetails} = payment;
      paymentsToApply.push(paymentDetails);
    }
    addPayments(paymentsToApply);
  };

  /**
   * Handler for complete order button
   */
  const onCompletePayment = () => {
    action('notifyClearAll');
    if (payments.length > 0) {
      setInProgress(true);
      processPayments(payments);
    }
  };

  /**
   * Returns true if complete payment button should be disabled
   * Disable complete payment button, when
   * add payment is in progress
   */

  const isCompletePaymentButtonDisabled = () => {
    return inProgress || payments.length === 0;
  };

  return (
    <Styled id="CheckoutCompletePaymentButton" css={css}>
      <div className="CheckoutCompletePaymentButton">
        <button
          type="button"
          className="CheckoutCompletePaymentButton__Button"
          disabled={isCompletePaymentButtonDisabled()}
          onClick={onCompletePayment}
        >
          {actionCompletePendingPaymentOrder}
        </button>
      </div>
    </Styled>
  );
};

CheckoutCompletePaymentButton.propTypes = {
  /**
   * pending payment order corresponds to order id passed in url context.
   */
  // eslint-disable-next-line react/forbid-prop-types
  order: PropTypes.object.isRequired
};

export default connect(getComponentData)(CheckoutCompletePaymentButton);
