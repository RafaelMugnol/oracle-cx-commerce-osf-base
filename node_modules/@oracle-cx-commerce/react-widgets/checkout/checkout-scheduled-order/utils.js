/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';

// The maximum length of schedule name
export const REPOSITORY_STRING_MAX_LENGTH = 250;

// Object with schedule frequency mode values
export const scheduleModeValues = {
  SCHEDULE_MODE_ONCE_DAILY: 'onceADay',
  SCHEDULE_MODE_WEEKLY: 'weekly',
  SCHEDULE_MODE_ONCE_MONTHLY: 'onceAMonth',
  SCHEDULE_MODE_BI_MONTHLY: 'everyTwoMonths',
  SCHEDULE_MODE_QUARTERLY: 'quarterly'
};

// The default schedule payload format to create scheduled order
export const defaultCreateSchedulePayload = {
  schedule: {
    daysInMonth: [],
    occurrenceInDay: 1,
    monthsInYear: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    daysOfWeek: [1, 2, 3, 4, 5, 6, 7],
    weeksInMonth: [1, 2, 3, 4, 5]
  },
  scheduleType: 'calendar',
  endDate: '',
  startDate: '',
  name: '',
  state: 'active'
};

//The object with schedule frequency options to be enabled for the frequency mode
export const scheduleShowMonthWeek = {
  onceADay: {
    showDayOfWeek: false,
    showDaysOfWeek: false,
    showWeeksOfMonth: false
  },
  weekly: {
    showDayOfWeek: true,
    showDaysOfWeek: false,
    showWeeksOfMonth: true
  },
  onceAMonth: {
    showDayOfWeek: false,
    showDaysOfWeek: false,
    showWeeksOfMonth: false
  },
  everyTwoMonths: {
    showDayOfWeek: false,
    showDaysOfWeek: false,
    showWeeksOfMonth: false
  },
  quarterly: {
    showDayOfWeek: false,
    showDaysOfWeek: false,
    showWeeksOfMonth: false
  }
};

/**
 * Function to validate required schedule information
 * @returns {boolean} returns true if the required schedule info is present
 */
export const isScheduleInfoValid = scheduleInfo => {
  if (
    !isEmptyObject(scheduleInfo) &&
    scheduleInfo.name &&
    scheduleInfo.startDate &&
    !isEmptyObject(scheduleInfo.schedule)
  ) {
    const startDate = new Date(scheduleInfo.startDate);
    const endDate = new Date(scheduleInfo.endDate);
    const currentDate = new Date();
    let endDateCheck = true;
    if (scheduleInfo.endDate && endDate <= startDate) {
      endDateCheck = false;
    }
    if (startDate > currentDate && endDateCheck) return true;
  }

  return false;
};

/**
 * Function to return available schedule frequency modes
 * @returns {array} returns object with each mode sub grouped
 */
export const getFrequencyOptions = locales => {
  const groupedOptions = {};
  const options = [
    {
      value: scheduleModeValues.SCHEDULE_MODE_ONCE_DAILY,
      text: locales['labelOnceADay'],
      optgroup: locales['labelDaily']
    },
    {
      value: scheduleModeValues.SCHEDULE_MODE_WEEKLY,
      text: locales['labelWeekly'],
      optgroup: locales['labelWeekly']
    },
    {
      value: scheduleModeValues.SCHEDULE_MODE_ONCE_MONTHLY,
      text: locales['labelOnceAMonth'],
      optgroup: locales['labelMonthly']
    },
    {
      value: scheduleModeValues.SCHEDULE_MODE_BI_MONTHLY,
      text: locales['labelEveryTwoMonths'],
      optgroup: locales['labelMonthly']
    },
    {
      value: scheduleModeValues.SCHEDULE_MODE_QUARTERLY,
      text: locales['labelQuarterly'],
      optgroup: locales['labelMonthly']
    }
  ];

  options.forEach(option => {
    if (!groupedOptions[option.optgroup]) groupedOptions[option.optgroup] = [];
    groupedOptions[option.optgroup].push({
      value: option.value,
      text: option.text
    });
  });

  return groupedOptions;
};

const scheduleDaysOfWeekOptions = [
  {
    label: 'labelSundayAbbreviation',
    id: 'sunday',
    value: 1
  },
  {
    label: 'labelMondayAbbreviation',
    id: 'monday',
    value: 2
  },
  {
    label: 'labelTuesdayAbbreviation',
    id: 'tuesday',
    value: 3
  },
  {
    label: 'labelWednesdayAbbreviation',
    id: 'wednesday',
    value: 4
  },
  {
    label: 'labelThursdayAbbreviation',
    id: 'thursday',
    value: 5
  },
  {
    label: 'labelFridayAbbreviation',
    id: 'friday',
    value: 6
  },
  {
    label: 'labelSaturdayAbbreviation',
    id: 'saturday',
    value: 7
  }
];

const scheduleWeeksInMonthOptions = [
  {
    label: 'labelFirstWeek',
    id: 'firstWeek',
    value: 1
  },
  {
    label: 'labelSecondWeek',
    id: 'secondWeek',
    value: 2
  },
  {
    label: 'labelThirdWeek',
    id: 'thirdWeek',
    value: 3
  },
  {
    label: 'labelFourthWeek',
    id: 'fourthWeek',
    value: 4
  },
  {
    label: 'labelLastWeek',
    id: 'lastWeek',
    value: 5
  }
];

//The object with schedule frequency options for days of week and weeks in month
export const checkBoxOptions = {
  daysOfWeek: scheduleDaysOfWeekOptions,
  weeksInMonth: scheduleWeeksInMonthOptions
};

// REGEX patterns used to determine the current schedule mode.
export const scheduleModePatterns = {
  [scheduleModeValues.SCHEDULE_MODE_QUARTERLY]: {
    occurrenceInDay: /^1$/,
    daysOfWeek: /^$/,
    daysInMonth: /^1$/,
    weeksInMonth: /^$/,
    monthsInYear: /^([0-9]|1[0-1])(,([0-9]|(1[0-1]))){3,3}$/
  },

  [scheduleModeValues.SCHEDULE_MODE_BI_MONTHLY]: {
    occurrenceInDay: /^1$/,
    daysOfWeek: /^$/,
    daysInMonth: /^1$/,
    weeksInMonth: /^$/,
    monthsInYear: /^([0-9]|1[0-1])(,([0-9]|(1[0-1]))){5,5}$/
  },

  [scheduleModeValues.SCHEDULE_MODE_ONCE_MONTHLY]: {
    occurrenceInDay: /^1$/,
    daysOfWeek: /^$/,
    daysInMonth: /^1$/,
    weeksInMonth: /^$/,
    monthsInYear: /^0,1,2,3,4,5,6,7,8,9,10,11$/
  },

  [scheduleModeValues.SCHEDULE_MODE_ONCE_DAILY]: {
    occurrenceInDay: /^1$/,
    daysOfWeek: /^1,2,3,4,5,6,7$/,
    daysInMonth: /^$/,
    weeksInMonth: /^1,2,3,4,5$/,
    monthsInYear: /^0,1,2,3,4,5,6,7,8,9,10,11$/
  },

  [scheduleModeValues.SCHEDULE_MODE_WEEKLY]: {
    occurrenceInDay: /^1$/,
    daysOfWeek: /^([1-7])(,[1-7]){0,6}$/,
    daysInMonth: /^$/,
    weeksInMonth: /^([1-5])(,[1-5]){0,4}$/,
    monthsInYear: /^0,1,2,3,4,5,6,7,8,9,10,11$/
  }
};

/**
 * Check whether the browser supports html5 Date input type
 */
export const checkDateTypeSupported = () => {
  const input = document.createElement('input');
  input.setAttribute('type', 'date');

  const notADateValue = 'not-a-date';
  input.setAttribute('value', notADateValue);

  return input.value !== notADateValue;
};
