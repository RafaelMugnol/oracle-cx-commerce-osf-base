/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useCallback} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import {
  getFrequencyOptions,
  scheduleModeValues
} from '@oracle-cx-commerce/react-widgets/checkout/checkout-scheduled-order/utils';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-scheduled-order/components/schedule-frequency-modes/styles.css';

/**
 * Component to populate schedule frequency modes
 * @param {Object} props the properties object
 */
const ScheduleFrequencyModes = props => {
  const {handleFrequencyChange, selectedFrequency, setCreateSchedulePayload, startDate, labelAriaSelectFrequency} =
    props;
  const groupedFrequencyOptions = getFrequencyOptions(props);

  // Function to set the schedule frequency values to CreateSchedulePayload based on frequency mode
  const onFrequencyChange = useCallback(
    event => {
      handleFrequencyChange(event);
      const selectedFrequencyType = event.target.value;
      let scheduleFrequencyState = {};
      if (selectedFrequencyType === scheduleModeValues.SCHEDULE_MODE_WEEKLY) {
        scheduleFrequencyState = {
          daysInMonth: [],
          occurrenceInDay: 1,
          monthsInYear: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
          daysOfWeek: [1],
          weeksInMonth: [1, 2, 3, 4, 5]
        };
      }
      if (selectedFrequencyType === scheduleModeValues.SCHEDULE_MODE_ONCE_DAILY) {
        scheduleFrequencyState = {
          daysInMonth: [],
          occurrenceInDay: 1,
          monthsInYear: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
          daysOfWeek: [1, 2, 3, 4, 5, 6, 7],
          weeksInMonth: [1, 2, 3, 4, 5]
        };
      }
      if (selectedFrequencyType === scheduleModeValues.SCHEDULE_MODE_ONCE_MONTHLY) {
        scheduleFrequencyState = {
          daysInMonth: [1],
          occurrenceInDay: 1,
          monthsInYear: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
          daysOfWeek: [],
          weeksInMonth: []
        };
      }
      if (selectedFrequencyType === scheduleModeValues.SCHEDULE_MODE_BI_MONTHLY && startDate) {
        const date = new Date(startDate);
        const months = [];
        let j = 0;
        let currentMonth = date.getMonth();
        while (j < 12) {
          months[j] = currentMonth;
          currentMonth = (currentMonth + 2) % 12;
          if (currentMonth === date.getMonth()) {
            break;
          }
          j++;
        }
        scheduleFrequencyState = {
          daysInMonth: [1],
          occurrenceInDay: 1,
          monthsInYear: months.sort(function compareNumbers(a, b) {
            return a - b;
          }),
          daysOfWeek: [],
          weeksInMonth: []
        };
      }
      if (selectedFrequencyType === scheduleModeValues.SCHEDULE_MODE_QUARTERLY) {
        scheduleFrequencyState = {
          daysInMonth: [1],
          occurrenceInDay: 1,
          monthsInYear: [0, 3, 6, 9],
          daysOfWeek: [],
          weeksInMonth: []
        };
      }
      setCreateSchedulePayload(prevState => {
        return {
          ...prevState,
          schedule: scheduleFrequencyState
        };
      });
    },
    [handleFrequencyChange, setCreateSchedulePayload, startDate]
  );

  const renderOptions = options => {
    return options.map(option => {
      return (
        <option key={option.value} value={option.value}>
          {option.text}
        </option>
      );
    });
  };

  return (
    <Styled id="ScheduleFrequencyModes" css={css}>
      <div className="ScheduleFrequencyModes">
        <Dropdown
          id="FrequencyMode__DropDown"
          data-testid="frequencyModeDropDown"
          onChange={onFrequencyChange}
          value={selectedFrequency}
          aria-label={labelAriaSelectFrequency}
        >
          {Object.keys(groupedFrequencyOptions).map(group => {
            return (
              <optgroup key={`${group}-schedule`} label={group}>
                {renderOptions(groupedFrequencyOptions[group])}
              </optgroup>
            );
          })}
        </Dropdown>
      </div>
    </Styled>
  );
};
export default React.memo(ScheduleFrequencyModes);
