/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CheckoutDeliveryAddressForm from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/delivery-address-form';
import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import HardgoodShippingGroupsDetails from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/hardgood-shipping-groups-details';
import MultiShippingDetailsEdit from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/multi-shipping-details-edit';
import {MultiShippingLink} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/multi-shipping-link';
import React, {useCallback, useContext, useEffect, useMemo, useRef} from 'react';
import ShippingGroupDetails from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/shipping-group-details';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/styles.css';
import {fetchShippingCountries} from '@oracle-cx-commerce/fetchers/shipping-countries';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/selectors';
import {
  getHardgoodShippingGroupsWithItems,
  isShippingDetailsComplete
} from '@oracle-cx-commerce/react-components/utils/shipping';
import {isAddressValid, updateSGWithProfileDefaultAddress} from '@oracle-cx-commerce/react-components/utils/address';
import {isEmptyObject, noop} from '@oracle-cx-commerce/utils/generic';
import {useCartInitializer} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import {useShippingCountriesFetcher} from '@oracle-cx-commerce/fetchers/shipping-countries/hooks';
import PropTypes from 'prop-types';

// export fetchers to load all the shipping countries into the state during server-side rendering.
export const fetchers = [fetchShippingCountries];

// Checkout shipping tab index values for the multi shipping flow
const SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX = 0;
const SINGLE_SHIPPING_SUMMARY_TAB_INDEX = 1;
const MULTI_SHIPPING_EDIT_TAB_INDEX = 2;
const MULTI_SHIPPING_SUMMARY_TAB_INDEX = 3;

/**
 * Widget to handle the checkout multi shipping flow.
 * All the shipping groups of the order are of type 'hardgoodShippingGroup'
 */
const CheckoutMultiShippingDetails = props => {
  // resources
  const {headingDeliveryAddress} = props;

  const {currentOrder = {}, isGetCartInProgress, isUserLoggedIn, isB2BUser, currentProfile} = props;
  const {shippingAddresses = []} = currentProfile;

  const {shippingGroups = {}, commerceItems = {}, priceInfo = {}} = currentOrder;

  const store = useContext(StoreContext);

  // Checkout Shipping Context
  const {
    shippingStatus = {},
    setShippingStatus = noop,
    setDeliveryAddressForm = noop,
    setCheckoutShippingTabs = noop
  } = useContext(CheckoutShippingContext);

  // To find the right tab index only for the initial page load
  const loadInitialTabIndexRef = useRef(false);

  // Reprice the current incomplete order on page load.
  useCartInitializer(currentOrder, isGetCartInProgress);

  /**
   * Invoke fetcher hook to load all the shipping countries into the state
   * This will not perform any task if the state has already the shipping countries
   * It is effective if the SSR didn't populate the state with shipping countries data
   */
  useShippingCountriesFetcher(store);

  // Default shipping address in the multi shipping flow
  const profileDefaultAddress = useMemo(() => {
    if (isUserLoggedIn) {
      return isB2BUser ? currentProfile.contactShippingAddress : currentProfile.shippingAddress;
    }

    return null;
  }, [currentProfile.contactShippingAddress, currentProfile.shippingAddress, isB2BUser, isUserLoggedIn]);

  /**
   * Function to find the default tab index in the multi shipping flow
   */
  const findDefaultPageIndex = useCallback(() => {
    const hardgoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);

    // Single Shipping Group
    if (hardgoodShippingGroups.length === 1) {
      if (isUserLoggedIn) {
        if (
          isB2BUser ||
          profileDefaultAddress ||
          isAddressValid(hardgoodShippingGroups[0].shippingAddress, isB2BUser) ||
          shippingAddresses.length > 0
        ) {
          // display the single shipping summary screen
          return SINGLE_SHIPPING_SUMMARY_TAB_INDEX;
        }
      } else if (isAddressValid(hardgoodShippingGroups[0].shippingAddress)) {
        // display the single shipping summary screen
        return SINGLE_SHIPPING_SUMMARY_TAB_INDEX;
      }

      // display the delivery address form screen
      return SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX;
    }

    setDeliveryAddressForm(prevState => {
      return {...prevState, isModified: false};
    });

    // Check if any of the shipping groups has invalid address
    const invalidShippingGroup = hardgoodShippingGroups.find(shippingGroup => {
      return !isAddressValid(shippingGroup.shippingAddress, isB2BUser);
    });
    if (invalidShippingGroup) {
      // display the multi shipping edit screen
      return MULTI_SHIPPING_EDIT_TAB_INDEX;
    }

    // display the multi shipping summary screen
    return MULTI_SHIPPING_SUMMARY_TAB_INDEX;
  }, [
    isB2BUser,
    isUserLoggedIn,
    profileDefaultAddress,
    setDeliveryAddressForm,
    shippingAddresses.length,
    shippingGroups
  ]);

  /**
   * When the shipping address is not available, update the shipping group with the profile default address
   */
  useEffect(() => {
    const hardgoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);

    // Single Shipping Group
    if (hardgoodShippingGroups.length === 1) {
      if (!isAddressValid(hardgoodShippingGroups[0].shippingAddress, isB2BUser) && profileDefaultAddress) {
        updateSGWithProfileDefaultAddress(store, hardgoodShippingGroups[0]);
      }
    }
  }, [isB2BUser, profileDefaultAddress, shippingGroups, store]);

  /**
   * Handles the initial load of the shipping page
   * Loads the shipping methods for the multi shipping summary screen
   */
  useEffect(() => {
    if (loadInitialTabIndexRef.current === false && isGetCartInProgress !== 1 && !isEmptyObject(commerceItems)) {
      setCheckoutShippingTabs({
        SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX,
        SINGLE_SHIPPING_SUMMARY_TAB_INDEX,
        MULTI_SHIPPING_EDIT_TAB_INDEX,
        MULTI_SHIPPING_SUMMARY_TAB_INDEX
      });
      // Will be executed only once: on the initial load
      const defaultTabIndex = findDefaultPageIndex();
      const showConinueToPayment =
        defaultTabIndex === SINGLE_SHIPPING_SUMMARY_TAB_INDEX || defaultTabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX;

      if (defaultTabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX) {
        setShippingStatus(prevState => {
          return {...prevState, loadShippingMethods: true};
        });
      }
      setShippingStatus(prevState => {
        return {...prevState, tabIndex: defaultTabIndex, showConinueToPayment};
      });

      loadInitialTabIndexRef.current = true;
    }
  }, [commerceItems, findDefaultPageIndex, isGetCartInProgress, setCheckoutShippingTabs, setShippingStatus]);

  /**
   * For the shipping summary tabs, display the 'Continue to Payment' button
   * If the shipping details is complete, then enable the 'Continue to Payment' button
   */
  useEffect(() => {
    if (
      shippingStatus.tabIndex === SINGLE_SHIPPING_SUMMARY_TAB_INDEX ||
      shippingStatus.tabIndex === MULTI_SHIPPING_SUMMARY_TAB_INDEX
    ) {
      if (isShippingDetailsComplete(currentOrder, isB2BUser)) {
        setShippingStatus(prevState => {
          return {...prevState, showConinueToPayment: true, enableContinue: true};
        });
      } else {
        setShippingStatus(prevState => {
          return {...prevState, showConinueToPayment: true, enableContinue: false};
        });
      }
    }
  }, [currentOrder, isB2BUser, setShippingStatus, shippingStatus.tabIndex]);

  useEffect(() => {
    setShippingStatus(prevState => {
      return {...prevState, loadShippingMethods: true};
    });
  }, [priceInfo.amount, setShippingStatus, store]);

  /**
   * Function to render the shipping screen based on the shipping tab index
   * tabIndex 0 : display the address form
   * tabIndex 1 : display the single shipping summary
   * tabIndex 2 : display the multi shipping edit screen
   * tabIndex 3 : display the multi shipping summary
   */
  const renderShippingPhase = () => {
    const shippingTabIndex = shippingStatus.tabIndex;
    if (shippingTabIndex === 0) {
      return (
        <>
          <h3>{headingDeliveryAddress}</h3>
          <MultiShippingLink {...props} />
          <CheckoutDeliveryAddressForm {...props} />
        </>
      );
    }

    if (shippingTabIndex === 1) {
      const hardGoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);
      if (hardGoodShippingGroups.length === 1) {
        return (
          <>
            <MultiShippingLink {...props} />
            <ShippingGroupDetails shippingGroup={hardGoodShippingGroups[0]} commerceItems={commerceItems} {...props} />
          </>
        );
      }
    }

    if (shippingTabIndex === 2) {
      return <MultiShippingDetailsEdit {...props} />;
    }

    if (shippingTabIndex === 3) {
      return (
        <HardgoodShippingGroupsDetails
          shippingGroups={shippingGroups}
          commerceItems={commerceItems}
          isMultiShipping={true}
          {...props}
        />
      );
    }
  };

  return (
    <Styled css={css} id="CheckoutMultiShippingDetails">
      <div className="CheckoutMultiShippingDetails">{renderShippingPhase()}</div>
    </Styled>
  );
};

CheckoutMultiShippingDetails.propTypes = {
  /**
   * Logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,
  /**
   * Type of the shopper.
   */
  isB2BUser: PropTypes.bool.isRequired,
  // eslint-disable-next-line spellcheck/spell-checker
  /**
   * The contactInfos (address) object from redux state(ProfileRepository->contactInfos)
   */
  contactInfos: PropTypes.objectOf(
    PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string.isRequired,
      city: PropTypes.string.isRequired,
      state: PropTypes.string.isRequired,
      postalCode: PropTypes.string.isRequired,
      country: PropTypes.string.isRequired,
      phoneNumber: PropTypes.string
    })
  ),
  /**
   * This is the flag to know whether get-cart action is in-progress.
   */
  isGetCartInProgress: PropTypes.number.isRequired,
  /**
   * This is the object to get the current order
   */
  currentOrder: PropTypes.shape({
    shippingGroups: PropTypes.object,
    commerceItems: PropTypes.object
  }).isRequired,
  /**
   * This is the object to get the current profile
   */
  currentProfile: PropTypes.shape({
    shippingAddresses: PropTypes.arrayOf(PropTypes.string)
  }).isRequired,
  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.arrayOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ),
  /**
   * This is the array of shipping countries
   */
  shippingCountries: PropTypes.objectOf(PropTypes.object).isRequired,
  /**
   * This is the default shipping country code
   */
  defaultShippingCountry: PropTypes.string,
  /**
   * This is the object to get the address saved in session context
   */
  componentData: PropTypes.objectOf(PropTypes.object)
};

CheckoutMultiShippingDetails.defaultProps = {
  contactInfos: {},
  componentData: {},
  defaultShippingCountry: '',
  roles: []
};

export default connect(getComponentData)(CheckoutMultiShippingDetails);
