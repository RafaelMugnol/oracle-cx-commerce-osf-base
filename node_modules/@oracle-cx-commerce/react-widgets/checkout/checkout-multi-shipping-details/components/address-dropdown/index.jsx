/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useEffect, useMemo, useState} from 'react';
import {getAddressManagerRoles, getAddressDropdownItem} from '@oracle-cx-commerce/react-components/utils/address';
import Dropdown from '@oracle-cx-commerce/react-components/dropdown';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/address-dropdown/styles.css';
import {noop} from '@oracle-cx-commerce/utils/generic';
import PropTypes from 'prop-types';

/**
 * Component to list addresses in a drop-down
 * @param {Object} props the properties object
 */
const AddressDropdown = props => {
  //resources
  const {labelAddANewAddress, labelOpenAddressBook, labelSelectAnAddress, headingShippingTo} = props;

  const {
    shippingAddresses = [],
    onInputChange = noop,
    isB2BUser,
    isUserLoggedIn,
    roles = [],
    shippingGroup = {}
  } = props;
  const {shippingGroupId, shippingAddress} = shippingGroup;

  // Address manager roles for a B2B user
  const addressManagerRoles = useMemo(() => getAddressManagerRoles(roles), [roles]);

  const [selectedShippingAddress, setSelectedShippingAddress] = useState({
    label: labelSelectAnAddress,
    value: '',
    disabled: true
  });

  /**
   * Function to get the shipping-address options for the drop-down
   */
  const getShippingAddressOptions = () => {
    const addressOptions = [];

    if (selectedShippingAddress.value === '') {
      // when there is no shipping Address, show 'select an address...' as default selection.
      addressOptions.push({
        label: labelSelectAnAddress,
        value: ''
      });
      addressOptions.push(...shippingAddresses);
    } else {
      // add the shippingAddresses to the drop-down options
      addressOptions.push(...shippingAddresses);
    }

    if (isUserLoggedIn) {
      // For a loggedIn user, add the 'addressbook' option
      addressOptions.push({label: labelOpenAddressBook, value: 'openAddressBook'});
    }

    // For a Guest user/ B2C user/ B2B user with specific roles, add the 'addNewAddress' option
    if (
      !isUserLoggedIn ||
      !isB2BUser ||
      addressManagerRoles.isProfileAddrManager ||
      addressManagerRoles.isAccountAddrManager ||
      addressManagerRoles.isAdmin
    ) {
      addressOptions.push({label: labelAddANewAddress, value: 'addNewAddress'});
    }

    return addressOptions;
  };

  /**
   * Get the selected shipping address and display in the drop-down
   */
  useEffect(() => {
    if (shippingAddress) {
      const addressItem = getAddressDropdownItem(shippingAddress);
      shippingAddresses.forEach(function (address) {
        if (address.label === addressItem.label) {
          setSelectedShippingAddress(address);
        }
      });
    }
  }, [shippingAddress, shippingAddresses]);

  return (
    <Styled id="AddressDropdown" css={css}>
      <div className="AddressDropdown">
        <Dropdown
          id={`AddressDropdown-${shippingGroupId}`}
          name={`AddressDropdown-${shippingGroupId}`}
          label={headingShippingTo}
          aria-label={headingShippingTo}
          value={selectedShippingAddress.value}
          onChange={onInputChange}
        >
          {getShippingAddressOptions().map(address => (
            <option
              tabIndex={0}
              value={address.value}
              key={address.value}
              aria-label={address.label}
              disabled={address.disabled}
            >
              {address.label}
            </option>
          ))}
        </Dropdown>
      </div>
    </Styled>
  );
};

AddressDropdown.propTypes = {
  /** Shipping Addresses saved in Shipping groups */
  shippingAddresses: PropTypes.arrayOf(
    PropTypes.shape({
      label: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired
    })
  ),

  /** Callback function to handle save or update address */
  onInputChange: PropTypes.func.isRequired,

  /**
   * Logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,

  /**
   * Type of the shopper.
   */
  isB2BUser: PropTypes.bool.isRequired,

  /**
   * The roles (user roles) object from redux state(ProfileRepository->roles)
   */
  roles: PropTypes.arrayOf(
    PropTypes.shape({
      repositoryId: PropTypes.string.isRequired,
      function: PropTypes.string.isRequired
    })
  ),

  /**
   * Shipping Group
   */
  shippingGroup: PropTypes.shape({
    shippingGroupId: PropTypes.string.isRequired,
    shippingAddress: PropTypes.shape({
      firstName: PropTypes.string,
      lastName: PropTypes.string,
      address1: PropTypes.string,
      city: PropTypes.string,
      state: PropTypes.string,
      postalCode: PropTypes.string,
      country: PropTypes.string,
      phoneNumber: PropTypes.string
    })
  })
};

AddressDropdown.defaultProps = {
  roles: [],
  shippingAddresses: [],
  shippingGroup: {}
};

export default React.memo(AddressDropdown);
