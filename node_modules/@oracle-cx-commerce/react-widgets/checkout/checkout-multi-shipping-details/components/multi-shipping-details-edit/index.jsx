/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CartItemRow from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-item-row';
import {CartItemShippingAddress} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/cart-item-shipping-address';
import CartItemsTableHeader from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-items-table-header';
import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import GWPPlaceholder from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-placeholder';
import React, {useContext, useEffect, useMemo} from 'react';
import {ShipItemToNewAddress} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/ship-item-to-new-address';
import {SingleShippingLink} from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/single-shipping-link';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/multi-shipping-details-edit/styles.css';
import {getHardgoodShippingGroupsWithItems} from '@oracle-cx-commerce/react-components/utils/shipping';
import {isAddressValid, getAddressDropdownItem} from '@oracle-cx-commerce/react-components/utils/address';
import {noop} from '@oracle-cx-commerce/utils/generic';
import {useCartState} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import PropTypes from 'prop-types';

/**
 * Component to edit the shipping groups in the multi shipping flow
 * It provides options to edit a shipping address, to split a cart item to multiple addresses
 * and to ship all items to a single address
 * @param props
 */
const MultiShippingDetailsEdit = props => {
  const {isB2BUser, isUserLoggedIn, currentOrder = {}, componentData = {}} = props;
  const {shippingGroups = {}, commerceItems = {}, id} = currentOrder;

  const {setInvalidItems} = useCartState();

  // Checkout Shipping Context
  const {setShippingStatus = noop} = useContext(CheckoutShippingContext);

  // Filter the shipping groups of type 'hardgoodShippingGroup' that contains commerce items
  const hardgoodShippingGroups = useMemo(() => {
    return getHardgoodShippingGroupsWithItems(shippingGroups);
  }, [shippingGroups]);

  /**
   * Shipping address array for the address drop down
   */
  const shippingAddresses = useMemo(() => {
    const addressMap = {};

    hardgoodShippingGroups.map(shippingGroup => {
      const {shippingAddress = {}} = shippingGroup;
      const addressItem = getAddressDropdownItem(shippingAddress);

      if (isAddressValid(shippingAddress, isB2BUser)) {
        addressMap[addressItem.value] = addressItem;
      }

      return addressItem;
    });

    if (!isUserLoggedIn) {
      // Include the addresses from the session context
      const addresses = componentData.addresses || {};
      Object.values(addresses).map(address => {
        if (!addressMap[address.value]) {
          addressMap[address.value] = address;
        }

        return address;
      });
    }

    return Object.values(addressMap);
  }, [componentData.addresses, hardgoodShippingGroups, isB2BUser, isUserLoggedIn]);

  /**
   * Map with 'commerceId-shippingGroupId' as the key and commerce item as the value
   */
  const commerceItemByShippingGroupMap = useMemo(() => {
    const commerceItemByShippingGroup = new Map();

    hardgoodShippingGroups.forEach(shippingGroup => {
      shippingGroup.items.forEach(item => {
        commerceItemByShippingGroup.set(`${item.commerceId}-${shippingGroup.shippingGroupId}`, item);
      });
    });

    return new Map([...commerceItemByShippingGroup.entries()].sort());
  }, [hardgoodShippingGroups]);

  useEffect(() => {
    const invalidShippingGroup = hardgoodShippingGroups.find(
      shippingGroup => !isAddressValid(shippingGroup.shippingAddress, isB2BUser)
    );

    // If any of the shipping groups doesn't have a valid address, then disable the 'Continue' button
    if (invalidShippingGroup) {
      setShippingStatus(prevState => {
        if (!prevState.enableContinue) {
          return prevState;
        }

        return {...prevState, enableContinue: false};
      });
    } else {
      // Enable the 'Continue' button
      // And set 'loadShippingMethods' to true (to fetch the shipping methods on click of the 'Continue' button)
      setShippingStatus(prevState => {
        if (prevState.enableContinue && prevState.loadShippingMethods) {
          return prevState;
        }

        return {...prevState, enableContinue: true, loadShippingMethods: true};
      });
    }
  }, [hardgoodShippingGroups, isB2BUser, setShippingStatus, shippingGroups]);

  return (
    <Styled id="MultiShippingDetailsEdit" css={css}>
      <div className="MultiShippingDetailsEdit">
        <SingleShippingLink {...props} />

        {[...commerceItemByShippingGroupMap.keys()].map(function (key) {
          const commerceItem = commerceItemByShippingGroupMap.get(key);
          const shippingGroup = shippingGroups[key.split('-')[1]];

          return (
            key && (
              <div className="MultiShippingDetailsEdit__CartItem" key={`${key}`}>
                <div className="MultiShippingDetailsEdit__TableHeader">
                  <CartItemsTableHeader {...props} />
                </div>

                <CartItemRow
                  key={`${key}`}
                  shippingGroupCommerceItem={commerceItem}
                  shippingGroupId={shippingGroup.shippingGroupId}
                  commerceItem={commerceItems[commerceItem.commerceId]}
                  setInvalidItems={setInvalidItems}
                  pdpUrlNotRequired={true}
                  isSplitShipping={true}
                  {...props}
                />

                <CartItemShippingAddress
                  shippingGroup={shippingGroup}
                  shippingGroups={shippingGroups}
                  commerceId={commerceItem.commerceId}
                  quantity={commerceItem.quantity}
                  currentOrderId={id}
                  shippingAddresses={shippingAddresses}
                  {...props}
                />

                {commerceItem.quantity > 1 && (
                  <ShipItemToNewAddress
                    shippingAddress={shippingGroup.shippingAddress}
                    shippingGroupId={shippingGroup.shippingGroupId}
                    commerceId={commerceItem.commerceId}
                    quantity={commerceItem.quantity}
                    shippingGroups={shippingGroups}
                    currentOrderId={id}
                    {...props}
                  />
                )}
              </div>
            )
          );
        })}

        <GWPPlaceholder {...props} />
      </div>
    </Styled>
  );
};

MultiShippingDetailsEdit.propTypes = {
  /**
   * Logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,

  /**
   * Type of the shopper.
   */
  isB2BUser: PropTypes.bool.isRequired,

  /**
   * This is the object to get the current order
   */
  currentOrder: PropTypes.shape({
    shippingGroups: PropTypes.object,
    commerceItems: PropTypes.object
  }).isRequired,

  /**
   * This is the object to get the address saved in session context
   */
  componentData: PropTypes.objectOf(PropTypes.object)
};

MultiShippingDetailsEdit.defaultProps = {
  componentData: {}
};

export default React.memo(MultiShippingDetailsEdit);
