/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {CheckoutShippingContext} from '@oracle-cx-commerce/react-widgets/checkout/checkout-shipping-container/context';
import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import React, {useContext, useState} from 'react';
import {SHIPPING_GROUP_HARDGOOD} from '@oracle-cx-commerce/commerce-utils/constants/shipping';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/single-shipping-link/styles.css';
import {getCurrentOrder} from '@oracle-cx-commerce/commerce-utils/selector';
import {
  getHardgoodShippingGroupsWithItems,
  moveItemsToTargetShippingGroup
} from '@oracle-cx-commerce/react-components/utils/shipping';
import {isAddressValid} from '@oracle-cx-commerce/react-components/utils/address';
import {noop} from '@oracle-cx-commerce/utils/generic';

/**
 * Component that provides the option to ship all the cart items to a single address
 * @param props
 */
export const SingleShippingLink = props => {
  // resources
  const {
    actionShipAllItemsToASingleAddress,
    headingShipEverythingToOneAddress,
    actionConfirm,
    closeLinkAltText,
    labelCancel,
    alertOrderWillShipToOneAddress,
    alertConfirmShipToOneAddress
  } = props;

  const {id, isB2BUser, cssOverride = '', currentOrder = {}} = props;
  const {shippingGroups = {}} = currentOrder;

  // Checkout Shipping Context
  const {checkoutShippingTabs = {}, setShippingStatus = noop} = useContext(CheckoutShippingContext);

  const store = useContext(StoreContext);
  const {action} = store;

  const [showConfirmationDialog, setShowConfirmationDialog] = useState(false);

  /**
   * Function to display the single shipping screen
   * @param {Object} defaultShippingGroup the default shipping group that has all the cart items
   */
  const displaySingleShippingPage = defaultShippingGroup => {
    setShippingStatus(prevState => {
      // If the default shipping group has a valid address, then display the single shipping summary screen
      if (isAddressValid(defaultShippingGroup.shippingAddress, isB2BUser)) {
        return {...prevState, tabIndex: checkoutShippingTabs.SINGLE_SHIPPING_SUMMARY_TAB_INDEX};
      }

      // Otherwise display the delivery address form
      return {...prevState, tabIndex: checkoutShippingTabs.SINGLE_SHIPPING_ADDRESS_FORM_TAB_INDEX};
    });
  };

  /**
   * Success callback function
   * Once the shipping groups are merged to the default shipping group, display the single shipping screen
   */
  const handleSuccess = () => {
    // get the latest order state
    const order = getCurrentOrder(store.getState());
    const hardGoodShippingGroups = getHardgoodShippingGroupsWithItems(order.shippingGroups);

    displaySingleShippingPage(hardGoodShippingGroups[0]);
    setShowConfirmationDialog(false);
  };

  /**
   * Failure callback function
   * @param {Object} response response from server
   */
  const handleFailure = ({error: {message = ''} = {}} = {}) => {
    setShowConfirmationDialog(false);
    action('notify', {level: 'error', message});
  };

  /**
   * Click handler function for the 'Confirm' button in the confirmation dialog
   * Moves all the cart items to a target shipping group and deletes the other shipping groups after moving
   */
  const handleConfirmClick = async () => {
    const targetShippingGroup = Object.values(shippingGroups).find(shippingGroup => {
      return shippingGroup.type === SHIPPING_GROUP_HARDGOOD;
    });

    const response = await moveItemsToTargetShippingGroup(action, targetShippingGroup, shippingGroups);
    if (response.ok) {
      handleSuccess();
    } else {
      handleFailure(response);
    }
  };

  /**
   * Click handler function for the 'Cancel' button
   */
  const handleCancelClick = () => {
    setShowConfirmationDialog(false);
  };

  /**
   * Click handler function for the 'Ship all items to a single address' link
   * If there are multiple shipping groups with non zero commerce items, then display the confirmation dialog
   * Otherwise, display the single shipping screen
   */
  const handleLinkClick = () => {
    const hardgoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);
    if (hardgoodShippingGroups.length > 1) {
      setShowConfirmationDialog(true);
    } else {
      displaySingleShippingPage(hardgoodShippingGroups[0]);
    }
  };

  return (
    <Styled id="SingleShippingLink" css={css}>
      <div className="SingleShippingLink__Wrapper">
        <button type="button" className="SingleShippingLink__Text" onClick={handleLinkClick}>
          {actionShipAllItemsToASingleAddress}
        </button>

        <ConfirmationDialog
          id={id}
          cssOverride={cssOverride}
          title={headingShipEverythingToOneAddress}
          closeAriaLabel={closeLinkAltText}
          closeIconTitle={closeLinkAltText}
          alertMessage={alertOrderWillShipToOneAddress}
          confirmMessage={alertConfirmShipToOneAddress}
          labelConfirm={actionConfirm}
          labelCancel={labelCancel}
          confirmCallback={handleConfirmClick}
          cancelCallback={handleCancelClick}
          closeCallback={handleCancelClick}
          show={showConfirmationDialog}
        ></ConfirmationDialog>
      </div>
    </Styled>
  );
};
