/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useState, useCallback, useContext} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {
  isAddressValid,
  getAddressDropdownItem,
  updateShippingAddressInShippingGroup
} from '@oracle-cx-commerce/react-components/utils/address';
import {getCurrentOrder} from '@oracle-cx-commerce/commerce-utils/selector';
import {splitItemToNewShippingGroup} from '@oracle-cx-commerce/react-components/utils/shipping';
import AddNewAddress from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/add-new-address';
import AddressBookModal from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/address-book-modal';
import AddressFormModal from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/address-form-modal';
import AddressDropdown from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/address-dropdown';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-multi-shipping-details/components/cart-item-shipping-address/styles.css';
import {noop} from '@oracle-cx-commerce/utils/generic';

export const CartItemShippingAddress = props => {
  //resources
  const {
    alertShippingGroupUpdated,
    alertAddressCreatedSuccessfully,
    alertAddressChangedSuccessfully,
    headingAddShippingAddress,
    headingEditShippingAddress,
    labelAddAnAddress,
    labelEditAddress
  } = props;

  const {
    isB2BUser,
    isUserLoggedIn,
    commerceId,
    quantity,
    shippingGroups,
    shippingAddresses,
    shippingCountries,
    defaultShippingCountry,
    shippingGroup = {},
    componentData = {}
  } = props;
  const {shippingGroupId, shippingAddress = {}} = shippingGroup;

  const [isEditAddress, setIsEditAddress] = useState(false);
  const [showAddressBookModal, setShowAddressBookModal] = useState(false);
  const [showShippingAddressModal, setShowShippingAddressModal] = useState(false);

  const store = useContext(StoreContext);
  const {action} = store;

  /**
   * Function to handle the address book modal close
   */
  const handleCloseAddressBookModal = useCallback(() => {
    setShowAddressBookModal(false);
  }, []);

  /**
   * Click handler for the 'Edit Address' button
   */
  const openAddressFormModal = () => {
    setIsEditAddress(true);
    setShowShippingAddressModal(true);
  };

  /**
   * Function to handle the edit address modal close
   */
  const handleCloseAddressFormModal = useCallback(() => {
    setIsEditAddress(false);
    setShowShippingAddressModal(false);
  }, []);

  /**
   * Function to store the newly created address in Session Context
   */
  const updateAddressInSessionContext = useCallback(
    newShippingAddress => {
      const addresses = {};
      const newAddress = getAddressDropdownItem(newShippingAddress);

      if (isEditAddress) {
        // If the shipping address is edited, then the corresponding address in the Session Context should also be updated
        const previousAddress = getAddressDropdownItem(shippingAddress);
        (Object.values(componentData.addresses || {}) || []).map((address, index) => {
          // if previousValue is already present in the Session Context, then it should be updated with the new address value.
          addresses[index] = address.value === previousAddress.value ? newAddress : address;

          return address;
        });
      } else {
        // A newly created address should be directly added to the Session context if similar entry is not present.
        let isAlreadyPresent = false;
        (Object.values(componentData.addresses || {}) || []).map(address => {
          if (newAddress.value === address.value) {
            isAlreadyPresent = true;
          }

          return address;
        });

        if (!isAlreadyPresent) {
          addresses[Object.keys(componentData.addresses || []).length] = newAddress;
        }
      }

      action('saveComponentData', {
        addresses
      });
    },
    [action, componentData.addresses, isEditAddress, shippingAddress]
  );

  /**
   * Function to handle the add new address/ select from drop-down/ select from address book.
   */
  const updateAddressForItem = useCallback(
    async ({address = {}, handleCloseAction = noop, isEditAddress}) => {
      /* When new address is added to shipping group, display proper notification */
      let message = alertShippingGroupUpdated;
      if (isEditAddress === true) {
        message = alertAddressChangedSuccessfully;
      }
      if (isEditAddress === false) {
        message = alertAddressCreatedSuccessfully;
      }
      let response = {};
      let newlyCreatedAddress = {};
      if (shippingGroup.items.length > 1) {
        // When multiple commerce items are present in a shipping group, and the address is changed for one of the items,
        // then create a new shipping group with that item and remove it from the previous shipping group.

        // FIX: To avoid the error "The property "alias", "addressType", "repositoryId", "types" is unknown so cannot be applied while processing sub-properties of "shippingAddress"."
        delete address.alias;
        delete address.addressType;
        delete address.repositoryId;
        delete address.types;
        // FIX: To avoid the error "The property "countryName", "regionName" is unknown so cannot be applied while processing sub-properties of "shippingAddress"."
        delete address.countryName;
        delete address.regionName;

        response = await splitItemToNewShippingGroup(store, {
          shippingGroups,
          commerceId,
          shippingGroupId,
          currentShippingGroupQuantity: 0,
          newShippingGroupQuantity: quantity,
          shippingAddress: address
        });

        if (!isUserLoggedIn && response.ok) {
          const latestOrder = getCurrentOrder(store.getState());
          // newly created shipping group
          const newShippingGroupId = Object.keys(latestOrder.shippingGroups).find(shippingGroupId => {
            return !(shippingGroupId in shippingGroups);
          });
          newlyCreatedAddress = latestOrder.shippingGroups[newShippingGroupId].shippingAddress;
        }
      } else {
        // For a shipping group containing only one type of item, just update the shipping address.
        response = await updateShippingAddressInShippingGroup(store, {
          shippingGroup,
          shippingAddress: address,
          alertShippingGroupUpdated: message,
          handleCloseAction,
          fetchShippingMethods: false
        });

        if (!isUserLoggedIn && response.ok) {
          const latestOrder = getCurrentOrder(store.getState());
          newlyCreatedAddress = latestOrder.shippingGroups[shippingGroupId].shippingAddress;
        }
      }

      // Add this address to Session Context
      if (!isUserLoggedIn && response.ok && isAddressValid(newlyCreatedAddress, isB2BUser)) {
        updateAddressInSessionContext(newlyCreatedAddress);
      }
    },
    [
      alertAddressChangedSuccessfully,
      alertAddressCreatedSuccessfully,
      alertShippingGroupUpdated,
      commerceId,
      isB2BUser,
      isUserLoggedIn,
      quantity,
      shippingGroup,
      shippingGroupId,
      shippingGroups,
      store,
      updateAddressInSessionContext
    ]
  );

  /**
   * Function to handle the address-drop-down change
   */
  const onAddressDropdownChange = useCallback(
    event => {
      const {value} = event.target;

      if (value === 'openAddressBook') {
        setShowAddressBookModal(true);
      } else if (value === 'addNewAddress') {
        setIsEditAddress(false);
        setShowShippingAddressModal(true);
      } else if (value !== '') {
        updateAddressForItem({address: JSON.parse(value)});
      }
    },
    [updateAddressForItem]
  );

  /**
   * Function to handle the edit address.
   * address will be updated at the shipping-group level
   */
  const onAddressUpdated = useCallback(
    async ({address = {}, handleCloseAction = noop, isEditAddress}) => {
      /* When new address is added to shipping group, display proper notification */
      let message = alertShippingGroupUpdated;
      if (isEditAddress === true) {
        message = alertAddressChangedSuccessfully;
      }
      if (isEditAddress === false) {
        message = alertAddressCreatedSuccessfully;
      }
      // For a shipping group containing only one type of item, just update the shipping address.
      const response = await updateShippingAddressInShippingGroup(store, {
        shippingGroup,
        shippingAddress: address,
        alertShippingGroupUpdated: message,
        handleCloseAction,
        fetchShippingMethods: false
      });

      // Add this address to Session Context
      if (!isUserLoggedIn && response.ok) {
        const latestOrder = getCurrentOrder(store.getState());
        updateAddressInSessionContext(latestOrder.shippingGroups[shippingGroupId].shippingAddress);
      }
    },
    [
      alertAddressChangedSuccessfully,
      alertAddressCreatedSuccessfully,
      alertShippingGroupUpdated,
      isUserLoggedIn,
      shippingGroup,
      shippingGroupId,
      store,
      updateAddressInSessionContext
    ]
  );

  return (
    <Styled id="CartItemShippingAddress" css={css}>
      <React.Fragment>
        {/* Show 'Add an Address' link only for a guest user who does not have any saved address */}
        {!isUserLoggedIn && shippingAddresses.length === 0 ? (
          <div className="CartItemShippingAddress__AddANewAddress">
            <AddNewAddress
              {...props}
              countries={shippingCountries}
              defaultCountry={defaultShippingCountry}
              onAddressUpdated={onAddressUpdated}
              headingAddAddress={headingAddShippingAddress}
              headingEditAddress={headingEditShippingAddress}
              labelAddANewAddress={labelAddAnAddress}
            />
          </div>
        ) : (
          <AddressDropdown {...props} onInputChange={onAddressDropdownChange} />
        )}

        {/* Edit Address */}
        {isAddressValid(shippingAddress, isB2BUser) && (
          <div className="CartItemShippingAddress__Buttons">
            <button type="button" className="CartItemShippingAddress__EditButton" onClick={openAddressFormModal}>
              {labelEditAddress}
            </button>
          </div>
        )}

        {/* Address Book Modal */}
        <AddressBookModal
          {...props}
          show={showAddressBookModal}
          shippingGroupId={shippingGroupId}
          onAddressUpdated={updateAddressForItem}
          handleCloseAction={handleCloseAddressBookModal}
        ></AddressBookModal>

        {/* Address Form Modal */}
        <AddressFormModal
          {...props}
          show={showShippingAddressModal}
          isEditAddress={isEditAddress}
          handleCloseAction={handleCloseAddressFormModal}
          countries={shippingCountries}
          defaultCountry={defaultShippingCountry}
          headingAddAddress={headingAddShippingAddress}
          headingEditAddress={headingEditShippingAddress}
          address={shippingAddress}
          onAddressUpdated={isEditAddress ? onAddressUpdated : updateAddressForItem}
        ></AddressFormModal>
      </React.Fragment>
    </Styled>
  );
};
