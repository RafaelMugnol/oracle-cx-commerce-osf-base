/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useCallback, useState} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import RequestQuoteModal from '@oracle-cx-commerce/react-widgets/checkout/request-quote-button/components/request-quote-modal';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';
import {PAGE_ORDER_DETAILS_LINK} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/request-quote-button/selectors';
import css from '@oracle-cx-commerce/react-widgets/checkout/request-quote-button/styles.css';
import PropTypes from 'prop-types';
import {deleteEmptyShippingGroups} from '@oracle-cx-commerce/react-components/utils/shipping';
import {ORDER_STATE_QUOTED} from '@oracle-cx-commerce/commerce-utils/constants';
/**
 * A container that holds all the payment related widgets.
 * Holds widgets for credit card, gift card, pay in store or other payment method widgets.
 * @param props
 */
const RequestQuoteButton = props => {
  // props
  const {
    currentOrder,
    isUserLoggedIn,
    displayRequestQuoteButton,
    actionRequestQuote,
    alertQuoteRequestSubmitted,
    CPQQuotingSettings
  } = props;
  const ERROR = 'error';
  const goToPage = useNavigator();
  const {action} = useContext(StoreContext);

  const [showRequestQuote, setShowRequestQuote] = useState(false);

  /**
   * Failure callback for the action
   */
  const onOk = useCallback(() => {
    action('notify', {level: 'success', message: alertQuoteRequestSubmitted});
    goToPage(`${PAGE_ORDER_DETAILS_LINK}/${currentOrder.id}`);
  }, [action, alertQuoteRequestSubmitted, currentOrder.id, goToPage]);
  /**
   * Failure callback for the action
   */
  const onNotOk = useCallback(
    ({error = {}}) => {
      action('notify', {level: 'error', message: error.message});
    },
    [action]
  );
  const onSubmit = useCallback(
    async note => {
      const payload = {
        orderId: currentOrder.id,
        note
      };
      if (currentOrder.paymentGroups) {
        for (const paymentGroup in currentOrder.paymentGroups) {
          const response = await action('deleteAppliedPayment', {paymentGroupId: paymentGroup});
          if (!response.ok) {
            action('notify', {level: ERROR, message: response.error.message});

            return;
          }
        }
      }
      //deleting empty shipping groups in order before requesting quote
      if (currentOrder.shippingGroups) {
        const response = await deleteEmptyShippingGroups(action, currentOrder.shippingGroups);
        if (!response.ok) {
          onNotOk(response);
        }
      }
      action('requestQuote', payload).then(response => {
        if (response.ok === true) {
          onOk();
        } else {
          onNotOk(response);
        }
      });
    },
    [action, currentOrder.id, currentOrder.paymentGroups, currentOrder.shippingGroups, onNotOk, onOk]
  );

  return (
    <>
      {CPQQuotingSettings.enabled && (
        <Styled id="RequestQuoteButton" css={css}>
          <RequestQuoteModal
            showRequestQuote={showRequestQuote}
            setShowRequestQuote={setShowRequestQuote}
            onSubmit={onSubmit}
            {...props}
          />
          {isUserLoggedIn && displayRequestQuoteButton && currentOrder.state !== ORDER_STATE_QUOTED && (
            <div className="RequestQuoteButton__button">
              <button type="button" className="secondary" onClick={() => setShowRequestQuote(true)}>
                {actionRequestQuote}
              </button>
            </div>
          )}
        </Styled>
      )}
    </>
  );
};

RequestQuoteButton.propTypes = {
  /**
   * Logged in status of the user.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,
  /**
   * Current order details
   */
  currentOrder: PropTypes.object,
  /**
   * Display/hide the button
   */
  displayRequestQuoteButton: PropTypes.bool,
  /**
   * A resource string to display request quote
   */
  actionRequestQuote: PropTypes.string.isRequired,
  /**
   * A resource string to display quote request submitted
   */
  alertQuoteRequestSubmitted: PropTypes.string.isRequired,
  /**
   * Quote settings
   */
  CPQQuotingSettings: PropTypes.object.isRequired
};

RequestQuoteButton.defaultProps = {
  currentOrder: {},
  displayRequestQuoteButton: true
};

export default connect(getComponentData)(RequestQuoteButton);
