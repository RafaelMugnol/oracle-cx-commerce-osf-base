/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {getCurrentOrder, getCurrentProfile, getOrder, getPage} from '@oracle-cx-commerce/commerce-utils/selector';
import {
  isInStorePaymentApplicable,
  getPaymentGroupsByTypes,
  isPaymentTypeEnabled,
  isPaymentDisabled,
  isPaymentEnabledForApproval,
  getPaymentEnabledForScheduledOrder
} from '@oracle-cx-commerce/react-components/utils/payment';
import {PAYMENT_TYPE_PAY_IN_STORE} from '@oracle-cx-commerce/commerce-utils/constants';

/**
 * Returns widget's required data
 * @param {Object} state the state object
 * @returns required data
 */
export const getComponentData = state => {
  // selectors
  const contextOrderId = getPage(state).contextId;
  const order = contextOrderId ? getOrder(state, {id: contextOrderId}) : getCurrentOrder(state);

  const isDisplayCheckoutPayInStore =
    isPaymentTypeEnabled(state, PAYMENT_TYPE_PAY_IN_STORE) && isInStorePaymentApplicable(order);

  return {
    appliedInstorePaymentGroups: getPaymentGroupsByTypes(order, [PAYMENT_TYPE_PAY_IN_STORE]),
    isPaymentDisabled: isPaymentDisabled(order),
    isDisplayCheckoutPayInStore,
    isPaymentMethodEnabledForApproval: isPaymentEnabledForApproval(state, PAYMENT_TYPE_PAY_IN_STORE),
    isApprovalEnabled: getCurrentProfile(state).derivedApprovalRequired,
    PaymentInfoForScheduledOrder: getPaymentEnabledForScheduledOrder(state, PAYMENT_TYPE_PAY_IN_STORE)
  };
};
