/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  PAGE_CART_LINK,
  PAYMENT_TYPE_GIFTCARD,
  PAYMENT_TYPE_PAY_LATER
} from '@oracle-cx-commerce/commerce-utils/constants';
import {PaymentsContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import React, {useCallback, useContext, useEffect, useState} from 'react';
import {
  deleteAppliedPaymentsByTypes,
  getPaymentGroupsByTypes
} from '@oracle-cx-commerce/react-components/utils/payment';

import ConfirmationDialog from '@oracle-cx-commerce/react-components/confirmation-dialog';
import PropTypes from 'prop-types';
import RadioButton from '@oracle-cx-commerce/react-components/radio';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/checkout/checkout-pay-later/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/checkout/checkout-pay-later/selectors';
import {noop} from '@oracle-cx-commerce/utils/generic';
import {useNavigator} from '@oracle-cx-commerce/react-components/link';

/**
 * This component is a radio button for pay after approval option and it will appears if order requires approval.
 * @param {Object} props properties object
 */
const CheckoutPayLater = props => {
  const {
    id,
    actionOk,
    actionBackToCart,
    alertForApprovalPaymentWhenOtherPaymentsApplied,
    currentOrder,
    currentOrderId,
    headingConflictingPaymentMethodsWithApproval,
    labelPayAfterApproval,
    labelAriaCloseAndBackToCart,
    textPaymentAfterApproval,
    isPayAfterApprovalSelected,
    isUserLoggedIn,
    isScheduledCurrentOrder
  } = props;

  const {
    isApprovalRequired,
    selectedPaymentType,
    setSelectedPaymentType,
    setPaymentsAlertMessage = noop,
    updateSelectedPaymentType = noop
  } = useContext(PaymentsContext) || {};

  const [showConfirmationDialog, setShowConfirmationDialog] = useState(false);

  const paymentTypesToBeDeleted = [PAYMENT_TYPE_GIFTCARD];

  const store = useContext(StoreContext);
  const {action} = store;

  const goToPage = useNavigator();
  //set isPayAfterApprovalSelected in state.
  const setPayAfterApprovalSelected = useCallback(
    value => {
      action('saveComponentData', {
        orders: {[currentOrderId]: {isPayAfterApprovalSelected: value}}
      });
    },
    [action, currentOrderId]
  );

  useEffect(() => {
    //It will set selectedPaymentType if payAfterApproval is already applied previously.
    if (isPayAfterApprovalSelected) {
      if (isApprovalRequired && selectedPaymentType === '') {
        //It will set selectedPaymentType if payAfterApproval is already applied previously.
        //and will be utilize while coming back to payment page
        updateSelectedPaymentType(PAYMENT_TYPE_PAY_LATER);
      }
      //It will reset isPayAfterApprovalSelected in state if any other payment gets selected.
      if (
        (selectedPaymentType !== PAYMENT_TYPE_PAY_LATER && selectedPaymentType !== '') ||
        isApprovalRequired === false
      ) {
        setPayAfterApprovalSelected(false);
      }
    }
  }, [
    isApprovalRequired,
    isPayAfterApprovalSelected,
    selectedPaymentType,
    setPayAfterApprovalSelected,
    setSelectedPaymentType,
    updateSelectedPaymentType
  ]);

  useEffect(() => {
    if (isApprovalRequired && getPaymentGroupsByTypes(currentOrder, paymentTypesToBeDeleted).length) {
      setShowConfirmationDialog(true);
    }
  }, [currentOrder, isApprovalRequired, paymentTypesToBeDeleted]);

  /**
   * This is success call back method to be passed to the conflicting payment dialog
   */
  const confirmCallback = useCallback(async () => {
    //close dialog
    const response = await deleteAppliedPaymentsByTypes(store);
    if (response.ok) {
      setShowConfirmationDialog(false);
    } else {
      //notify error if it occurred
      setPaymentsAlertMessage({type: 'error', message: response.error.message});
    }
  }, [setPaymentsAlertMessage, store]);

  /**
   * This is a call back method to be passed to the conflicting payment dialog
   */
  const goToCartCallback = useCallback(async () => {
    goToPage(PAGE_CART_LINK);
  }, [goToPage]);

  /**
   * This method gets invoked on selection of current payment's radio button.
   */
  const onChange = useCallback(() => {
    updateSelectedPaymentType(PAYMENT_TYPE_PAY_LATER);
    setPayAfterApprovalSelected(true);
  }, [setPayAfterApprovalSelected, updateSelectedPaymentType]);

  //Pay After Approval in radio button UI
  return (
    isUserLoggedIn &&
    isApprovalRequired &&
    !isScheduledCurrentOrder && (
      <Styled id="CheckoutPayLater" css={css}>
        <ConfirmationDialog
          id={id}
          title={headingConflictingPaymentMethodsWithApproval}
          closeAriaLabel={labelAriaCloseAndBackToCart}
          closeIconTitle={labelAriaCloseAndBackToCart}
          alertMessage={alertForApprovalPaymentWhenOtherPaymentsApplied}
          labelConfirm={actionOk}
          labelCancel={actionBackToCart}
          confirmCallback={confirmCallback}
          cancelCallback={goToCartCallback}
          show={showConfirmationDialog}
        />
        <div className="CheckoutPayLater CheckoutPaymentsGroup">
          <div className="CheckoutPayLater__RadioButtonContainer">
            <RadioButton
              id={`checkout-payLater-${id}`}
              name="CheckoutPayments"
              checked={selectedPaymentType === PAYMENT_TYPE_PAY_LATER}
              labelText={labelPayAfterApproval}
              value={PAYMENT_TYPE_PAY_LATER}
              onChange={onChange}
            />
          </div>
          {selectedPaymentType === PAYMENT_TYPE_PAY_LATER && (
            <div role="region" aria-live="polite" className="CheckoutPayLater__TextContainer">
              <span>{textPaymentAfterApproval}</span>
            </div>
          )}
        </div>
      </Styled>
    )
  );
};

CheckoutPayLater.propTypes = {
  /**
   * Current incomplete Order in the cart
   */
  // eslint-disable-next-line react/forbid-prop-types
  currentOrder: PropTypes.object.isRequired,

  /**
   * Boolean to indicate if customer is registered or not.
   */
  isUserLoggedIn: PropTypes.bool.isRequired,

  /**
   * Boolean to indicate if the pay after approval payment option is selected
   */
  // eslint-disable-next-line react/require-default-props
  isPayAfterApprovalSelected: PropTypes.bool,

  /**
   * Current incomplete order id.
   */
  currentOrderId: PropTypes.string.isRequired
};

export default connect(getComponentData)(CheckoutPayLater);
