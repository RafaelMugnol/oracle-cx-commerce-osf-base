/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useContext} from 'react';
import Link from '@oracle-cx-commerce/react-components/link';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/oce/content-listing/styles.css';
import {
  getContentItems,
  getContext,
  getCurrentPageId,
  getPage,
  isMobile
} from '@oracle-cx-commerce/commerce-utils/selector';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import ShowMoreContentButton from '@oracle-cx-commerce/react-widgets/oce/content-listing/components/show-more-content-button';
import {fetchContentList} from '@oracle-cx-commerce/fetchers/content-items/fetch-content-items';
import {useFetchContentList} from '@oracle-cx-commerce/fetchers/content-items/fetch-content-items/hooks';

export const fetchers = [fetchContentList];
/**
 * Following widget lists content items
 *
 * @param props
 */

const FetchedContentListing = props => {
  const store = useContext(StoreContext);
  const state = store.getState();

  let showMore = ''; // default to no 'Show More' button
  const pageId = getCurrentPageId(state);
  const {hasMoreContent} = getPage(state, pageId);

  const {actionShowMore, queryBuilder, contentType} = props;
  const {locale} = getContext(state).global;
  const mobile = isMobile(state);
  const buttonProps = {
    widgetId: props.widgetId,
    limit: parseInt(props.blockSize, 10) || 16,
    pageId,
    actionShowMore,
    queryBuilder,
    contentType,
    locale,
    hasMoreContent,
    mobile
  };
  showMore = <ShowMoreContentButton {...buttonProps} />;

  const items = [];
  for (const [key, value] of Object.entries(props.contentItems)) {
    items.push(<ContentListItem key={key} item={value} itemUrl={value.slug} />);
  }

  return (
    <Styled id="ContentListing" css={css}>
      <ul className={'ContentList__ContentGrid'}>{items}</ul>
      {showMore}
    </Styled>
  );
};

const ContentListItem = props => {
  const {item = {}} = props;

  return (
    <li className={'ContentList__ListItem'}>
      <div key={item.id} className={'ContentList__ContentItem'}>
        <Link href={props.itemUrl}>
          <img src={item.imageUrl} className="ContentList__Thumbnail" alt={item.name} />
          <h4 className={'ContentList__ContentName'}>{item.name}</h4>
        </Link>
        <p className={'ContentList__ContentDesc'}>{item.description}</p>
      </div>
    </li>
  );
};

/**
 * Content Listing component to show empty content listing and
 * dispatch the `fetchContentListing` hook
 */
const PendingContentListing = props => {
  const store = useContext(StoreContext);
  // Fetch the list of content items during client-side rendering.
  useFetchContentList(store, props);

  return <div className={'ContentList__EmptyContentList'} />;
};

/**
 * By using this container we can conditionally call the `fetchContentListing` hook
 * without causing unnecessary calls to the hook when navigating back to the listing page
 * and accidentally load more data than is needed
 */
const ContentListingContainer = props => {
  return props.contentItems ? <FetchedContentListing {...props} /> : <PendingContentListing {...props} />;
};

export default connect(getContentItems)(ContentListingContainer);
