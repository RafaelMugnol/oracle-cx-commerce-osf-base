/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {useContext, useState} from 'react';

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/oce/content-listing/components/show-more-content-button/styles.css';
import {t} from '@oracle-cx-commerce/utils/generic';
import {buildContentQuery} from '@oracle-cx-commerce/react-widgets/oce/utils';

/**
 * A button to show the next set of content items
 * @param props
 */
const ShowMoreContentButton = props => {
  const {actionShowMore, limit, locale, queryBuilder, contentType, widgetId, pageId, mobile} = props;

  const {action} = useContext(StoreContext);

  // A flag to keep track of whether products are currently being loaded
  const [loadingContent, setLoadingContent] = useState(false);

  const query = buildContentQuery(locale, queryBuilder, contentType);
  const payload = {
    widgetId,
    query,
    limit,
    pageId
  };

  // Load the next batch of products
  const loadNextProducts = () => {
    setLoadingContent(true);
    action('oceGetItemsForDelivery', payload).then(() => {
      setLoadingContent(false);
    });
  };

  if (props.hasMoreContent) {
    return (
      <Styled id="ShowMoreContentButton" css={css}>
        <div>
          <button
            type="button"
            className={`ShowMoreContentButton__Button secondary ${
              mobile ? 'ShowMoreContentButton__Button--Mobile' : 'ShowMoreContentButton__Button--Desktop'
            }`}
            disabled={loadingContent}
            onClick={loadNextProducts}
          >
            {t(actionShowMore)}
          </button>
        </div>
      </Styled>
    );
  }

  return <div style={{display: 'none'}} />;
};

export default ShowMoreContentButton;
