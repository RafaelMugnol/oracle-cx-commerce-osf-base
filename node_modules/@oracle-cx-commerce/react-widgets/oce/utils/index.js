/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

export const CSS_PREFIX = 'ContentItem__';
export const SUCCESS = 200;
export const STARTING_CEC_TAG = '[!--$CEC_DIGITAL_ASSET--]';
export const ENDING_CEC_TAG = '[/!--$CEC_DIGITAL_ASSET--]';

export const wrapContentItem = (contentItem, name) => {
  return `<div class="${CSS_PREFIX}${name}">${contentItem}</div>`;
};

export const wrapDateItem = (contentItem, name) => {
  const itemContent = new Date(contentItem);

  return `<div class="${CSS_PREFIX}${name}">${itemContent}</div>`;
};

export const setImageRendition = fields => {
  const fieldURLs = {},
    fieldWidths = {},
    formatIndex = 0,
    linkIndex = 0; //TODO: assumes we use the first format from the first link
  if (fields.renditions.length !== 0) {
    for (const rend of fields.renditions) {
      fieldURLs[rend.name] = rend.formats[formatIndex].links[linkIndex].href;
      fieldWidths[rend.name] = rend.formats[formatIndex].metadata.width;
    }
  } else {
    //if there are no renditions retrieve the native image
    return `<img src="${fields.native.links[linkIndex].href}"/>`;
  }

  //note the sizes field, the page will not re-size an image any larger than the largest image size
  return `<picture><img srcSet="${fieldURLs.Thumbnail} ${fieldWidths.Thumbnail}w,${fieldURLs.Small} ${fieldWidths.Small}w, ${fieldURLs.Medium} ${fieldWidths.Medium}w, ${fieldURLs.Large} ${fieldWidths.Large}w" src="${fieldURLs.Large}" sizes="(min-width:${fieldWidths.Large}px) ${fieldWidths.Large}px, 100vw" loading="lazy" /></picture>`;
};

export const buildContentItem = content => {
  if (content.fields && content.fields.renditions) {
    //this is an image, get the rendition and build an img tag
    return setImageRendition(content.fields);
  }

  return content;
};

export const getLanguage = locale => {
  if (locale) {
    locale = locale.replace('zh-Hans', 'zh-CN').replace('zh-Hant', 'zh-TW');

    return locale;
  }

  return '';
};

export const buildRenderItems = data => {
  const {name, fields: contentFields} = data;

  if (contentFields) {
    let contentData = wrapContentItem(name, 'name');

    contentData += Object.entries(contentFields)
      .map(function ([key, value]) {
        let itemContent = '';
        if (value !== null && value !== undefined) {
          if (Array.isArray(value)) {
            for (const val of value) {
              itemContent += buildContentItem(val);
            }
          } else if (typeof value == 'object' && typeof value.fields !== 'undefined') {
            // this is a json object so needs built
            itemContent += buildContentItem(value);
            // eslint-disable-next-line no-prototype-builtins
          } else if (value.hasOwnProperty('productAwareImage')) {
            //this is a product aware image which needs to be built
            itemContent += buildContentItem(value.productAwareImage);
          } else if (typeof value.timezone !== 'undefined') {
            //hasOwnProperty does not work with eslint settings may need revisited ^
            //this is a date field
            itemContent += wrapDateItem(value.value, key);
          } else {
            // this is just a string, so wrap and display it
            itemContent += wrapContentItem(value || '', key);
          }
        }

        return itemContent;
      })
      .join('');

    return contentData;
  }

  return '<div>';
};

export const buildContentQuery = (locale, queryBuilder, contentType) => {
  const language = getLanguage(locale);
  const pageLanguageQuery = ` AND language co "${language}"`;
  const additionalQueries = queryBuilder;
  let query = `(type eq "${contentType}"${pageLanguageQuery})`;
  let currentQuery, additional;
  if (additionalQueries && additionalQueries.queries && additionalQueries.queries.length) {
    const {andOr} = additionalQueries;
    for (const q of additionalQueries.queries) {
      currentQuery = `fields.${q.field} ${q.operator} "${q.value}"`;
      if (additional) {
        additional = `${additional} ${andOr} ${currentQuery}`;
      } else {
        additional = currentQuery;
      }
    }
    query = `(${query} AND (${additional}))`;
  }

  return query;
};
