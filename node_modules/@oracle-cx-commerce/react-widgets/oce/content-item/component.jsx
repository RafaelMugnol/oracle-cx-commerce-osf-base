/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext} from 'react';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import {
  getWidgets,
  getRegions,
  getContentWidgetItemIds,
  getContentItems
} from '@oracle-cx-commerce/commerce-utils/selector';
import {ContainerContext, StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import Region from '@oracle-cx-commerce/react-components/region';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/oce/content-item/styles.css';
import {buildRenderItems} from '@oracle-cx-commerce/react-widgets/oce/utils';
import {fetchContentItem} from '@oracle-cx-commerce/fetchers/content-items/fetch-current-content-item';
import {useFetchContentItem} from '@oracle-cx-commerce/fetchers/content-items/fetch-current-content-item/hooks';

export const fetchers = [fetchContentItem];

/**
 * Content item widget used for consuming OCE content
 */
/* eslint-disable react/no-danger */
const ContentItem = props => {
    const store = useContext(StoreContext);
    const state = store.getState();
    useFetchContentItem(store, props);

  if (Object.keys(getContentItems(state, props)).length === 0) {
    return <div className={'emptyContentItem'} />;
  }

  const rawData = {...getContentItems(state, props)};
  const data = Object.values(rawData.contentItems);
  let contentData = '';
  const {cssOverride = 'ContentItem__Section'} = props;

  //check if an object
  if (data && data !== [] && data[0] !== undefined) {
    if (data.id === undefined) {
      for (const [key] of Object.entries(data)) {
        const renderedItems = buildRenderItems(data[key]);
        contentData += renderedItems;
      }
    } else {
      contentData = buildRenderItems(data);
    }
  }

  // If the widget (currentWidgetId) is a container widget, it will have regions
  // and if one or more regions has widgets defined, then it in a valid container.
  // OCC will allow an empty region to be added. For the purpose of OCE, if there are no
  // sub-widgets we need to treat the top level widget as default, i.e. show all fields
  if (props.regions.length !== 0) {
    const regions = getRegions(state);
    const thisWidget = getWidgets(state)[props.widgetId];

    if (thisWidget && thisWidget.regions) {
      for (const regionId of thisWidget.regions) {
        if (regions[regionId] && regions[regionId].widgets && regions[regionId].widgets.length) {
          return <ContentItemContainer value={thisWidget} />;
        }
      }
    }
  }

  // TODO warning potentially because of creating a div inside a div
  return (
    <Styled id="ContentItem__Section" css={css}>
      <div className={cssOverride} dangerouslySetInnerHTML={{__html: contentData}} />
    </Styled>
  );
};

const ContentItemContainer = props => {
  const {regions = [], cssOverride = 'ContentItem__Section'} = props.value;

  return (
    <Styled id="ContentItem__Section" css={css}>
      <section className={cssOverride}>
        <ContainerContext.Provider value={props.value}>
          {regions.map((regionId, index) => (
            // eslint-disable-next-line react/no-array-index-key
            <Region key={index} regionId={regionId} />
          ))}
        </ContainerContext.Provider>
      </section>
    </Styled>
  );
};

export default ContentItem;
