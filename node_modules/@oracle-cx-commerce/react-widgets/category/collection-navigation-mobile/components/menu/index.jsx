/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useState, useContext, useEffect} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/category/collection-navigation-mobile/components/menu/styles.css';
import {getExpandedCategories} from '@oracle-cx-commerce/react-widgets/category/collection-navigation-mobile/selectors';
import {MenuMobileContext} from '@oracle-cx-commerce/react-widgets/common/menu-mobile/context';
import {noop} from '@oracle-cx-commerce/utils/generic';
import MenuItemMobile from '@oracle-cx-commerce/react-widgets/category/collection-navigation-mobile/components/menu-item-mobile';
import MenuMediaMobile from '@oracle-cx-commerce/react-widgets/category/collection-navigation-mobile/components/menu-media-mobile';

/**
 *  Displays list of Menu items
 */
const MenuItems = props => {
  const {
    categories = [],
    numberOfChildCategoriesToDisplay,
    catalogCategories,
    currentPagePath,
    categoryMediaProperty
  } = props;
  const expandedCategories = getExpandedCategories(categories, catalogCategories);
  const {toggleMenu = noop} = useContext(MenuMobileContext) || {};
  const [visibleChildCategories, setVisibleChildCategories] = useState({});

  // Close any open child categories on page change
  useEffect(() => {
    if (currentPagePath) {
      setVisibleChildCategories({});
    }
  }, [currentPagePath]);

  // On navigation to a category closes the menu sidebar
  const closeMenu = () => {
    toggleMenu(false);
  };

  // Open/close child categories
  const toggleChildCategories = categoryId => {
    setVisibleChildCategories(prevState => ({
      ...prevState,
      [categoryId]: prevState[categoryId] === undefined ? true : !prevState[categoryId]
    }));
  };

  return (
    <Styled id="CollectionNavigation__MenuItems" css={css}>
      {expandedCategories.map(({id: categoryId, [categoryMediaProperty]: categoryMedia = null, ...category}) => (
        <>
          <MenuItemMobile
            key={categoryId}
            {...category}
            categoryId={categoryId}
            onLinkClick={closeMenu}
            numberOfChildCategoriesToDisplay={numberOfChildCategoriesToDisplay}
            catalogCategories={catalogCategories}
            visibleChildCategories={visibleChildCategories}
            toggleChildCategories={toggleChildCategories}
          />
          {categoryMedia && <MenuMediaMobile categoryMedia={categoryMedia} />}
        </>
      ))}
    </Styled>
  );
};

export default MenuItems;
