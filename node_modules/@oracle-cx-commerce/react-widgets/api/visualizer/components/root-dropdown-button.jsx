/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useState, useEffect} from 'react';
import {t} from '@oracle-cx-commerce/utils/generic';

const RootDropdownButton = props => {
  const {state = {}, category, currentURL, basePageURL} = props;
  const [expanded, setExpanded] = useState(false);

  useEffect(() => {
    /* TODO: Move this block outside to get rid of auto-collapse behavior */
    const splitUrl = currentURL.substring(1).split('/');

    if (splitUrl.length > 1) {
      const [currentPageCategory, , currentPageItemName] = splitUrl;
      setExpanded(currentPageCategory === category && currentPageItemName);
    } else {
      setExpanded(false);
    }
  }, [category, currentURL]);

  return (
    <ul className="dropdown-content level-0">
      <button
        type="button"
        onClick={() => {
          setExpanded(!expanded);
        }}
      >
        {t(category)}
        <i className={`fa fa-caret-${expanded ? 'down' : 'right'}`}></i>
      </button>

      {expanded &&
        Object.keys(state[category]).map(function (subCat) {
          return (
            <SubRootDropdownButton
              key={subCat}
              currentURL={currentURL}
              state={state}
              category={category}
              subCategory={subCat}
              basePageURL={basePageURL}
            />
          );
        })}
    </ul>
  );
};

const SubRootDropdownButton = props => {
  const {state = {}, category, subCategory, currentURL, basePageURL} = props;
  const [expanded, setExpanded] = useState(false);

  useEffect(() => {
    const splitUrl = currentURL.substring(1).split('/');

    if (splitUrl.length > 1) {
      const [, currentPageSubCategory, currentPageItemName] = splitUrl;
      setExpanded(currentPageSubCategory === subCategory && currentPageItemName);
    } else {
      setExpanded(false);
    }
  }, [currentURL, subCategory]);

  return (
    <ul className="dropdown-content level-1">
      <button
        type="button"
        onClick={() => {
          setExpanded(!expanded);
        }}
      >
        {t(subCategory)}
        <i className={`fa fa-caret-${expanded ? 'down' : 'right'}`}></i>
      </button>
      {expanded && (
        <DropdownMenuItemList
          state={state}
          currentURL={currentURL}
          basePageURL={basePageURL}
          category={category}
          subCategory={subCategory}
        />
      )}
    </ul>
  );
};

const DropdownMenuItemList = props => {
  const {state = {}, category, subCategory, currentURL, basePageURL} = props;
  const categoryList = state[category][subCategory];
  const hrefPath = `${basePageURL}#${category}/${subCategory}/`;

  const splitUrl = currentURL.substring(1).split('/');

  let currentPageCategory = '',
    currentPageSubCategory = '',
    currentPageItemName = '';

  if (splitUrl.length > 1) {
    [currentPageCategory, currentPageSubCategory, currentPageItemName] = splitUrl;
  }

  const getClassName = item => {
    let className = 'dropdown-content level-2';

    className +=
      currentPageCategory === category && currentPageSubCategory === subCategory && item.name === currentPageItemName
        ? ' selected_dropdown-content'
        : '';

    return className;
  };

  return (
    <>
      {categoryList.map(item => (
        <li key={item.name} className={getClassName(item)}>
          <a href={`${hrefPath}${item.name}`}>{item.name}</a>
        </li>
      ))}
    </>
  );
};

export default RootDropdownButton;
