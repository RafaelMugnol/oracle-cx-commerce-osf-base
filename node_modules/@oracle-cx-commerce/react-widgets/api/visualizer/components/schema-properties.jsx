/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useState} from 'react';
import {togglePluginDropdown} from '../utils/index';

const SchemaProperty = props => {
  const {property} = props;
  const {description, propertyName, type, requiredFields = []} = property;

  return (
    <li key={propertyName} className={type === 'object' ? 'first-li' : ''}>
      <div className="flex-1">
        <span className="property-key">
          {propertyName}
          <span className="property-type"> ({type}) </span>
          {requiredFields.includes(propertyName) ? <span className="property-required">* required</span> : ''}
        </span>
        <span className="property-description">{description}</span>
      </div>
    </li>
  );
};

const renderIndividualProperty = (textLabels, property) => {
  const {propertyName, type, items, properties, patternProperties} = property;
  // constructing prop for schemaProperties for the items case separately as we need to add required fields to it
  const itemProp = {
    required: property.requiredFields,
    ...items
  };

  return (
    <React.Fragment key={propertyName}>
      <SchemaProperty property={property} />
      {type === 'array' && items ? <SchemaProperties schema={itemProp} textLabels={textLabels} /> : ''}
      {type === 'object' && (properties || patternProperties) ? (
        <SchemaProperties schema={property} textLabels={textLabels} />
      ) : (
        ''
      )}
    </React.Fragment>
  );
};

const iterateProperties = (textLabels, properties = {}, schema) => {
  return Object.keys(properties).map(key => {
    const property = {
      requiredFields: schema.required,
      propertyName: key,
      ...properties[key]
    };

    return renderIndividualProperty(textLabels, property);
  });
};

const SchemaExample = props => {
  const {example = null, id, className} = props;

  return example !== null ? (
    <pre id={id} className={className}>
      {JSON.stringify(example, null, ' ')}
    </pre>
  ) : null;
};

const SchemaProperties = props => {
  const {schema = {}, textLabels = {}, schemaType} = props;
  const {example = null, properties, patternProperties} = schema;
  const [expandedSchemaProp, setExpandedSchemaProp] = useState(false);
  const [expandedSchemaExample, setExpandedSchemaExample] = useState(false);

  let schemaPropertiesTableId = '',
    schemaExampleTableId = '';

  if (schemaType) {
    if (schemaType === 'input') {
      schemaPropertiesTableId = 'schema-properties-table-input';
      schemaExampleTableId = 'schema-example-input';
    } else {
      schemaPropertiesTableId = 'schema-properties-table-output';
      schemaExampleTableId = 'schema-example-output';
    }
  } else {
    schemaPropertiesTableId = 'schema-properties-table';
    schemaExampleTableId = 'schema-example';
  }

  return (
    <div className="schema-properties">
      <div>
        <div className="schema-Inputparameters-response-button">
          {schemaType ? (
            <div>
              {schemaType === 'input' ? (
                <div className="mainDropdowns">
                  <h2>
                    Request Parameters
                    <button
                      type="button"
                      className="mainDropdownButton"
                      onClick={() => {
                        togglePluginDropdown('schema-properties-table-input');
                        setExpandedSchemaProp(!expandedSchemaProp);
                      }}
                    >
                      <i className={`fa fa-caret-${expandedSchemaProp ? 'down' : 'right'}`}></i>
                    </button>
                  </h2>
                </div>
              ) : (
                <h2>
                  Response State Structure
                  <button
                    type="button"
                    className="mainDropdownButton"
                    onClick={() => {
                      togglePluginDropdown('schema-properties-table-output');
                      setExpandedSchemaProp(!expandedSchemaProp);
                    }}
                  >
                    <i className={`fa fa-caret-${expandedSchemaProp ? 'down' : 'right'}`}></i>
                  </button>
                </h2>
              )}
            </div>
          ) : (
            ''
          )}
        </div>
      </div>

      <div id={schemaPropertiesTableId} className={schemaPropertiesTableId}>
        <ul>
          {iterateProperties(textLabels, properties, schema)}

          {iterateProperties(textLabels, patternProperties, schema)}
        </ul>
      </div>

      {example !== null ? (
        <div className="schema-example-button">
          {schemaType && schemaType === 'input' ? (
            <h2>
              Request Example
              <button
                type="button"
                className="mainDropdownButton"
                onClick={() => {
                  togglePluginDropdown('schema-example-input');
                  setExpandedSchemaExample(!expandedSchemaExample);
                }}
              >
                <i className={`fa fa-caret-${expandedSchemaExample ? 'down' : 'right'}`}></i>
              </button>
            </h2>
          ) : (
            <h2>
              State Example
              <button
                type="button"
                className="mainDropdownButton"
                onClick={() => {
                  togglePluginDropdown('schema-example-output');
                  setExpandedSchemaExample(!expandedSchemaExample);
                }}
              >
                <i className={`fa fa-caret-${expandedSchemaExample ? 'down' : 'right'}`}></i>
              </button>
            </h2>
          )}

          <SchemaExample
            id={schemaExampleTableId}
            className={schemaExampleTableId}
            example={example}
            textLabels={textLabels}
          />
        </div>
      ) : (
        ''
      )}
    </div>
  );
};

export default SchemaProperties;
