/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {getApplicationMetadata} from '@oracle-cx-commerce/commerce-utils/selector';
import React, {useState, useEffect} from 'react';
import {useSelector} from '@oracle-cx-commerce/react-components/provider';
import {t} from '@oracle-cx-commerce/utils/generic';
import pkg from '@oracle-cx-commerce/endpoints/package.json';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from './styles.css';
import Menu from './components/menu';
import Main from './components/main';
import {fillSubCategoryMap} from './utils/index';

const {version, authorFromPackage} = pkg;

const App = props => {
  const {state = {}, textLabels, appName} = props;
  const {jsApiDocumentationBanner} = textLabels;
  const actionsSubCategoryMap = fillSubCategoryMap(state.actions);
  const endpointsSubCategoryMap = fillSubCategoryMap(state.endpoints);
  const fetchersSubCategoryMap = fillSubCategoryMap(state.fetchers);
  const componentSubCategoryMap = fillSubCategoryMap(state.components);
  const [currentURL, setCurrentURL] = useState(' ');
  const defaultAuthor = 'Oracle';
  const basePageURL = '__api-docs';
  const basePageURLComponentStyles = 'styles/Components/components/';

  if (typeof window !== 'undefined') {
    if (currentURL === ' ') {
      setCurrentURL(window.location.hash);
    }
  }

  useEffect(() => {
    const locationHashChanged = () => {
      setCurrentURL(window.location.hash);
      window.scrollTo(0, 0);
    };
    window.addEventListener('hashchange', locationHashChanged);

    return () => window.removeEventListener('hashchange', locationHashChanged);
  }, [currentURL]);

  const splitUrl = currentURL.substring(1).split('/');
  let currentPageItemName = '';

  if (splitUrl.length > 1) {
    [, , currentPageItemName] = splitUrl;
  }

  return (
    <div>
      <link
        rel="stylesheet"
        href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
      ></link>
      <div className="App__Container">
        <div className={`Category__Banner custom`}>
          <div className="BannerHeading">
            {t(jsApiDocumentationBanner)} - {appName}
          </div>
        </div>
        <div className="Main__Wrapper">
          <div className="Menu__Wrapper">
            <div className="Sticky__Menu">
              <Menu
                currentPageItemName={currentPageItemName}
                basePageURL={basePageURL}
                state={state}
                currentURL={currentURL}
                textLabels={textLabels}
              />
            </div>
          </div>

          <div className="Main__Content">
            <Main
              state={state}
              textLabels={textLabels}
              actionsSubCategoryMap={actionsSubCategoryMap}
              endpointsSubCategoryMap={endpointsSubCategoryMap}
              fetchersSubCategoryMap={fetchersSubCategoryMap}
              componentSubCategoryMap={componentSubCategoryMap}
              basePageURLComponentStyles={basePageURLComponentStyles}
              version={version}
              currentURL={currentURL}
              authorFromPackage={authorFromPackage}
              defaultAuthor={defaultAuthor}
              basePageURL={basePageURL}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

const Visualizer = props => {
  const {
    textExample,
    textDescription,
    textEndpoints,
    textActions,
    textInput,
    textOutput,
    textParameters,
    textResponse,
    gettingStarted,
    jsApiDocumentationBanner,
    jsApiDocumentationHeading,
    jsApiDocumentationIntroduction1,
    jsApiDocumentationIntroduction2,
    jsApiDocumentationActionsIntro,
    jsApiDocumentationEndpointsIntro
  } = props;

  const textLabels = {
    textExample,
    textDescription,
    textEndpoints,
    textActions,
    textInput,
    textOutput,
    textParameters,
    textResponse,
    gettingStarted,
    jsApiDocumentationBanner,
    jsApiDocumentationHeading,
    jsApiDocumentationIntroduction1,
    jsApiDocumentationIntroduction2,
    jsApiDocumentationActionsIntro,
    jsApiDocumentationEndpointsIntro
  };

  const appMeta = useSelector(getApplicationMetadata);
  const state = {
    actions: appMeta['actions'],
    endpoints: appMeta['endpoints'],
    components: appMeta['components'],
    subscribers: appMeta['subscribers'],
    fetchers: appMeta['fetchers'],
    styles: appMeta['styles']
  };
  const appName = appMeta.name;

  return (
    <>
      <Styled id="visualizerCss" css={css}>
        <App state={state} textLabels={textLabels} appName={appName} />
      </Styled>
    </>
  );
};

export default Visualizer;
