/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import React, {useCallback, useContext, useState} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import AddressInput from '@oracle-cx-commerce/react-widgets/profile/profile-address-form/components/address-input';
import Form from '@oracle-cx-commerce/react-components/form';
import ShippingOptions from '@oracle-cx-commerce/react-widgets/checkout/checkout-single-shipping-details/components/shipping-options';
import {fetchShippingCountries} from '@oracle-cx-commerce/fetchers/shipping-countries';
import {useShippingCountriesFetcher} from '@oracle-cx-commerce/fetchers/shipping-countries/hooks';
import {
  isAddressValid,
  loadShippingMethodsAndSetDefaultForSG,
  updateShippingAddressInShippingGroup,
  setCustomValidity
} from '@oracle-cx-commerce/react-components/utils/address';
import {getCurrentOrderShippingMethods} from '@oracle-cx-commerce/commerce-utils/selector';
import {getHardgoodShippingGroupsWithItems} from '@oracle-cx-commerce/react-components/utils/shipping';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {noop, isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import css from '@oracle-cx-commerce/react-widgets/cart/cart-shipping-estimate/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/cart/cart-shipping-estimate/selectors';
import PropTypes from 'prop-types';

// export fetchers to load all shipping countries into the state during server-side rendering.
export const fetchers = [fetchShippingCountries];

/**
 * CartShippingEstimate widget displays the cart shipping estimate details based on the address entered and shipping method selected.
 * @param {*} props
 */
const CartShippingEstimate = props => {
  /* Locales */
  const {
    alertShippingGroupUpdated,
    headingShippingCalculator,
    headingAvailableShippingOptions,
    labelEstimateShipping,
    textCartContainsMultipleShippingGroups,
    textNoShippingMethods,
    textEnterAddressForShippingEstimate,
    textInvalidField,
    textRequiredField
  } = props;

  /* Props Data */
  const {isB2BUser, currentOrder = {}} = props;
  const {shippingGroups = {}, commerceItems = {}} = currentOrder;

  const hardGoodShippingGroups = getHardgoodShippingGroupsWithItems(shippingGroups);
  const shippingGroup = hardGoodShippingGroups.length === 1 ? hardGoodShippingGroups[0] : {};
  const {shippingGroupId, shippingAddress = {}, shippingMethod = {}, priceInfo = {amount: 0}} = shippingGroup;

  const store = useContext(StoreContext);
  const {action} = store;
  const [address, setAddress] = useState({});
  const [isShippingMethodsUpdated, setIsShippingMethodsUpdated] = useState(false);

  /**
   * Failure callback for the action response
   */
  const onNotOk = useCallback(
    ({error = {}}) => {
      action('notify', {level: 'error', message: error.message});
    },
    [action]
  );

  /* Callback method to be executed on loading of Address Form */
  const onFormLoad = useCallback(() => {
    setAddress(prevState => {
      return {
        ...prevState,
        country: shippingAddress.country,
        state: shippingAddress.state
      };
    });
  }, [shippingAddress]);

  const onInputBlur = useCallback(
    event => {
      const {country = ''} = address;
      setCustomValidity(event.target, textInvalidField, textRequiredField, country);
    },
    [address, textInvalidField, textRequiredField]
  );

  const onInputChange = useCallback(
    event => {
      const prop = {};
      const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
      prop[event.target.name] = value;
      setAddress({...address, ...prop});
    },
    [address]
  );
  const validateElement = useCallback(
    element => {
      const {country = ''} = address;
      setCustomValidity(element, textInvalidField, textRequiredField, country);
    },
    [address, textInvalidField, textRequiredField]
  );

  /* Updates the Shipping Address of the Shipping Group. */
  const updateShippingGroupAddress = useCallback(async () => {
    await updateShippingAddressInShippingGroup(store, {
      shippingGroup,
      shippingAddress: address,
      alertShippingGroupUpdated,
      handleCloseAction: noop,
      fetchShippingMethods: true
    });

    const shippingMethodIds = getCurrentOrderShippingMethods(store.getState())[shippingGroupId] || [];
    if (isAddressValid(address, isB2BUser, true) && shippingMethodIds.length === 0) {
      const response = await loadShippingMethodsAndSetDefaultForSG(store, shippingGroup);
      if (response.ok === false) {
        onNotOk(action, response);
      } else if (response.ok === true) {
        setIsShippingMethodsUpdated(true);
      }
    } else {
      setIsShippingMethodsUpdated(true);
    }
  }, [action, address, alertShippingGroupUpdated, isB2BUser, onNotOk, shippingGroup, shippingGroupId, store]);

  /**
   * Invoke fetcher hook to load all the shipping countries into the state
   * This will not perform any task if the state has already the shipping countries
   * It is effective if the SSR didn't populate the state with shipping countries data
   */
  useShippingCountriesFetcher(store);

  return (
    <Styled id="CartShippingEstimate" css={css}>
      {!isEmptyObject(commerceItems) && (
        <>
          <div className="CartShippingEstimate">
            <h3>{headingShippingCalculator}</h3>
            {hardGoodShippingGroups.length === 1 && (
              <>
                <div ref={onFormLoad}>{textEnterAddressForShippingEstimate}</div>
                <div>
                  <Form
                    onNotOk={onNotOk}
                    setCustomValidity={validateElement}
                    onSubmit={updateShippingGroupAddress}
                    noValidate
                  >
                    <AddressInput
                      address={address}
                      onInputChange={onInputChange}
                      onInputBlur={onInputBlur}
                      showPhoneNumberField={false}
                      {...props}
                    ></AddressInput>
                    <div>
                      <button type="submit" className="secondary CartShippingEstimate__SubmitButton">
                        {labelEstimateShipping}
                      </button>
                    </div>
                  </Form>
                </div>
                <div>
                  {isShippingMethodsUpdated &&
                    address.postalCode &&
                    shippingAddress.postalCode === address.postalCode &&
                    shippingAddress.country === address.country &&
                    shippingAddress.state === address.state && (
                      <ShippingOptions
                        shippingAddress={shippingAddress}
                        shippingGroupId={shippingGroupId}
                        shippingMethod={shippingMethod}
                        isB2BUser={isB2BUser}
                        excludeNameValidation={true}
                        cartAmount={priceInfo.amount}
                        headingShippingOptions={headingAvailableShippingOptions}
                        textNoShippingMethods={textNoShippingMethods}
                      />
                    )}
                </div>
              </>
            )}

            {((Object.keys(shippingGroups).length > 1 && hardGoodShippingGroups.length !== 1) ||
              hardGoodShippingGroups > 1) && (
              <>
                <div>
                  <button type="submit" className="secondary CartShippingEstimate__SubmitButton" disabled={true}>
                    {labelEstimateShipping}
                  </button>
                </div>
                <div>{textCartContainsMultipleShippingGroups}</div>
              </>
            )}
          </div>
        </>
      )}
    </Styled>
  );
};

CartShippingEstimate.propTypes = {
  /**
   * Type of the shopper.
   */
  isB2BUser: PropTypes.bool.isRequired,

  /**
   * Current Order of the shopper.
   */
  currentOrder: PropTypes.shape({
    commerceItems: PropTypes.objectOf(PropTypes.object),
    shippingGroups: PropTypes.objectOf(PropTypes.object)
  }).isRequired
};

export default connect(getComponentData)(CartShippingEstimate);
