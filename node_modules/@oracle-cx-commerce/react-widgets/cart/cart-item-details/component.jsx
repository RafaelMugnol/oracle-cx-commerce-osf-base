/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CartItemsTable from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-items-table';
import Link from '@oracle-cx-commerce/react-components/link';
import {PAGE_HOME_LINK} from '@oracle-cx-commerce/commerce-utils/constants';
import PropTypes from 'prop-types';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import css from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/styles.css';
import {getComponentData} from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/selectors';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';
import {useCartInitializer} from '@oracle-cx-commerce/react-components/utils/cart/hooks';

/**
 * CartItemDetails widget displays shopping cart commerce items to view each item quantity, price and promotion information.
 * It supports single shipping group only.
 * @param {*} props
 */
const CartItemDetails = props => {
  //resources
  const {messageEmptyCart, actionContinueShopping} = props;

  //current order and shipping group info.
  const {currentOrder, isGetCartInProgress} = props;
  const {commerceItems = {}} = currentOrder;

  useCartInitializer(currentOrder, isGetCartInProgress);

  return (
    <Styled id="CartItemDetails" css={css}>
      <div className="CartItemDetails">
        {isGetCartInProgress !== 1 && (
          <>
            {isEmptyObject(commerceItems) ? (
              <>
                <h2 className="CartItemDetails__EmptyMessage">{messageEmptyCart}</h2>
                <Link className="CartItemDetails__ContiueShopping" href={PAGE_HOME_LINK}>
                  {actionContinueShopping}
                </Link>
              </>
            ) : (
              <CartItemsTable {...props} />
            )}
          </>
        )}
      </div>
    </Styled>
  );
};

CartItemDetails.propTypes = {
  isGetCartInProgress: PropTypes.number.isRequired,
  currentOrder: PropTypes.shape({
    commerceItems: PropTypes.objectOf(PropTypes.object)
  }).isRequired
};

export default connect(getComponentData)(CartItemDetails);
