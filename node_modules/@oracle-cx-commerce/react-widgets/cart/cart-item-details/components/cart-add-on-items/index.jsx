/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import { StoreContext } from '@oracle-cx-commerce/react-ui/contexts';
import React, { useContext, useState } from 'react';
import Checkbox from '@oracle-cx-commerce/react-components/checkbox';

import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-add-on-items/styles.css';
import { useNumberFormatter } from '@oracle-cx-commerce/react-components/utils/hooks';
import CaretDownIcon from '@oracle-cx-commerce/react-components/icons/caret-down';
import CaretRightIcon from '@oracle-cx-commerce/react-components/icons/caret-right';

/**
 * Displays add on items
 *
 * @param {*} props
 */
const CartAddOnItems = props => {
  const { addOnItems = [], textHideAddOns, textShowAddOns, commerceItem, isEditable, isChildItem = false } = props;
  const [showAddOns, setShowAddOns] = useState(false);
  const formatCurrency = useNumberFormatter({ style: 'currency' });
  const store = useContext(StoreContext);
  const { action } = store;

  /**
   * find and remove unchecked item from the child items list
   */
  const filterChildItems = (items = [], id) => {
    const itemIndex = items.findIndex(selectedAddOn => selectedAddOn.id === id);
    if (itemIndex !== -1) {
      items.splice(itemIndex, 1);
    } else {
      items.forEach(child => {
        if (child.childItems) {
          child.childItems = filterChildItems(child.childItems, id);
        }
      });
    }
    // extracts commerceItemId, childItems, id from each array item and ignores other properties
    return items.map(({ commerceItemId, id, childItems }) => ({ commerceItemId, id, childItems }));
  };

  /**
   * add/remove add-on item from cart item - updateCartItem
   */
  const updateAddOnItem = (event, item) => {
    //constructing new payload object with commerceItemId, childItems, id by destructuring commerceItem
    const payload = (({ commerceItemId, childItems, id }) => ({ commerceItemId, childItems, id }))(commerceItem);
    if (!event.target.checked) {
      payload.childItems = filterChildItems(payload.childItems, item.id);
    }
    action('updateCartItem', payload);
  };

  return (
    <Styled id="CartAddOnItems" css={css}>
      {!isChildItem && (
        <button
          type="button"
          data-testid="CartAddOnItems__Button"
          className="link CartAddOnItems__Button"
          aria-label="addOnItems_toggle"
          onClick={() => setShowAddOns(!showAddOns)}
        >
          {showAddOns ? (
            <>
              {textHideAddOns}
              <CaretDownIcon />
            </>
          ) : (
            <>
              {textShowAddOns}
              <CaretRightIcon />
            </>
          )}
        </button>
      )}
      {(showAddOns || isChildItem) &&
        addOnItems.map(item => {
          return (
            <div
              key={item.commerceItemId}
              className={`CartAddOnItems__Container ${isChildItem ? 'CartAddOnItems__Child' : ''}`}
            >
              <span className="CartAddOnItems__ItemWrap">
                <div className="CartAddOnItems__Checkbox">
                  {isEditable && (
                    <Checkbox
                      id={`${item.commerceItemId}`}
                      data-testid={`${item.commerceItemId}`}
                      name={`${item.commerceItemId}`}
                      defaultChecked={true}
                      aria-label={`AddOnCheckbox-${item.commerceItemId}`}
                      onChange={event => {
                        updateAddOnItem(event, item);
                      }}
                    />
                  )}
                </div>
                <div className="CartAddOnItems__DisplayName">
                  <span className="CartAddOnItems__ItemText">{item.displayName}</span>
                  {item.selectedOptions &&
                    item.selectedOptions.length > 0 &&
                    item.selectedOptions.map(option => {
                      return (
                        <div key={option.optionName}>
                          {option.optionName} : {option.optionValue}
                        </div>
                      );
                    })}
                  {item.shopperInput &&
                    Object.keys(item.shopperInput).length > 0 &&
                    Object.entries(item.shopperInput).map(([label, value]) => {
                      return (
                        <div key={label}>
                          {label} : {value}
                        </div>
                      );
                    })}
                </div>
              </span>
              <span className="CartAddOnItems__Price">
                {item.detailedItemPriceInfo &&
                  item.detailedItemPriceInfo.length > 0 &&
                  formatCurrency(item.detailedItemPriceInfo[0].detailedUnitPrice)}
              </span>
              {item.childItems && item.childItems.length > 0 && (
                <CartAddOnItems
                  {...props}
                  addOnItems={item.childItems}
                  isEditable={isEditable}
                  isChildItem={true}
                ></CartAddOnItems>
              )}
            </div>
          );
        })}
    </Styled>
  );
};

export default React.memo(CartAddOnItems);
