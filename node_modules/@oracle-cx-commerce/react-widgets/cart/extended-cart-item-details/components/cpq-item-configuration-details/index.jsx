/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/cpq-item-configuration-details/styles.css';
import {useNumberFormatter} from '@oracle-cx-commerce/react-components/utils/hooks';
import PropTypes from 'prop-types';

/**
 * Component to render the details of a CPQ Item
 * @param props
 */

const CPQItemConfigurationDetails = props => {
  const {commerceItemKey, priceListGroup} = props;
  const [shown, setShow] = React.useState(false);

  return (
    <Styled id="ShowDetails" css={css}>
      <div className="CPQItemConfiguration">
        <button type="button" className="CPQItemConfiguration__Button" onClick={() => setShow(!shown)}>
          {shown ? (
            <span className="CPQItemConfiguration__Button--Hide">{props.actionHideDetails}</span>
          ) : (
            <span className="CPQItemConfiguration__Button--Show">{props.actionShowDetails}</span>
          )}
        </button>

        {shown && (
          <div className="CPQItemConfiguration__Details">
            <ul>
              {commerceItemKey.childItems.map(children => (
                <ShowItems
                  key={children.commerceItemId}
                  child={children}
                  orderPriceListGroup={priceListGroup}
                  labelQuantity={props.textQuantity}
                  labelPrice={props.textPrice}
                  {...props}
                />
              ))}
            </ul>
          </div>
        )}
      </div>
    </Styled>
  );
};

function ShowItems({child, orderPriceListGroup, labelQuantity, labelPrice}) {
  const formatCurrency = useNumberFormatter({style: 'currency'}, orderPriceListGroup);
  const nestedChild = (child.childItems || []).map(childItem => {
    return (
      <ShowItems
        key={childItem.commerceItemId}
        child={childItem}
        orderPriceListGroup={orderPriceListGroup}
        labelQuantity={labelQuantity}
        labelPrice={labelPrice}
      />
    );
  });

  return (
    <li>
      <div className="CPQItemConfiguration__Details__Child">
        <span className="CPQItemConfiguration__Details__Child__Name">{child.displayName}</span>
        {nestedChild.length === 0 && (
          <div className="CPQItemConfiguration__Details__Child__Details">
            <span className="CPQItemConfiguration__Details__Child__Details__Quantity">
              {labelQuantity}: {child.quantity}
            </span>
            <br />
            <span className="CPQItemConfiguration__Details__Child__Details__Price">
              {labelPrice}: {formatCurrency(child.amount)}
            </span>
          </div>
        )}
        {nestedChild.length > 0 && <ul>{nestedChild}</ul>}
      </div>
    </li>
  );
}

CPQItemConfigurationDetails.propTypes = {
  /**
   * Commerce Items Key.
   */
  commerceItemKey: PropTypes.objectOf(PropTypes.object).isRequired,

  /**
   * Price List Group.
   */
  priceListGroup: PropTypes.objectOf(PropTypes.object).isRequired
};

export default React.memo(CPQItemConfigurationDetails);
