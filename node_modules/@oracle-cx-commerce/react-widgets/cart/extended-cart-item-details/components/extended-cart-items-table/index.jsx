/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import ExtendedCartItemRow from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-item-row';
import ExtendedCartItemsTableHeader from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-items-table-header';
import GWPPlaceholder from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-placeholder';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-items-table/styles.css';
import {useCartState} from '@oracle-cx-commerce/react-components/utils/cart/hooks';

/**
 * It display cart items table header, cart item list and GWP place holder (if cart has complex gift item) in shopping cart.
 *
 * @param {*} props
 */
const ExtendedCartItemsTable = props => {
  /* Props Data */
  const {
    currentOrder: {shippingGroups = {}, commerceItems = {}, priceListGroup = {}}
  } = props;

  /**
   * Cart State custom hook.
   */
  const {setInvalidItems, invalidItemsOnQuantityChange, setInvalidItemsOnQuantityChange} = useCartState();

  let commerceItemsBySGs = new Map();

  (Object.keys(shippingGroups || {}) || []).forEach(shippingGroupId => {
    shippingGroups[shippingGroupId].items.forEach(item => {
      commerceItemsBySGs.set(`${item.commerceId}-${shippingGroupId}`, item);
    });
  });

  commerceItemsBySGs = new Map([...commerceItemsBySGs.entries()].sort());

  return (
    <Styled id="ExtendedCartItemsTable" css={css}>
      <div className="ExtendedCartItemsTable_Header">
        <ExtendedCartItemsTableHeader {...props} />
      </div>
      <div className="ExtendedCartItemsTable_Body">
        {[...commerceItemsBySGs.keys()].map(function (keyName) {
          return (
            keyName && (
              <div key={`${keyName}`}>
                <ExtendedCartItemRow
                  key={`${keyName}`}
                  shippingGroupCommerceItem={commerceItemsBySGs.get(keyName)}
                  shippingGroupId={keyName.split('-')[1]}
                  commerceItem={commerceItems[commerceItemsBySGs.get(keyName).commerceId]}
                  setInvalidItems={setInvalidItems}
                  setInvalidItemsOnQuantityChange={setInvalidItemsOnQuantityChange}
                  invalidItemsOnQuantityChange={invalidItemsOnQuantityChange}
                  isSplitShipping={true}
                  showConfigurator={true}
                  priceListGroup={priceListGroup}
                  {...props}
                />
              </div>
            )
          );
        })}
        <GWPPlaceholder {...props} />
      </div>
    </Styled>
  );
};

export default ExtendedCartItemsTable;
