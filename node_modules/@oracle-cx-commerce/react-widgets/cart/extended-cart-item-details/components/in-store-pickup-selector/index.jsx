/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useContext, useRef, useState} from 'react';
import {ContainerContext, ProductContext} from '@oracle-cx-commerce/react-ui/contexts';
import StoreLocatorLink from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-locator-link';
import StoreLocator from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-locator';
import StoreSearchResultItem from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/components/store-search-result-item';
import Styled from '@oracle-cx-commerce/react-components/styled';
import {useComponentData} from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/selectors';
import css from '@oracle-cx-commerce/react-widgets/product/product-delivery-options/styles.css';

/**
 * Displays the store pickup Address and link to select a different store.
 */
const InStorePickupSelector = props => {
  /** Labels and Resource Texts */
  const {actionChangeStore, headingStorePickUpAt} = props;
  const {shippingGroupId = null} = props;

  /** Container Context Data */
  const {selections = {}} = useContext(ContainerContext);
  const {skuId = null, selectedStore = {}} = selections;

  /** Product Context Data */
  const {id: productId} = useContext(ProductContext);

  /** Sku Data */
  const {configurableProduct, configurableSku, onlineOnlyProduct, onlineOnlySku, shippingGroups, orderLimit} =
    useComponentData(productId, skuId);

  const storeDefaultValues = {
    stores: {},
    searchComplete: false,
    displayStoreSelectorModal: false,
    currentQueryForLocations: null,
    getStockStatusCompleted: false
  };

  const [storeSettings, setStoreSettings] = useState(storeDefaultValues);
  const storeLocatorLinkRef = useRef();

  return (
    <Styled id="InStorePickupSelector" css={css}>
      {skuId &&
        selectedStore.locationId &&
        !onlineOnlyProduct &&
        !onlineOnlySku &&
        !configurableProduct &&
        !configurableSku && (
          <div className="InStorePickupSelector">
            <StoreLocator
              {...props}
              orderLimit={orderLimit}
              shippingGroups={shippingGroups}
              storeSettings={storeSettings}
              storeLocatorLinkRef={storeLocatorLinkRef}
              setStoreSettings={setStoreSettings}
            />

            <h4>{headingStorePickUpAt}</h4>
            <StoreSearchResultItem
              isFirstItem={true}
              isDeliveryMethodChanged={true}
              store={selectedStore}
              textSelect={''}
            />

            <StoreLocatorLink
              actionChangeStore={actionChangeStore}
              data-testid={`${skuId}${shippingGroupId ? `-${shippingGroupId}` : ``}-ChangeStore`}
              selectedStore={selectedStore}
              storeSettings={storeSettings}
              storeLocatorLinkRef={storeLocatorLinkRef}
              setStoreSettings={setStoreSettings}
            />
          </div>
        )}
    </Styled>
  );
};

export default InStorePickupSelector;
