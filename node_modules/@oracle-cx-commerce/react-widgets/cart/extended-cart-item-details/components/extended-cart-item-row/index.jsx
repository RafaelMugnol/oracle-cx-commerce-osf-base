/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  CartItemAddToWishListLink,
  CartItemPromotion,
  CartItemQuantityDisplayAndUpdate,
  CartItemRemoveLink,
  CartItemStockStatus,
  CartItemSurcharge,
  CartItemUpdateError,
  CartItemSiteInformation
} from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/cart-line-item-components';
import {
  CommerceItemFreeGiftIconMessage,
  CommerceItemImage,
  CommerceItemName,
  CommerceItemPrice,
  CommerceItemQty,
  CommerceItemTotalPrice,
  CommerceItemVariants
} from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/commerce-item-components';
import React, {useState} from 'react';
import ExtendedCartItemDeliveryOptions from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-item-delivery-options';
import AddToPurchaseList from '@oracle-cx-commerce/react-widgets/profile/add-to-purchase-list/component';
import {
  CartItemContext,
  ContainerContext,
  ProductContext,
  ProductSelectionContext
} from '@oracle-cx-commerce/react-ui/contexts';
import GWPItemChangeLink from '@oracle-cx-commerce/react-widgets/cart/cart-item-details/components/gwp-item-change-link';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/extended-cart-item-row/styles.css';
import {useCartItemState} from '@oracle-cx-commerce/react-components/utils/cart/hooks';
import CPQItemConfigurationDetails from '@oracle-cx-commerce/react-widgets/cart/extended-cart-item-details/components/cpq-item-configuration-details';
import Configurator from '@oracle-cx-commerce/react-widgets/product/product-configure/component';
import { ORDER_STATE_QUOTED } from '@oracle-cx-commerce/commerce-utils/constants';

/**
 * It display each cart item in shopping cart based on the current viewport.
 *
 * @param {*} props - props object - contains all the props and locales required by the widget and sub components.
 */
const ExtendedCartItemRow = props => {
  /* Locales */
  const {messageInsufficientStock, messageInsufficientStockAtStore} = props;

  /* Props Data */
  const {
    shippingGroupCommerceItem = {},
    commerceItem = {},
    shippingGroupId,
    showItemPrice,
    currentOrder: {shippingGroups, state},
    setInvalidItems,
    setInvalidItemsOnQuantityChange,
    pdpUrlNotRequired,
    showConfigurator = false,
    priceListGroup
  } = props;

  /* Local state for selections Object. */
  const [selections, setSelections] = useState({
    skuId: commerceItem.catRefId,
    selectedStore: shippingGroups[shippingGroupId].store ? shippingGroups[shippingGroupId].store : {},
    isPickupInStoreOptionSelected: false
  });

  const shippingGroupType = shippingGroups[shippingGroupId].type;

  /* Cart Item State custom hook, also captures the invalid cart items.*/
  const {cartItemDetails, isItemInValid} = useCartItemState({
    commerceItem,
    shippingGroupCommerceItem,
    shippingGroups,
    shippingGroupId,
    showItemPrice,
    pdpUrlNotRequired,
    setInvalidItems,
    setInvalidItemsOnQuantityChange,
    messageInsufficientStock,
    messageInsufficientStockAtStore,
    shippingGroupType,
    selections
  });

  // Product selection context data
  const productSelection = {
    commerceItem
  };

  return (
    <Styled id="ExtendedCartItemRow" css={css}>
      <CartItemContext.Provider value={cartItemDetails}>
        <ProductSelectionContext.Provider value={{productSelection}}>
          <div className={`ExtendedCartItemRow ${(isItemInValid || state === ORDER_STATE_QUOTED) ? 'CartItem__Disable' : ''}`}>
            <div>
              <div className="ExtendedCartItemDetails__ItemDetails">
                {/** Displays the Cart Line Item Image */}
                <CommerceItemImage />
                <div className="ExtendedCartItemDetails__ItemBasicDetails">
                  {/** Displays the Cart Line Item Name */}
                  <CommerceItemName />
                  {commerceItem.configuratorId && showConfigurator && <Configurator className="secondary" {...props} />}
                  {/** Displays the Cart Line Item Variant */}
                  <CommerceItemVariants />
                  <div className="ExtendedCartItemDetails__MobileVisible">
                    {/** Displays the Cart Line Item Price Details */}
                    {props.showItemPrice && <CommerceItemPrice messageAtTheRate={props.messageAtTheRate} />}
                  </div>
                  {/** Displays the link to change/select the GWP Cart Line Item Variant*/}
                  {commerceItem.giftWithPurchaseCommerceItemMarkers &&
                    commerceItem.giftWithPurchaseCommerceItemMarkers.length > 0 && <GWPItemChangeLink {...props} />}
                  {/** Displays the Stock Details of the Cart Line Item*/}
                  <CartItemStockStatus {...props} />
                  {/** Displays the Promotion Details applied to the Cart Line Item*/}
                  <CartItemPromotion />
                  {/** Displays the Free Gift Icon with Message of Cart Line Item*/}
                  <CommerceItemFreeGiftIconMessage textFreeGift={props.textFreeGift} />
                  {/** Displays the Shipping Surcharge Details applied to the Cart Line Item*/}
                  <CartItemSurcharge shippingSurchargeText={props.shippingSurchargeText} />
                  {props.displayCartItemSiteInfo && <CartItemSiteInformation textSiteIcon={props.textSiteIcon} />}
                </div>
                <div className="ExtendedCartItemDetails__DesktopVisible">
                  {/** Displays the Cart Line Item Price Details */}
                  <CommerceItemPrice messageAtTheRate={props.messageAtTheRate} />
                </div>
                <div className="ExtendedCartItemDetails__QuantityTotalContainer">
                  <div className="ExtendedCartItemDetails__Quantity">
                    {/** Displays the Cart Line Item Quantity Details(read-only/changeable) */}
                    {commerceItem.giftWithPurchaseCommerceItemMarkers &&
                    commerceItem.giftWithPurchaseCommerceItemMarkers.length > 0 ? (
                      <CommerceItemQty />
                    ) : (
                      <ContainerContext.Provider value={{selections, setSelections}}>
                        <CartItemQuantityDisplayAndUpdate {...props} />
                      </ContainerContext.Provider>
                    )}
                  </div>
                  <div className="ExtendedCartItemDetails__Total">
                    {/** Displays the Cart Line Item Total Price Details */}
                    <CommerceItemTotalPrice textFree={props.textFree} />
                  </div>
                </div>
              </div>
              {/** It displays the configuration details of the CPQ item. */}
              {commerceItem.configuratorId && (
                <CPQItemConfigurationDetails
                  commerceItemKey={commerceItem}
                  priceListGroup={priceListGroup}
                  {...props}
                />
              )}
              {/** Displays the Error Message corresponding to current Cart Line Item */}
              <CartItemUpdateError
                invalidItemsOnQuantityChange={props.invalidItemsOnQuantityChange}
                currentOrder={props.currentOrder}
              />
              <div className="ExtendedCartItemDetails__BOPIS">
                {/** Displays the Delivery Options to be selected for current Cart Line Item in case of Extended Cart */}
                <ProductContext.Provider value={{id: commerceItem.productId}}>
                  <ContainerContext.Provider value={{selections, setSelections}}>
                    <ExtendedCartItemDeliveryOptions {...props} />
                  </ContainerContext.Provider>
                </ProductContext.Provider>
              </div>
              <div className="ExtendedCartItemDetails__ActionLinks">
                <div className="ExtendedCartItemDetails__ActionLinksLeftCol">
                  {props.showAddToPurchaseList && <AddToPurchaseList {...props} />}
                  {props.showAddToWishList && <CartItemAddToWishListLink {...props} />}
                </div>
                {/** Displays the link to remove the current Cart Line Item */}
                {state !== ORDER_STATE_QUOTED && <CartItemRemoveLink {...props} />}
              </div>
            </div>
          </div>
        </ProductSelectionContext.Provider>
      </CartItemContext.Provider>
    </Styled>
  );
};

export default React.memo(ExtendedCartItemRow);
