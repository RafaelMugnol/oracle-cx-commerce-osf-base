/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  getCurrentProductId,
  getProduct,
  getPage,
  getSkus,
  getSkuPrices,
  getDefaultPriceListGroup
} from '@oracle-cx-commerce/commerce-utils/selector';
import {getBaseURL} from '@oracle-cx-commerce/utils/generic';

//constants
const STOCK_STATUS_SCHEMA = {
  IN_STOCK: 'https://schema.org/InStock',
  OUT_OF_STOCK: 'https://schema.org/OutOfStock',
  PREORDERABLE: 'https://schema.org/PreOrder',
  BACKORDERABLE: 'https://schema.org/LimitedAvailability'
};

const ITEM_CONDITION_SCHEMA = {
  NEW: 'https://schema.org/NewCondition'
};

const SCHEMA_ORG_CONTEXT = 'https://schema.org/';
const SCHEMA_ORG_PRODUCT = 'Product';
const SCHEMA_ORG_OFFER = 'Offer';

/**
 * Returns the price and priceCurrency attributes of the Structured Data
 */
export const getSkuPriceOffer = (skuPrice, currencyCode) => {
  if (!skuPrice) return {};
  const {listPrice, salePrice} = skuPrice;

  return {price: salePrice || listPrice, priceCurrency: currencyCode};
};

/**
 * Returns the availability attribute of the Structured Data
 */
export const getSkuAvailabilityOffer = () => {
  // TODO - we need a way to get stock status since we can't use hooks
  return {availability: STOCK_STATUS_SCHEMA.IN_STOCK};
};

/**
 * Returns the Offer attribute of the Structured Data
 */
export const getSkuOffer = ({skuPrice, skus, skuId, currencyCode, product, productURL, imageURL, productId}) => {
  // get price offer part
  const {displayName = '', description = '', brand = ''} = product;
  const priceOffer = getSkuPriceOffer(skuPrice, currencyCode);
  const {color = ''} = skus[skuId] || {};
  const availabilityOffer = getSkuAvailabilityOffer(skuId);
  const itemCondition = {itemCondition: ITEM_CONDITION_SCHEMA.NEW};

  return {
    '@context': SCHEMA_ORG_CONTEXT,
    '@type': SCHEMA_ORG_PRODUCT,
    name: displayName,
    image: imageURL,
    description,
    sku: skuId,
    productId,
    brand,
    color,
    offers: {
      '@type': SCHEMA_ORG_OFFER,
      url: productURL,
      ...priceOffer,
      ...availabilityOffer,
      ...itemCondition
    }
  };
};

/**
 * Returns the json-ld Structured data tags for a page
 * @param  {Object} req request
 * @param  {Object} state state
 * @return {String} Structured data tags
 */
export const getStructuredDataForPage = ({req, state}) => {
  const {pageType = '', path = ''} = getPage(state);

  if (pageType === 'product') {
    const seoMetaData = [];
    // get base url and canonical route
    const baseURL = getBaseURL({req});

    // current product
    const productId = getCurrentProductId(state) || '';
    const product = getProduct(state, {productId});
    const {childSKUs = [], primarySmallImageURL = ''} = product;

    // all SKUs prices
    const skuPrices = getSkuPrices(state);
    const skus = getSkus(state);
    const {currency: {currencyCode = 'USD'} = {}} = getDefaultPriceListGroup(state);

    // absolute image URL
    const imageURL = baseURL + primarySmallImageURL;
    const productURL = `${baseURL}/${path}`;

    // create an array of json-ld product objects
    for (const skuId of childSKUs) {
      seoMetaData.push(
        getSkuOffer({
          skuPrice: skuPrices[skuId],
          skus,
          skuId,
          currencyCode,
          product,
          productURL,
          imageURL,
          productId
        })
      );
    }

    return `<script data-name="occ-structured-data" type="application/ld+json"> ${JSON.stringify(
      seoMetaData
    )} </script>`;
  }

  return '';
};
