/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {getPage, getSearchResults} from '@oracle-cx-commerce/commerce-utils/selector';
import {getBaseURL} from '@oracle-cx-commerce/utils/generic';
import {
  CANONICAL_PAGE_TYPES,
  PRODUCT_LISTING_PAGE_TYPES
} from '@oracle-cx-commerce/commerce-utils/constants/page-links';

const HTTPS_PROTOCOL = 'https:';

/**
 * Returns the link tags for a page when requested from server and client
 * @param  {Object} req request
 * @param  {Object} window browser object
 * @param  {Object} page current page object
 * @param  {Object} state state
 * @return {Object} link tags
 */
export const getLinkTags = ({req, window, page, state}) => {
  const {pageType = '', alternates = [], canonicalRoute = ''} = page || getPage(state);
  const baseUrlWithoutProtocol = getBaseURL({req, window, withoutProtocol: true});
  const protocol = typeof window !== 'undefined' ? window.location.protocol : HTTPS_PROTOCOL;
  const baseURL = baseUrlWithoutProtocol ? protocol + baseUrlWithoutProtocol : '';
  const linkTags = [];
  const {results: {firstRecNum = 0, recsPerPage = 16, lastRecNum = 0, totalNumRecs = 0} = {}} = getSearchResults(state);
  const pageNo = Math.ceil(firstRecNum / recsPerPage);

  for (const {hrefLang, href} of alternates) {
    linkTags.push({type: 'alternate', hrefLang, href});
  }

  // add canonical tags only to specific page types
  if (CANONICAL_PAGE_TYPES.includes(pageType)) {
    linkTags.push({type: 'canonical', href: `${baseURL}${canonicalRoute}${pageNo > 1 ? `?page=${pageNo}` : ''}`});
  }

  // add next and previous products link for product listing pages
  if (PRODUCT_LISTING_PAGE_TYPES.includes(pageType) && totalNumRecs > recsPerPage) {
    if (firstRecNum > recsPerPage) {
      linkTags.push({type: 'prev', href: `${baseURL}${canonicalRoute}${pageNo > 1 ? `?page=${pageNo - 1}` : ''}`});
    }
    if (lastRecNum < totalNumRecs) {
      linkTags.push({type: 'next', href: `${baseURL}${canonicalRoute}?page=${pageNo + 1}`});
    }
  }

  return linkTags;
};

/**
 * Builds link tags during server side rendering
 * @param  {Object} req request
 * @param  {Object} state state
 * @return {String} link tags string
 */
export const getLinkTagsForPage = ({req, state}) => {
  const linkTags = getLinkTags({req, state});
  const linkTagsForServer = [];

  for (const {type, href, hrefLang} of linkTags) {
    if (hrefLang) {
      linkTagsForServer.push(`<link rel="${type}" hreflang="${hrefLang}" href="${href}">`);
    } else linkTagsForServer.push(`<link rel="${type}" href="${href}">`);
  }

  return linkTagsForServer.join('');
};
