/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */
import {getLinkTags} from '@oracle-cx-commerce/commerce-utils/links';

let previousPath = null;
let previousTags = null;

/**
 * Adds a new  link tag to the document fragment
 */
const addLinkTag = ({document, type, href, hrefLang, fragment}) => {
  const link = document.createElement('link');
  link.setAttribute('rel', type);
  if (hrefLang) {
    link.setAttribute('hreflang', hrefLang);
  }
  link.setAttribute('href', href);
  fragment.append(link);
};

/**
 * Removes a link tag
 */
const removeLinkTag = ({document, type}) => {
  const element = document.querySelector(`link[rel="${type}"]`);
  element && element.remove();
};

/**
 * Adds link tags to DOM
 */
const addLinkTags = (document, tags) => {
  if (document && tags && tags.length > 0) {
    // Creating a fragment and updating DOM at once
    const fragment = document.createDocumentFragment();
    for (const tag of tags) {
      const {type, href, hrefLang} = tag;
      addLinkTag({document, type, href, hrefLang, fragment});
    }
    document.querySelector('head') && document.querySelector('head').append(fragment);
  }
};

/**
 * Removes previous link tags from DOM
 */
const removeLinkTags = (document, tags) => {
  if (document && tags && tags.length > 0) {
    for (const tag of tags) {
      const {type, href} = tag;
      removeLinkTag({document, type, href});
    }
  }
};

/**
 * Builds link tags when requested from client
 * @param  {Object} window window browser object
 * @param  {Object} page current page object
 * @param  {Object} state state
 */
export const buildCanonicalTagForClient = (window, page, state) => {
  if (window) {
    const {pageId: currentPath = ''} = page;
    const {document} = window;
    const currentTags = getLinkTags({window, page, state: state || {}});
    // not firstTime rendering
    if (previousPath && previousPath !== currentPath) {
      removeLinkTags(document, previousTags);
      // add new link tags
      addLinkTags(document, currentTags);
    }
    previousPath = currentPath;
    previousTags = currentTags;
  }
};
