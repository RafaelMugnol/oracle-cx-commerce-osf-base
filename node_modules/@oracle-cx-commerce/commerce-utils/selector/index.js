/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

// Context Repository

export const getClientRepository = state => state.clientRepository || {};

export const getContext = state => getClientRepository(state).context || {};

export const getGlobalContext = state => getContext(state).global || {};

export const getSessionContext = state => getContext(state).session || {};

export const getRequestContext = state => getContext(state).request || {};

export const getNotifications = state => getClientRepository(state).notifications || {};

export const getEndpointStatus = state => getClientRepository(state).endpointStatus || {};

export const getRememberMe = state => getSessionContext(state).rememberMe || {};

export const isAuthenticated = state => (getSessionContext(state).token ? true : false);

export const isPunchoutUser = state => (getSessionContext(state).additionalPunchoutData ? true : false);

export const getAdditionalPunchoutData = state =>
  getSessionContext(state).additionalPunchoutData ? getSessionContext(state).additionalPunchoutData : '';

/* Current Punch out Order Id stores the id of the order (if any) that was loaded for a punch out user.
 Preserves context between page refreshes*/
export const getCurrentPunchoutOrderId = state =>
  getSessionContext(state).currentPunchoutOrderId ? getSessionContext(state).currentPunchoutOrderId : '';

export const getCurrentSiteId = state => getGlobalContext(state).site;

export const getCurrentProfileId = state =>
  isAuthenticated(state) === true ? getSessionContext(state).profile : 'anonymous';

export const getCurrentOrderId = state => getSessionContext(state).order || '';

export const getCurrentPageId = state => getRequestContext(state).page || '';

export const hasSAMLResponse = state => getSessionContext(state).samlResponse != null;

export const getRelayState = state => getSessionContext(state).relayState || {};

export const getComponentData = state => getSessionContext(state).componentData || {};

// Metadata Repository

export const getMetadataRepository = state => state.metadataRepository || {};

export const getMetadata = state => getMetadataRepository(state).applications || {};

export const getCurrentApplicationId = state => getGlobalContext(state).application || '';

export const isMobile = state => getGlobalContext(state).mobile;

export const getApplicationMetadata = (state, {appId = getCurrentApplicationId(state)} = {}) =>
  getMetadata(state)[appId] || {};

// Config Repository

export const getConfigRepository = state => state.configRepository || {};

export const getEndpoints = state => getConfigRepository(state).endpoints || {};

export const getSettings = state => getConfigRepository(state).settings || {};

export const getRememberMeEnabled = state => getSettings(state).rememberMeEnabled || false;

// Order Repository

export const getOrderRepository = state => state.orderRepository || {};

export const getOrders = state => getOrderRepository(state).orders || {};

export const getOrder = (state, {id}) => getOrders(state)[id] || {};

export const getCurrentOrder = state => getOrders(state)[getCurrentOrderId(state)] || {};

export const getPromotionUpsellMessages = state =>
  getOrderRepository(state).promotionUpsellMessages
    ? getOrderRepository(state).promotionUpsellMessages[getCurrentOrderId(state)] || {}
    : {};
/**
 * @type {import('.').Selector}
 */
export const getGiftWithPurchaseMessages = state => getOrderRepository(state).giftWithPurchaseMessages || {};

// Scheduled Order Repository

export const isCurrentOrderScheduled = state => {
  const {scheduledOrders = {}} = getComponentData(state);
  let scheduleInfo = null;
  if (scheduledOrders[getCurrentOrderId(state)]) {
    scheduleInfo = scheduledOrders[getCurrentOrderId(state)];
  }
  if (scheduleInfo && scheduleInfo.schedule) {
    return true;
  }

  return false;
};

export const getCurrentOrderScheduleInfo = state => {
  const {scheduledOrders = {}} = getComponentData(state);
  if (scheduledOrders[getCurrentOrderId(state)]) {
    return scheduledOrders[getCurrentOrderId(state)];
  }

  return {};
};

export const getScheduledOrders = state => getOrderRepository(state) || {};

export const getScheduledOrder = (state, {id}) =>
  getScheduledOrders(state)['scheduledOrders'] ? getScheduledOrders(state)['scheduledOrders'][id] : {};

export const getScheduledOrderExecutionStatus = (state, {id}) => {
  const displayExecutionStatuses = [];
  if (id) {
    const {executionStatusList} = getScheduledOrder(state, {id});
    const executionStatuses = getScheduledOrders(state)['executionStatus']
      ? getScheduledOrders(state)['executionStatus']
      : {};

    if (executionStatusList && executionStatusList.length > 0) {
      executionStatusList.slice(0, 5).map(executionId => displayExecutionStatuses.push(executionStatuses[executionId]));
    }
  }

  return displayExecutionStatuses;
};

export const getOrderShippingMethods = state => getOrderRepository(state).shippingMethods || {};

export const getCurrentOrderShippingMethods = state => getOrderShippingMethods(state)[getCurrentOrderId(state)] || {};

// Page Repository

export const getPageRepository = state => state.pageRepository || {};

export const getComponents = state => getPageRepository(state).components || {};

export const getActions = state => getPageRepository(state).actions || {};

export const getLinks = state => getPageRepository(state).links || {};

export const getPages = state => getPageRepository(state).pages || {};

export const getPackages = state => getPageRepository(state).packages || {};

export const getPackage = (state, {packageId}) => getPackages(state)[packageId] || {};

export const getRegions = state => getPageRepository(state).regions || {};

export const getWidgets = state => getPageRepository(state).widgets || {};

export const getStacks = state => getPageRepository(state).stacks || {};

export const getResources = state => getPageRepository(state).resources || {};

export const getStylesheetURIs = state => getPageRepository(state).stylesheetURIs || [];

export const getCommonResources = state => getResources(state).common || {};

export const getCommonResourceForKey = (state, {resourceKey}) => getCommonResources(state)[resourceKey];

export const getCommonResourceForKeys = (state, {resourcekeys}) => {
  const commonResources = {};
  if (resourcekeys && resourcekeys.length > 0) {
    resourcekeys.forEach(resourceKey => {
      commonResources[resourceKey] = getCommonResourceForKey(state, {resourceKey}) || resourceKey;
    });

    return {commonResources};
  }

  return {commonResources: getCommonResources(state)};
};

export const getComponentResources = (state, {packageId}) => getPackage(state, {packageId}).resources || {};

export const getComponent = (state, {componentId}) => getComponents(state)[componentId] || {};

export const getLink = (state, {linkId}) => getLinks(state)[linkId] || {};

export const getPage = (state, {pageId = getCurrentPageId(state)} = {}) => getPages(state)[pageId] || {};

export const getRegion = (state, {regionId}) => getRegions(state)[regionId] || {};

export const getWidget = (state, {widgetId}) => getWidgets(state)[widgetId] || {};

export const getStack = (state, {stackId}) => getStacks(state)[stackId] || {};

// Profile Repository

export const getProfileRepository = state => state.profileRepository || {};

export const getProfiles = state => getProfileRepository(state).profiles || {};

export const getProfile = (state, {profileId = getCurrentProfileId(state)} = {}) => getProfiles(state)[profileId] || {};

export const getProfileCustomProperties = state => getProfileRepository(state).customProperties || [];

export const getProfileCustomPropertiesById = (state, id) => getProfileCustomProperties(state)[id] || [];

/**
 * @type {import('.').Selector}
 */
export const profileCustomPropertiesExistById = (state, id) => (getProfileCustomProperties(state)[id] ? true : false);

/**
 * @type {import('.').Selector}
 */
export const getOrderCustomProperties = state => getOrderRepository(state).customProperties || [];

/**
 * @type {import('.').Selector}
 */
export const getOrderCustomPropertiesById = (state, id) => getProfileCustomProperties(state)[id] || [];

/**
 * @type {import('.').Selector}
 */
export const orderCustomPropertiesExistById = (state, id) => (getOrderCustomProperties(state)[id] ? true : false);

/**
 * @type {import('.').Selector}
 */
export const getProfileSiteProperties = state => getProfileRepository(state).siteProperties || {};

export const getProfileSitePropertiesForCurrentUser = (state, {profileId = getCurrentProfileId(state)} = {}) =>
  getProfileSiteProperties(state)[profileId] || {};

export const getPurchaseListRepository = state => state.purchaseListRepository || {};

export const getPurchaseLists = state => getPurchaseListRepository(state).purchaseLists || {};

export const getPurchaseList = (state, {id}) => getPurchaseLists(state)[id] || {};

export const getShareSettings = state => getPurchaseListRepository(state).shareSettings || {};

export const getEmailConfigs = state => getPurchaseListRepository(state).emailConfigs || {};

export const getRoles = state => getProfileRepository(state).roles || {};

export const getRolesForProfile = (state, {profileId = getCurrentProfileId(state)} = {}) => {
  const profile = getProfile(state, profileId);
  const profileRoleIds = profile.roles;
  const profileRoles = [];
  if (profileRoleIds) {
    const roles = getRoles(state);
    Object.keys(roles).forEach(roleId => {
      if (profileRoleIds.includes(roleId)) {
        profileRoles.push(roles[roleId]);
      }
    });
  }

  return profileRoles;
};

export const getInquireBalanceResponses = state => getProfileRepository(state).inquireBalanceResponses || {};

export const getInquireBalanceResponseForCurrentUser = (state, {profileId = getCurrentProfileId(state)} = {}) =>
  getInquireBalanceResponses(state)[profileId] || {};

const getSavedCards = state => getProfileRepository(state).savedCards || {};

/**
 * This selector method returns an object containing saved cards map, profile
 * card ids array and current site specific saved card ids (applicable for checkout) array
 * @type {import('.').Selector}
 */
export const getSavedCardsForProfile = (state, {profileId = getCurrentProfileId(state)} = {}) =>
  getSavedCards(state)[profileId] || {};

/**
 * This selector method returns an array containing saved cards for profile
 * @type {import('.').Selector}
 */
export const getProfileSavedCardsArray = (
  state,
  {savedCardsMap = {}, profileSavedCardIds = []} = getSavedCardsForProfile(state)
) => {
  const profileSavedCards = [];
  profileSavedCardIds.forEach(cardId => {
    profileSavedCards.push(savedCardsMap[cardId]);
  });

  return profileSavedCards;
};

/*
 * @type {import('.').Selector}
 */
export const getCatalogForProfile = (state, {profileId = getCurrentProfileId(state)} = {}) =>
  (getProfiles(state)[profileId] && getProfiles(state)[profileId].catalog) || {};

// Site Repository

export const getSiteRepository = state => state.siteRepository || {};

export const getSites = state => getSiteRepository(state).sites || {};

export const getSite = (state, {siteId = getCurrentSiteId(state)} = {}) => getSites(state)[siteId] || {};

export const getsiteSettings = state => getSite(state).siteSettings || {};

export const isMultiSite = state => Object.keys(getSites(state)).length > 1;

export const getDefaultPriceListGroup = state => getSite(state).defaultPriceListGroup || {};

export const getDefaultCatalog = state => getSite(state).defaultCatalog || {};

export const getCurrentCatalogId = state =>
  (isAuthenticated(state) === true
    ? getCatalogForProfile(state) && getCatalogForProfile(state).repositoryId
    : getDefaultCatalog(state) && getDefaultCatalog(state).repositoryId) || '';

export const getSiteSettings = state => getSite(state).siteSettings || {};

// Catalog Repository

export const getCatalogRepository = state => state.catalogRepository || {};

export const getProducts = state => getCatalogRepository(state).products || {};

export const getProductTypes = state => getCatalogRepository(state).productTypes || {};

/**
 * @type {import('.').Selector}
 */
export const getCatalogCustomProperties = state => getCatalogRepository(state).customProperties || [];

/**
 * @type {import('.').Selector}
 */
export const getCatalogCustomPropertiesById = (state, id) => getProfileCustomProperties(state)[id] || [];

/**
 * @type {import('.').Selector}
 */
export const catalogCustomPropertiesExistById = (state, id) => (getCatalogCustomProperties(state)[id] ? true : false);

/**
 * @type {import('.').Selector}
 */
export const getCategories = state => getCatalogRepository(state).categories || {};

export const getCurrentProductId = state => getPage(state).contextId || null;

export const getProduct = (state, {productId = getCurrentProductId(state)} = {}) => getProducts(state)[productId] || {};

export const getProductType = (state, {productTypeId = ''} = {}) => getProductTypes(state)[productTypeId] || {};

export const getCurrentProduct = state => getProducts(state)[getCurrentProductId(state)] || {};

export const getCategoryIdForCurrentPage = state =>
  getPage(state).categoryId ||
  (getPage(state).pageType === 'collection' || getPage(state).pageType === 'category' ? getPage(state).contextId : {});

export const getCategory = (state, {categoryId = getCategoryIdForCurrentPage(state)} = {}) =>
  getCategories(state)[categoryId] || {};

export const getCategoryForCurrentPage = (state, {categoryId = getCategoryIdForCurrentPage(state)} = {}) =>
  getCategories(state)[categoryId] || {};

export const getInventoryRepository = state => state.inventoryRepository || {};

export const getSkuInventoryItems = state => getInventoryRepository(state).skus || {};

export const getSkuInventory = (state, {skuId}) => getSkuInventoryItems(state)[skuId] || {};

export const getSkus = state => getCatalogRepository(state).skus || {};

export const getSku = (state, {skuId}) => getSkus(state)[skuId] || {};

/**
 * This selector method returns location based inventory of the sku.
 * @type {import('.').Selector}
 */
export const getLocationBasedInventory = (state, {skuId, locationId}) => {
  const {[locationId || 'default']: skuInventory = {}} = getSkuInventory(state, {skuId});

  return skuInventory;
};

// Price Repository

export const getPriceRepository = state => state.priceRepository || {};

export const getProductPrices = state => getPriceRepository(state).products || {};

export const getProductPrice = (state, {productId}) => getProductPrices(state)[productId];

export const getSkuPrices = state => getPriceRepository(state).skus || {};

export const getSkuPrice = (state, {skuId}) => getSkuPrices(state)[skuId] || {};

// Merchant Repository

export const getMerchantRepository = state => state.merchantRepository || {};

export const getMerchantSettings = state => getMerchantRepository(state).settings || {};

export const getShopperSettings = state => getMerchantSettings(state).shopperSettings || {};

export const getPasswordPolicies = state => getShopperSettings(state).passwordPolicies || {};

export const isSecureEmailEnabled = state => getShopperSettings(state).enableProfileRegistrationEmailCheck || false;

// Country and Region Repository

export const getCountryRegionRepository = state => state.countryRegionRepository || {};

export const getShippingCountries = state => getCountryRegionRepository(state).shippingCountries || {};

export const getReturnReasons = state => getMerchantSettings(state).returnReasons || {};

export const getCancelReasons = state => getMerchantSettings(state).cancelReasons || {};

export const getSamlSettings = state => getMerchantSettings(state).samlSettings || {};

export const getCloudConfiguration = state => getMerchantSettings(state).cloudConfiguration || {};

export const getProductionFacebook = state => getMerchantSettings(state).productionFacebook || {};

export const getExternalServiceConfiguration = state => getMerchantSettings(state).externalServiceConfiguration || {};

export const getProductionExperiments = state => getExternalServiceConfiguration(state).productionExperiments || {};

export const getProductionRecommendations = state => getMerchantSettings(state).productionRecommendations || {};

export const getVisitorServiceConfiguration = state => getCloudConfiguration(state).visitorService || {};

export const getInfinitySiteSetting = state => getSite(state).siteSettings || {};

export const getLocationRepository = state => state.locationRepository || {};

export const getTransientData = state => getClientRepository(state).transient || {};

export const getLocationIdsForQuery = state => getTransientData(state).locationIdsForQuery || {};

// Search
export const getSearchRepository = state => state.searchRepository || {};

export const getSearchPages = state => getSearchRepository(state).pages || {};

export const getCurrentSearchPageId = state => getRequestContext(state).search || '';

export const getTypeaheadSearchResults = state => getSearchRepository(state).typeaheadSearchResults || {};

export const getSearchResults = (state, {pageId = getCurrentPageId(state)} = {}) => getSearchPages(state)[pageId] || {};

export const getCurrentSearchResults = (state, {searchPageId = getCurrentSearchPageId(state)} = {}) =>
  getSearchPages(state)[searchPageId] || {};

export const isFilterMenuVisible = state => (getRequestContext(state).filterMenuVisible ? true : false);

export const getClientRequest = state => getClientRepository(state).request || {};

export const getShippingMethods = state => getCatalogRepository(state).shippingMethods || {};

export const getShippingMethod = (state, shippingMethodId) => getShippingMethods(state)[shippingMethodId] || {};

export const getUUID = state => getRequestContext(state).uuid || '';

export const getCurrentProfile = state => getProfiles(state)[getCurrentProfileId(state)] || {};

export const getBillingCountries = state => getCountryRegionRepository(state).billingCountries || {};

// Payment Repository
export const getPaymentRepository = state => state.paymentRepository || {};

export const getCardTypes = state => getPaymentRepository(state).cardTypes || {};

export const getPaymentConfigurations = state => getPaymentRepository(state).paymentConfigurations || {};

export const getSecondaryAddresses = state => getProfileRepository(state).secondaryAddresses || {};

export const getSecondaryAddressesForProfile = (state, profileId = getCurrentProfileId(state)) =>
  getSecondaryAddresses(state)[profileId] || {};

export const getCurrentProfileRoleIds = state => getCurrentProfile(state).roles || [];

// Assets
export const getCurrentAssetId = state => getRequestContext(state).assetId;
export const getAssetRepository = state => state.assetRepository || {};
export const getAssets = state => getAssetRepository(state).assets || {};
export const getAsset = (state, {assetId}) => getAssets(state)[assetId] || {};

// Configurations
export const getConfigurationRepository = state => state.configurationRepository || {};
export const getConfigurations = state => getConfigurationRepository(state).configurations || {};
export const getConfiguration = state => getConfigurations(state).current || {};

export const getCurrentOrganizationId = state =>
  getProfile(state).currentOrganization || getGlobalContext(state).currentOrganization;

export const getOrganizations = state => getProfileRepository(state).organizations || {};

export const getAddresses = state => getProfileRepository(state).contactInfos || {};

export const getCSRRepository = state => state.csrRepository || {};

export const getReturnRequests = state => getCSRRepository(state).returns || {};

export const getReturnRequest = (state, returnRequestId) => getReturnRequests(state)[returnRequestId] || {};

export const getCurrentReturnId = state => getRequestContext(state).currentReturnId;

export const getOrderReturnRequestIds = state => getRequestContext(state).returnRequestIds || [];

export const getContactRequests = state => getProfileRepository(state).contactRequests || {};

/**
 * @type {import('.').Selector}
 */
export const getContactRequest = (state, {id}) => getContactRequests(state)[id] || {};

export const getContactInfos = state => getProfileRepository(state).contactInfos || {};

export const getDefaultShippingAddressId = state => getProfile(state).contactShippingAddress;

export const getDefaultBillingAddressId = state => getProfile(state).contactBillingAddress;

export const getProfileShippingAddresses = state => getProfile(state).shippingAddresses || [];

export const getOrganization = (state, {id}) => getOrganizations(state)[id] || {};

export const getCurrentOrgId = state => getProfile(state).currentOrganization;

export const isCurrentUserB2B = state => {
  if (isAuthenticated(state) && getCurrentProfileId(state) !== 'anonymous') {
    const profile = getProfile(state);
    if (profile.currentOrganization) {
      return true;
    }

    return false;
  }

  return false;
};

export const getCartEndpointStatus = state =>
  getEndpointStatus(state).getCart ? getEndpointStatus(state).getCart.inProgress : 1;

// Recommendations Repository
export const getRecommendationsRepository = state => state.recommendationsRepository || {};
export const getRecommendationsSet = (state, {widgetId} = {}) =>
  (getRecommendationsRepository(state).slots || {})[widgetId] || {};
export const getRecommendations = (state, {widgetId} = {}) =>
  (getRecommendationsSet(state, {widgetId}).recs || []).map(r => r.repositoryId).filter(r => r !== undefined);

export const getVisitorId = state => getGlobalContext(state).visitorId;
export const getVisitId = state => getGlobalContext(state).visitId;

export const getEndpointOrigins = state => {
  return getConfigRepository(state).endpointOrigins || {};
};

export const getEndpointOrigin = (state, apiName) => {
  return getEndpointOrigins(state)[apiName] || {};
};

/**
 * Determines if a publish has occurred since the application session was started. This
 * is the case when the `currentLastPublishedTime` > 'initialLastPublishedTime`.
 *
 * @param {any} state The application state
 * @returns {Boolean}
 */
export const isPublishDetected = state => {
  const {initialLastPublishedTime} = getGlobalContext(state);
  const {currentLastPublishedTime} = getRequestContext(state);

  if (initialLastPublishedTime) {
    return currentLastPublishedTime > initialLastPublishedTime;
  }

  return false;
};

/**
 * It returns whether site related information is to be shown
 * for cart items. Returns true when there is any item in the cart
 * from a site other than the current site, otherwise returns false.
 *
 * @param {*} state
 * @param {*} commerceItems
 * @returns {Boolean}
 */
export const hasCartItemsFromMultipleSites = (state, {commerceItems}) => {
  const {id: currentSiteId, cartSharingId} = getSite(state);

  if (!cartSharingId) {
    return false;
  }

  for (const key in commerceItems) {
    if (commerceItems[key].siteId !== currentSiteId) {
      return true;
    }
  }

  return false;
};
export const getCurrencyCode = state => getGlobalContext(state).currencyCode || '';

export const getCurrencySymbol = state => getGlobalContext(state).symbol || '';

const getCurrentPriceListGroupId = state => {
  if (isCurrentUserB2B(state)) {
    return (getCurrentProfile(state).priceListGroup && getCurrentProfile(state).priceListGroup.id) || '';
  }

  return getGlobalContext(state).priceListGroup;
};

/**
 * Checks for the presence of PLG in site data and returns it, if found.
 * For B2B user where PLG associated with the account contract may not be present in site repository,
 * it also checks for PLG in profile repository.
 */
export const getPriceListGroup = (state, id) => {
  let plg = {};
  if (getSite(state).priceListGroupList && getSite(state).priceListGroupList.length) {
    plg = getSite(state).priceListGroupList.find(priceListGroup => priceListGroup.id === id) || {};
  }

  if (Object.keys(plg).length === 0 && isCurrentUserB2B(state)) {
    const profilePriceList = getCurrentProfile(state).priceListGroup || {};

    return profilePriceList.id === id ? profilePriceList : {};
  }

  return plg;
};

export const getCurrentPriceListGroup = state => getPriceListGroup(state, getCurrentPriceListGroupId(state)) || {};
// Content Repository

export const getContentSetting = state => getSiteSettings(state).ContentSettings || {};

export const getContentSettings = state => getContentSetting(state).content || {};

export const getContentSiteUrl = state => getContentSettings(state).url || {};

export const getContentWidgetItemIds = (state, props) => {
  const page = getPage(state);
  const {widgetId, id} = props;

  let widgetName;
  if (widgetId !== undefined) {
    widgetName = `contentWidget-${widgetId}`;
  } else {
    widgetName = `contentWidget-${id}`;
  }

  return page[widgetName] || {};
};

export const getContentRepository = state => state.contentRepository || {};

export const getContentItemsList = state => getContentRepository(state).contentItems || {};

export const getContentItems = (state, props) => {
  const contentItemIds = getContentWidgetItemIds(state, props);

  if (contentItemIds && Object.keys(contentItemIds).length !== 0) {
    const contentItemList = getContentItemsList(state);
    const contentItemKeys = Object.keys(contentItemIds);
    const items = {};
    contentItemKeys.forEach(key => {
      items[key] = contentItemList[key];
    });
    // TODO don't return new object in selector

    return {contentItems: items};
  }

  return {};
};
