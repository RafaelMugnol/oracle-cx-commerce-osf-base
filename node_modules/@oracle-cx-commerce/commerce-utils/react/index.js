/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import {getWidgets} from '@oracle-cx-commerce/commerce-utils/selector';

const preloaded = Symbol('preloaded');

export const preloadComponents = async (components, state) => {
  if (components[preloaded] === true) {
    return;
  }

  if ('Root' in components) {
    // If present always preload Root.
    /*eslint-disable new-cap*/
    components.Root = components.Root();
    /*eslint-enable new-cap*/
  }

  // Determine other components to preload
  const componentIds = state
    ? Object.values(getWidgets(state)).map(({componentId}) => componentId)
    : Object.keys(components);

  for (const key of componentIds) {
    const load = components[key];

    console.assert(load, `Missing component "${key}"--preload failed`);

    if (typeof load === 'function') {
      components[key] = load();
    }
  }

  for (const [key, value] of Object.entries(components)) {
    if (value instanceof Promise) {
      components[key] = (await value).default;
    } else {
      components[key] = React.lazy(value);
    }
  }

  components[preloaded] = true;
};
