/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import fs from 'fs-extra';
import manifest from '../manifest';

jest.mock('fs-extra');

afterEach(() => {
  fs.outputJsonSync.mockReset();
});

test('manifest is a function', () => {
  expect(typeof manifest).toBe('function');
});

test('manifest().name === "manifest"', () => {
  expect(manifest().name).toBe('manifest');
});

test('manifest().generateBundle() throws an error', () => {
  expect(() => manifest().generateBundle()).toThrow();
});

test('manifest().generateBundle({}, {}) throws an error', () => {
  expect(() => manifest().generateBundle({}, {})).toThrow();
});

test('manifest({}).generateBundle({}, {}) throws an error', () => {
  expect(() => manifest({}).generateBundle({}, {})).toThrow();
});

test('manifest({publicPath: ""}).generateBundle({}, {}) generates a correct manifest.json', () => {
  manifest({publicPath: ''}).generateBundle({}, {});

  expect(fs.outputJsonSync).toHaveBeenCalledWith(
    'manifest.json',
    {builder: 'rollup', imports: {}, preloads: {}},
    {spaces: 2}
  );
});

test('manifest({publicPath: ""}).generateBundle({}, <some-bundle>) generates a correct manifest.json', () => {
  manifest({publicPath: ''}).generateBundle(
    {},
    {
      builder: 'rollup',
      fileA: {name: 'a', imports: ['fileB'], isEntry: true},
      fileB: {name: 'b', imports: ['fileB'], isDynamicEntry: true},
      fileC: {name: 'c'}
    }
  );

  expect(fs.outputJsonSync).toHaveBeenCalledWith(
    'manifest.json',
    {builder: 'rollup', imports: {a: 'fileA'}, preloads: {fileA: ['fileB'], fileB: ['fileB']}},
    {spaces: 2}
  );
});
