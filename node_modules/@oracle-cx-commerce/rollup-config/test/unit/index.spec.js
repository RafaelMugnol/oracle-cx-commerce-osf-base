/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

/**
 * @jest-environment node
 * Unit tests for the @oracle-cx-commerce/rollup-config package.
 */

import {createBuildConfigs} from '@oracle-cx-commerce/rollup-config';
import path from 'path';

/**
 * Replace backslashes with forward slashes in file paths such as those found on Windows.
 */
const normalizeSeparators = filePath => filePath && filePath.replace(new RegExp('\\\\', 'g'), '/');

/** The parent directory of all of the sample apps used in these tests. */
const FIXTURES_PATH = normalizeSeparators(`${__dirname}/fixtures`);

/** Directory containing a sample app used by most of the tests. */
const SAMPLE_APP_PATH = `${FIXTURES_PATH}/sample-app`;

/** Options to be passed to rollup-config functions for the sample-app. */
const SAMPLE_APP_OPTIONS = {
  __dirname: SAMPLE_APP_PATH,
  legacy: true
};

describe('rollup-config API functions', () => {
  /** Expected number of configurations to be defined for the sample-app in development mode with no options. */
  const NUM_SAMPLE_APP_DEFAULT_DEV_CONFIGS = 2;

  /** Expected number of configurations to be defined for the sample-app in development mode with given options. */
  const NUM_SAMPLE_APP_DEV_CONFIGS = 3;

  /**
   * Indicate if any production-mode Rollup configurations exist in the given return
   * value from getBuildConfigInfo.
   */
  const hasProductionConfigs = (configs = []) => {
    for (const config of configs) {
      if (config.output[0].dir.includes('/min')) {
        return true;
      }
    }

    return false;
  };

  /**
   * Convert an absolute path into a path relative to the current directory.  We need this
   * for tests that use the OCC_APP_DIR env var, which is assumed to be in that format.
   */
  const relativePath = toPath => normalizeSeparators(path.relative(process.cwd(), toPath));

  test('createBuildConfigs with no options.__dirname should throw error', () => {
    expect(() => createBuildConfigs()).toThrow(
      /'__dirname' must be specified in options or using OCC_APP_DIR environment variable/
    );
  });

  test('createBuildConfigs with no options.__dirname should use OCC_APP_DIR from environment', () => {
    process.env.OCC_APP_DIR = relativePath(SAMPLE_APP_PATH);
    const configs = createBuildConfigs();
    expect(configs.length).toBe(NUM_SAMPLE_APP_DEFAULT_DEV_CONFIGS);
    delete process.env.OCC_APP_DIR;
  });

  test('createBuildConfigs with non-existent options.__dirname should throw error', () => {
    expect(() => createBuildConfigs({__dirname: `${__dirname}/foobar`})).toThrow(/__dirname .* does not exist/);
  });

  test('createBuildConfigs with non-directory options.__dirname should throw error', () => {
    expect(() => createBuildConfigs({__dirname: `${__dirname}/index.spec.js`})).toThrow(
      /__dirname .* is not a directory/
    );
  });

  test('createBuildConfigs returns the correct number of configs', () => {
    const configs = createBuildConfigs(SAMPLE_APP_OPTIONS);
    expect(configs.length).toBe(NUM_SAMPLE_APP_DEV_CONFIGS);
  });

  test('createBuildConfigs with OCC_ADD_LEGACY_ROLLUP_CONF env var returns the correct number of configs', () => {
    process.env.OCC_ADD_LEGACY_ROLLUP_CONF = 'true';
    const configs = createBuildConfigs({__dirname: SAMPLE_APP_PATH});
    expect(configs.length).toBe(NUM_SAMPLE_APP_DEV_CONFIGS);
    delete process.env.OCC_ADD_LEGACY_ROLLUP_CONF;
  });

  test('No production configs if options.production is unspecified', () => {
    const configs = createBuildConfigs(SAMPLE_APP_OPTIONS);
    expect(hasProductionConfigs(configs)).toBe(false);
  });

  test('Production configs exist if options.production is true', () => {
    const configs = createBuildConfigs({production: true, ...SAMPLE_APP_OPTIONS});
    expect(hasProductionConfigs(configs)).toBe(true);
  });

  test('process.env.BUILD is used if options.production is unspecified', () => {
    process.env.BUILD = 'production';
    const configs = createBuildConfigs(SAMPLE_APP_OPTIONS);
    delete process.env.BUILD;
    expect(hasProductionConfigs(configs)).toBe(true);
  });

  test('No production configs if options.production is false even if process.env.BUILD is used', () => {
    process.env.BUILD = 'production';
    const configs = createBuildConfigs({production: false, ...SAMPLE_APP_OPTIONS});
    delete process.env.BUILD;
    expect(hasProductionConfigs(configs)).toBe(false);
  });
});
