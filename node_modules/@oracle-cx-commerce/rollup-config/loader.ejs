self.OCC_AMD_BASE_URI = self.OCC_AMD_BASE_URI || ''
if (!self.define) {
  var singleRequire = function(name) {
    if (name !== 'require') {
      name = name + '.js';
    }
    if (!registry[name]) {
      <% if (useEval) { %>
      return fetch(name).then(function(resp) { return resp.text() })
      .then(function(code) {
        eval(code);
      <% } else { %>
      return new Promise(function(resolve) {
        if ("document" in self) {
          var script = document.createElement("script");
          script.src = self.OCC_AMD_BASE_URI + name.slice(1);
          // Ya never know
          script.defer = true;
          document.head.appendChild(script);
          script.onload = resolve;
        } else {
          importScripts(name);
          resolve();
        }
      })
      .then(function() {
      <% } %>
        if (!registry[name]) {
          throw new Error("Module " + name + " didnâ€™t register its module");
        }
        return registry[name];
      });
    } else {
      return Promise.resolve(registry[name]);
    }
  };

  var require = function(names, resolve) {
    Promise.all(names.map(singleRequire))
    .then(function(modules) {
      resolve(modules.length === 1 ? modules[0] : modules);
    });
  };

  var registry = {
    require: Promise.resolve(require)
  };

  self.define = function(moduleName, depsNames, factory) {
    if (registry[moduleName]) {
      // Module is already loading or loaded.
      return;
    }
    registry[moduleName] = new Promise(function(resolve) {
      var exports = {};
      var module = {
        uri: location.origin + self.OCC_AMD_BASE_URI + name.slice(1) + moduleName.slice(1)
      };
      Promise.all(
        depsNames.map(function(depName) {
          if (depName === "exports") {
            return exports;
          }
          if (depName === "module") {
            return module;
          }
          return singleRequire(depName);
        })
      ).then(function(deps) {
        var facValue = factory.apply(null, deps);
        if(!exports.default) {
          exports.default = facValue;
        }
        resolve(exports);
      });
    });
  };
}
