/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {
  downloadDeploymentById,
  downloadCurrentAppDeployment,
  downloadApplicationAssets
} = require('@oracle-cx-commerce/tools-util/endpoints');
const fs = require('fs-extra');
const path = require('path');

const writeDownload = async (fileDestination, downloadResponse) => {
  // outputFileSync is a convenient way of creating the full path to the file
  // if it doesn't exists.
  fs.outputFileSync(fileDestination, 'initialized', err => {
    throw new Error(`Error initializing file to ${fileDestination}. ${err}`);
  });

  return new Promise((resolve, reject) => {
    if (downloadResponse.body) {
      const writer = fs.createWriteStream(fileDestination);
      downloadResponse.body.pipe(writer);
      writer.on('close', () => {
        resolve();
      });
      writer.on('error', error => {
        reject(error);
      });
    }
  });
};

/**
 * Downloads an deployment. Download is available in two flavors
 * 1. Download an application's current deployment (preview or live).
 * 2. Download a deployment by id
 *
 * @param {options} Params options used to controller download behavior.
 * @returns {Object} Object containing the appName, deployment id and location for the download.
 */
const downloadDeployment = async options => {
  let {appName, deployId} = options;
  const {preview, appServerAdmin, appKey, downloadLocation} = options;

  let downloadResponse;
  if (deployId) {
    downloadResponse = await downloadDeploymentById({deployId, appServerAdmin, appKey});
    if (downloadResponse.headers) {
      appName = downloadResponse.headers['x-occ-application-id'];
    }
  } else {
    downloadResponse = await downloadCurrentAppDeployment({appName, appServerAdmin, appKey, preview: preview || false});
    if (downloadResponse.headers) {
      deployId = downloadResponse.headers['x-occ-deployment-id'];
    }
  }

  const templatePath = path.resolve(downloadLocation, `${appName}_${deployId}.zip`);
  await writeDownload(templatePath, downloadResponse);

  return {
    appName,
    deployId,
    templatePath
  };
};

const downloadAssets = async options => {
  const {downloadLocation} = options;
  const downloadResponse = await downloadApplicationAssets(options);

  await writeDownload(downloadLocation, downloadResponse);

  return downloadResponse;
};

module.exports = {
  downloadDeployment,
  downloadAssets
};
