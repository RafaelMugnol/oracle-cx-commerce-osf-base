/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const fs = require('fs-extra');
const path = require('path');
const {getApplicationDir} = require('@oracle-cx-commerce/tools-util');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {validateConfiguration} = require('./cli-helper-methods');
const {getServerConfig, loadConfig} = require('./config/config-loader');
const defaults = require('./config/defaults');

/* this functions removes properties from the config object
 * that we don't want included into the generated occ config file
 */
const removeExtraneousValueFromConfig = config => {
  //remove some defaults that shouldn't be in the config file
  delete config.appServer;
  delete config.appServerAdmin;
  delete config.appKey;
  delete config.version;
  delete config.production;
  delete config.appDir;
  delete config._occActionOptions;
  delete config._occArgOptions;
  delete config._occSelectedOptions;
  delete config._occActionName;
  delete config.localDevApp;
  delete config.originAppName;
};

const createWorkspaceConfig = (workspaceRoot, values) => {
  // create a config object that contains workspace
  // config and the passed in values.

  // this object is used to generate
  // the .occ/config.js file.
  const options = typeof values === 'object' ? values : {};
  const config = {
    ...defaults,
    ...loadConfig(workspaceRoot),
    ...options
  };
  validateConfiguration(config);

  Object.assign(config, getServerConfig(config, 'development'));

  // These three values can only be set to development values that existed
  // prior in the config or to the values passed in through the command line.
  // add or update the 'development' configuration
  if (!config.serverConfig) {
    config.serverConfig = {};
  }
  config.serverConfig.development = {
    ...{appServerAdmin: config.appServerAdmin, appServer: config.appServer, appKey: config.appKey},
    ...(config.serverConfig.development ? getServerConfig(config, 'development') : {}),
    ...(options.appServerAdmin ? {appServerAdmin: options.appServerAdmin} : {appServerAdmin: config.appServerAdmin}),
    ...(options.appServer ? {appServer: options.appServer} : {appServer: config.appServer}),
    ...(options.appKey ? {appKey: options.appKey} : {appKey: config.appKey})
  };

  if (!config.serverConfig.test) {
    config.serverConfig.test = {
      appServerAdmin: 'http://testadminserver.example.com:9080',
      appServer: 'http://testserver.example.com:9080'
    };
  }
  if (!config.serverConfig.production) {
    config.serverConfig.production = {
      appServerAdmin: 'http://prodadminserver.example.com:9080',
      appServer: 'http://prodserver.example.com:9080'
    };
  }

  //remove some defaults that shouldn't be in the initial config file
  removeExtraneousValueFromConfig(config);

  const template = `module.exports = ${JSON.stringify(config, null, 2)};`;

  const occConfigPath = path.resolve(workspaceRoot, '.occ', 'config.js');
  fs.outputFileSync(occConfigPath, template, err => {
    throw new Error(err);
  });
  console.log(___`Created workspace configuration in ${occConfigPath}`);
};

/*
 * creates an application config file in .occ/config.j
 */
const createApplicationConfig = (appName, values) => {
  // create a config object that contains workspace
  // config and the passed in values.

  // this object is used to generate
  // the .occ/config.js file.
  const options = typeof values === 'object' ? values : {};
  const config = {
    ...loadConfig(path.resolve(getApplicationDir(appName))),
    ...options
  };

  //remove some values that come in from options that we don't want in the
  //config file.
  removeExtraneousValueFromConfig(config);

  // this prop can be a bool(false) when using the --no-localDevAppName option. If
  // it has a boolean value it means to remove it from configuration
  if (config.localDevAppName !== undefined && typeof options.localDevAppName === 'boolean') {
    delete config.localDevAppName;
  }
  const template = `module.exports = ${JSON.stringify(config, null, 2)};`;

  const appConfigPath = path.resolve('packages', 'apps', appName, '.occ', 'config.js');
  fs.outputFileSync(appConfigPath, template, err => {
    throw new Error(err);
  });
  console.log(___`Updated application configuration in ${appConfigPath}`);
};
module.exports = {createWorkspaceConfig, createApplicationConfig};
