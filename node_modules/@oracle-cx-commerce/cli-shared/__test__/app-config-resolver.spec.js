/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

/**
 * @jest-environment node
 */

const {loadAppConfig} = require('../config');
const {resolveAppConfigs, resolveAppContext, mergeAppProps} = require('../config/config-loader');
const defaults = require('../config/defaults');

const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();

const removeProperty =
  prop =>
  ({[prop]: _, ...rest}) =>
    rest;

const SAMPLE_APP_CONFIG = {
  topLevelProperty: 'default-value',
  topLevelArrayProperty: [1, 2, 3],
  topLevelObjectProperty: {
    key1: 'default-value',
    key2: false,
    nestedTopLevelObject: {nestedKey1: 1, nestedKey2: 2}
  },
  configRepositoryState: {
    clientStatePropertyFoo: false,
    clientStatePropertyBar: false
  },
  endpointOrigins: {
    'api-example-1': {
      origin: 'https://development.api-url.com',
      catalogOrigin: 'https://default-catalog-url.com',
      __secret: '12345'
    }
  },
  liveConfigurations: {
    topLevelProperty: 'live-override-default-value',
    topLevelObjectProperty: {key1: 'live-override-value', key2: true},
    additionalLiveProperty: true,
    endpointOrigins: {
      'api-example-1': {
        origin: 'https://live.api-url.com',
        catalogOrigin: 'https://default-catalog-url.com',
        __secret: '12345'
      }
    }
  }
};

const SAMPLE_DEVELOPMENT_APP_CONTEXT = {
  development: {
    // add properties to top level properties of resolved appContext
    topLevelDevelopmentProperty: 'top-level-dev-property',
    topLevelDevelopmentObject: {
      'nested-dev-propert1': 1,
      'nested-dev-propert2': 2
    },
    // add properties to topLevelObjectProperty
    topLevelObjectProperty: {
      additionalObjectPropertyFromDevelopmentAppContext: 'new-dev-value'
    },
    // add properties to configRepositoryState
    configRepositoryState: {
      clientStateDevelopmentProperty: 'development-property-to-go-to-client-state'
    },
    // add properties to endpointOrigins
    endpointOrigins: {
      'development-api-example': {
        catalogOrigin: 'https://development.api-example.com',
        __secret: 'development-context-api-secret'
      }
    },
    liveConfigurations: {
      // override topLevelProperty of appConfig's liveConfigurations
      topLevelProperty: 'live-development-override-default-value',
      topLevelObjectProperty: {key1: 'live-development-override-value', key2: false},
      // add a property to appConfig's liveConfigurations
      additionalDevelopmentLiveProperty: true,
      // add an object to endpointOrigins object of appConfig's liveConfigurations
      endpointOrigins: {
        'development-api-example': {
          catalogOrigin: 'https://live-development.api-example.com',
          __secret: 'live-development-context-api-secret'
        }
      }
    }
  }
};

const SAMPLE_TEST_APP_CONTEXT = {
  test: {
    // add properties to top level properties of resolved appContext
    topLevelTestProperty: 'top-level-test-property',
    topLevelTestObject: {
      'nested-dev-propert1': 1,
      'nested-dev-propert2': 2
    },
    // add properties to topLevelObjectProperty
    topLevelObjectProperty: {
      additionalObjectPropertyFromDevelopmentAppContext: 'new-test-value'
    },
    // add properties to configRepositoryState
    configRepositoryState: {
      clientStateTestProperty: 'test-property-to-go-to-client-state'
    },
    // override properties to endpointOrigins
    endpointOrigins: {
      // nested objects will get overwritten, not merged, 'origin' property is lost.
      'api-example-1': {
        catalogOrigin: 'https://test.api-example.com',
        __secret: 'test-context-api-secret'
      }
    }
  }
};

describe('loadAppConfig:all-tests', () => {
  beforeEach(() => {
    consoleWarnSpy.mockClear();
    consoleLogSpy.mockClear();
  });

  test(`loadAppConfig:no-app-name - read the default configs at @oracle-cx-commerce/osf-config/app-config`, () => {
    const config = loadAppConfig();
    const defaultAppConfigPath = require('@oracle-cx-commerce/osf-config/app-config');
    expect(config).toEqual(defaultAppConfigPath);
  });

  describe('resolve-app-config:all -  unit tests to test resolveAppConfig function', () => {
    describe('resolve-appContext-with-app-context-and-selectedAppContext:all -  test resolveAppContext with and without appContext', () => {
      test('resolve-appContext-with-app-context-and-selectedAppContext:no-appContext-and-default-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        // defaults.appContext = 'development', errors are not logged
        resolveAppContext(sampleAppConfig, defaults.appContext);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(0);
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:no-appContext-and-non-default-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        // selectedAppContext set to non-default 'test', errors are logged
        resolveAppContext(sampleAppConfig, specifiedSelectedAppContext);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nNo appContextConfigurations object found in app-config.`
        );
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:empty-appContext-and-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: {}});
        // defaults.appContext = 'development', errors are not logged
        resolveAppContext(sampleAppConfig, defaults.appContext);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(0);
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:empty-appContext-and-non-development-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: {}});
        // selectedAppContext set to non-default 'test', errors are logged
        resolveAppContext(sampleAppConfig, specifiedSelectedAppContext);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nCannot resolve selected appContext "${specifiedSelectedAppContext}" from the app config.`
        );
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:invalid-appContext-and-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: 'non-valid-appContext'});
        // defaults.appContext = 'development', errors are not logged
        resolveAppContext(sampleAppConfig, defaults.appContext);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load appContextConfigurations from app config, appContextConfigurations must be an object (appContextConfigurations is of type: string).`
        );
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:invalid-appContext-and-non-development-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: 'non-valid-appContext'});
        // selectedAppContext set to non-default 'test', errors are logged
        resolveAppContext(sampleAppConfig, specifiedSelectedAppContext);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load appContextConfigurations from app config, appContextConfigurations must be an object (appContextConfigurations is of type: ${typeof sampleAppConfig.appContextConfigurations}).`
        );
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:valid-appContext-and-invalid-development-context-using-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {
          appContextConfigurations: {development: 'non-valid-development-context'}
        });
        // defaults.appContext = 'development', errors are logged
        resolveAppContext(sampleAppConfig, defaults.appContext);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load selected appContext "${defaults.appContext}" from app config, "${defaults.appContext}" must be an object (selected appContext "${defaults.appContext}" is of type: string).`
        );
      });

      test('resolve-appContext-with-app-context-and-selectedAppContext:valid-appContext-and-invalid-test-context-using-test-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {
          appContextConfigurations: {test: 'non-valid-development-context'}
        });
        resolveAppContext(sampleAppConfig, specifiedSelectedAppContext);

        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load selected appContext "${specifiedSelectedAppContext}" from app config, "${specifiedSelectedAppContext}" must be an object (selected appContext "${specifiedSelectedAppContext}" is of type: string).`
        );
      });
    });

    describe('resolve-appConfig-no-app-context-and-no-selectedAppContext-with-live-flag:all -  test resolveAppConfig of `live` objects without any appContext present in appConfig or selectedAppContext', () => {
      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:no-live-object-without-live-flag', async () => {
        // without --live flag
        let sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        sampleAppConfig = removeProperty('liveConfigurations')(sampleAppConfig);
        resolveAppConfigs(sampleAppConfig, defaults.appContext);

        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toBeCalledTimes(0);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
      });

      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:no-live-object-with-live-flag', async () => {
        // without --live flag
        let sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        sampleAppConfig = removeProperty('liveConfigurations')(sampleAppConfig);
        resolveAppConfigs(sampleAppConfig, defaults.appContext, true);

        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toBeCalledTimes(0);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
      });

      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:valid-live-object-without-live-flag', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        resolveAppConfigs(sampleAppConfig, defaults.appContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
      });

      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:valid-live-object-with-live-flag', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        resolveAppConfigs(sampleAppConfig, defaults.appContext, true);

        const {liveConfigurations, ...expectedResolvedAppConfig} = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        mergeAppProps(expectedResolvedAppConfig, liveConfigurations);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);

        expect(console.log).toBeCalledTimes(1); // 1 log message regarding successfully loading live object
        expect(console.warn).toBeCalledTimes(0); // no errors in appConfig thus no warn messages

        expect(console.log).toHaveBeenLastCalledWith(`Successfully loaded "liveConfigurations" onto app-config.`);
      });

      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:invalid-live-object-without-live-flag', async () => {
        // without --live flag
        let sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        sampleAppConfig = {...sampleAppConfig, liveConfigurations: 'invalid-live-object'}; // override sample live object with invalid live object, a string
        resolveAppConfigs(sampleAppConfig, defaults.appContext);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toBeCalledTimes(0);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
      });

      test('resolve-appConfig-no-app-context-and-selectedAppContext-with-live-flag:invalid-live-object-with-live-flag', async () => {
        // with --live flag
        let sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        sampleAppConfig = {...sampleAppConfig, liveConfigurations: 'invalid-live-object'}; // override sample live object with invalid live object, a string
        resolveAppConfigs(sampleAppConfig, defaults.appContext, true);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Unable to load live configurations from app config, "liveConfigurations" must be an object. (live configurations of app-config is of type: string).`
        );

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
      });
    });
    describe('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:all -  test resolveAppConfig with and without appContext not including --live flag', () => {
      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:no-appContext-and-default-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'development';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        // selectedAppContext set to 'development', no errors are logged.
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:no-appContext-and-non-default-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        // selectedAppContext set to non-default 'development', errors are logged.
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1); // expected error logged as warn for missing appContext object
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nNo appContextConfigurations object found in app-config.`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:empty-appContext-and-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: {}});
        // selectedAppContext set to 'development', no errors are logged.
        resolveAppConfigs(sampleAppConfig, 'development');

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {appContextConfigurations: {}});
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(0);
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:empty-appContext-and-non-development-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: {}});
        // selectedAppContext set to non-default 'development', errors are logged.
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {appContextConfigurations: {}});
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1); // expected error logged as warn for missing appConfig.appContext.test object
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nCannot resolve selected appContext "test" from the app config.`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:invalid-appContext-and-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: 'non-valid-appContext'});
        // selectedAppContext set to 'development', no errors are logged.
        resolveAppConfigs(sampleAppConfig, 'development');

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {appContextConfigurations: 'non-valid-appContext'}); // set expected resolved app config similar to sample app config

        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load appContextConfigurations from app config, appContextConfigurations must be an object (appContextConfigurations is of type: string).`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:invalid-appContext-and-non-development-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {appContextConfigurations: 'non-valid-appContext'});
        // selectedAppContext set to non-default 'development', errors are logged.
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {appContextConfigurations: 'non-valid-appContext'}); // set expected resolved app config similar to sample app config
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1); // expected error logged as warn for missing appConfig.appContext.test object
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load appContextConfigurations from app config, appContextConfigurations must be an object (appContextConfigurations is of type: string).`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-invalid-development-context-using-development-selectedAppContext', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {
          appContextConfigurations: {development: 'non-valid-development-context'}
        });
        // selectedAppContext set to 'development', no errors are logged.
        resolveAppConfigs(sampleAppConfig, defaults.appContext);
        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {
          appContextConfigurations: {development: 'non-valid-development-context'}
        }); // set expected resolved app config similar to sample app config
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1);
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load selected appContext "${defaults.appContext}" from app config, "${defaults.appContext}" must be an object (selected appContext "${defaults.appContext}" is of type: string).`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-invalid-test-context-using-test-selectedAppContext', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(sampleAppConfig, {
          appContextConfigurations: {test: 'non-valid-test-context'}
        });
        // selectedAppContext set to non-default 'development', errors are logged.
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        Object.assign(expectedResolvedAppConfig, {
          appContextConfigurations: {test: 'non-valid-test-context'}
        }); // set expected resolved app config similar to sample app config
        expectedResolvedAppConfig = removeProperty('appContextConfigurations')(expectedResolvedAppConfig);
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(1); // expected error logged as warn for missing appConfig.appContext.test object
        expect(console.log).toBeCalledTimes(0);
        expect(console.warn).toHaveBeenLastCalledWith(
          `Error occurred when trying to resolve appContext:\nUnable to load selected appContext "${specifiedSelectedAppContext}" from app config, "${specifiedSelectedAppContext}" must be an object (selected appContext "${specifiedSelectedAppContext}" is of type: string).`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-development-selectedAppContext-no-value-override', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const sampleAppContext = {
          appContextConfigurations: {
            ...JSON.parse(JSON.stringify(SAMPLE_DEVELOPMENT_APP_CONTEXT)), //add sample appContext 'development'
            ...JSON.parse(JSON.stringify(SAMPLE_TEST_APP_CONTEXT)) //add sample appContext 'test' to make sure the correct appContext is selected
          }
        };
        Object.assign(sampleAppConfig, sampleAppContext);
        // defaults.appContext = 'development'
        resolveAppConfigs(sampleAppConfig, defaults.appContext);
        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        let expectedResolvedAppContext = sampleAppContext.appContextConfigurations[defaults.appContext];
        expectedResolvedAppContext = removeProperty('liveConfigurations')(expectedResolvedAppContext);

        mergeAppProps(expectedResolvedAppConfig, expectedResolvedAppContext);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(1);
        expect(console.log).toHaveBeenLastCalledWith(
          `Successfully loaded appContextConfigurations "${defaults.appContext}" configurations onto app-config.`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-non-development-selectedAppContext-no-value-override', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const sampleAppContext = {
          appContextConfigurations: {
            ...JSON.parse(JSON.stringify(SAMPLE_DEVELOPMENT_APP_CONTEXT)), //add sample appContext 'development'
            ...JSON.parse(JSON.stringify(SAMPLE_TEST_APP_CONTEXT)) //add sample appContext 'test' to make sure the correct appContext is selected
          }
        };
        Object.assign(sampleAppConfig, sampleAppContext);
        // specifiedSelectedAppContext = 'test'
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        let expectedResolvedAppContext = sampleAppContext.appContextConfigurations[specifiedSelectedAppContext];
        expectedResolvedAppContext = removeProperty('liveConfigurations')(expectedResolvedAppContext);

        mergeAppProps(expectedResolvedAppConfig, expectedResolvedAppContext);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(1);
        expect(console.log).toHaveBeenLastCalledWith(
          `Successfully loaded appContextConfigurations "${specifiedSelectedAppContext}" configurations onto app-config.`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-development-selectedAppContext-with-value-override', async () => {
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const sampleAppContext = {
          appContextConfigurations: {
            ...JSON.parse(JSON.stringify(SAMPLE_DEVELOPMENT_APP_CONTEXT)), //add sample appContext 'development'
            ...JSON.parse(JSON.stringify(SAMPLE_TEST_APP_CONTEXT)) //add sample appContext 'test' to make sure the correct appContext is selected
          }
        };
        // Create values to override properties of SAMPLE_APP_CONFIG
        Object.assign(sampleAppContext.appContextConfigurations.development, {
          topLevelProperty: 'development-override-default-value'
        });
        // we replace arrays
        Object.assign(sampleAppContext.appContextConfigurations.development, {topLevelArrayProperty: [4, 5, 6]});
        // we merge top level objects
        Object.assign(sampleAppContext.appContextConfigurations.development.topLevelObjectProperty, {
          key1: 'developmet-override-topLevelObjectProperties',
          key2: true,
          nestedTopLevelObject: {nestedKey3: 3} // nestedTopLevelObject is overwritten
        });

        Object.assign(sampleAppConfig, sampleAppContext);
        // defaults.appContext = 'development'
        resolveAppConfigs(sampleAppConfig, defaults.appContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        let expectedResolvedAppContext = sampleAppContext.appContextConfigurations[defaults.appContext];
        expectedResolvedAppContext = removeProperty('liveConfigurations')(expectedResolvedAppContext);

        mergeAppProps(expectedResolvedAppConfig, expectedResolvedAppContext);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(1);
        expect(console.log).toHaveBeenLastCalledWith(
          `Successfully loaded appContextConfigurations "${defaults.appContext}" configurations onto app-config.`
        );
      });

      test('resolve-appConfig-with-app-context-and-selectedAppContext-without-live-flag:valid-appContext-and-non-development-selectedAppContext-with-value-override', async () => {
        const specifiedSelectedAppContext = 'test';
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const sampleAppContext = {
          appContextConfigurations: {
            ...JSON.parse(JSON.stringify(SAMPLE_DEVELOPMENT_APP_CONTEXT)), //add sample appContext 'development'
            ...JSON.parse(JSON.stringify(SAMPLE_TEST_APP_CONTEXT)) //add sample appContext 'test' to make sure the correct appContext is selected
          }
        };
        // Create values to override properties of SAMPLE_APP_CONFIG
        Object.assign(sampleAppContext.appContextConfigurations.test, {
          topLevelProperty: 'test-override-default-value'
        });
        // we replace arrays
        Object.assign(sampleAppContext.appContextConfigurations.test, {topLevelArrayProperty: [10, 10, 10]});
        // we merge top level objects
        Object.assign(sampleAppContext.appContextConfigurations.test.topLevelObjectProperty, {
          key1: 'test-override-topLevelObjectProperties',
          key2: true,
          nestedTopLevelObject: {nestedKey3: 'test-nested-key-property'} // nestedTopLevelObject is overwritten
        });

        Object.assign(sampleAppConfig, sampleAppContext);
        // specifiedSelectedAppContext = 'test'
        resolveAppConfigs(sampleAppConfig, specifiedSelectedAppContext);

        let expectedResolvedAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        expectedResolvedAppConfig = removeProperty('liveConfigurations')(expectedResolvedAppConfig);
        let expectedResolvedAppContext = sampleAppContext.appContextConfigurations[specifiedSelectedAppContext];
        expectedResolvedAppContext = removeProperty('liveConfigurations')(expectedResolvedAppContext);

        mergeAppProps(expectedResolvedAppConfig, expectedResolvedAppContext);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(1); // neither appContext nor live were successfully resolved, thus no log messages indicating success
        expect(console.log).toHaveBeenLastCalledWith(
          `Successfully loaded appContextConfigurations "${specifiedSelectedAppContext}" configurations onto app-config.`
        );
      });
    });

    describe('resolve-appConfig-with-app-context-and-selectedAppContext-with-live-flag:all -  test resolveAppConfig with and without appContext including --live flag', () => {
      test('resolve-appConfig-with-app-context-and-selectedAppContext-with-live-flag:valid-appContext-and-development-selectedAppContext', async () => {
        const isLiveFlag = true;
        const sampleAppConfig = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const sampleAppContext = {
          appContextConfigurations: {
            ...JSON.parse(JSON.stringify(SAMPLE_DEVELOPMENT_APP_CONTEXT)), //add sample appContext 'development'
            ...JSON.parse(JSON.stringify(SAMPLE_TEST_APP_CONTEXT)) //add sample appContext 'test' to make sure the correct appContext is selected
          }
        };
        Object.assign(sampleAppConfig, sampleAppContext);
        // defaults.appContext = 'development'
        resolveAppConfigs(sampleAppConfig, defaults.appContext, isLiveFlag);

        const {liveConfigurations, ...expectedResolvedAppConfig} = JSON.parse(JSON.stringify(SAMPLE_APP_CONFIG));
        const {liveConfigurations: appContextliveConfigurations, ...expectedResolvedAppContext} =
          sampleAppContext.appContextConfigurations[defaults.appContext];
        // Overlay 'development' configs over sample appConfig
        mergeAppProps(expectedResolvedAppConfig, expectedResolvedAppContext);
        mergeAppProps(liveConfigurations, appContextliveConfigurations);

        mergeAppProps(expectedResolvedAppConfig, liveConfigurations);

        expect(sampleAppConfig).toEqual(expectedResolvedAppConfig);
        expect(console.warn).toBeCalledTimes(0);
        expect(console.log).toBeCalledTimes(2);
        expect(console.log.mock.calls).toEqual([
          [`Successfully loaded appContextConfigurations "${defaults.appContext}" configurations onto app-config.`],
          [`Successfully loaded "liveConfigurations" onto app-config.`]
        ]);
      });
    });
  });
});
