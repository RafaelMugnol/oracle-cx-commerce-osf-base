/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {RuleTester} = require('eslint');
const rule = require('../../rules/no-underscore-ootb-exports');

const ruleTester = new RuleTester({parserOptions: {ecmaVersion: 2015, sourceType: 'module'}});

/**
 * Disabling until compatibility between ESlint 8 and Jest v26 (v27) is resolved
 * https://github.com/eslint/eslint/issues/14936
 */

xdescribe('Eslint custom OSF plugin tests - custom named export rule ', () => {
  ruleTester.run('custom named export rule', rule, {
    valid: [
      // Typical Happy path cases
      {
        code: "export {sample} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js'
      } /*,
      {
        // TODO: Discuss can we see such patterns?
        code: "code: 'export const { name1: name1, name2: bar } = Obj;',"
      },*/,
      {
        code: "export {namedExport as someNamedExport} from 'marcusSourceModule'",
        filename: 'D:\\some\\path\\plugins\\react-components\\meta.js'
      },
      {
        code: "export {namedList1 as namedList1, namedList2 as namedList2} from 'marcusSourceModule'",
        filename: '/some/path/plugins/react-widgets/index.js'
      },
      {
        code: "export {default as SomeMappedExport} from 'marcusSourceModule'",
        filename: '/some/path/plugins/initializers/index.js'
      },
      // Legal export statements that should not crash rule / eslint
      {
        code: 'export let name1, name2, nameN;',
        filename: '/some/path/plugins/endpoints/index.js'
      },
      {
        code: 'export const name1 = obj1, name2 = obj2, nameN = 5;',
        filename: '/some/path/plugins/subscribers/index.js'
      },
      {
        code: "export let name1 = 'something', name2 = 'somethingelse', nameN = 'somethingN';",
        filename: '/some/path/plugins/endpoints/meta.js'
      },
      {
        code: "export const name1 = 'something', name2 = 'somethingelse', nameN = 'somethingN';",
        filename: 'D:\\some\\path\\plugins\\subscribers\\meta.js'
      },
      {
        code: 'export function functionName(){}',
        filename: '/some/path/plugins/actions/index.js'
      },
      {
        code: 'export const functionName = () => {}',
        filename: '/some/path/plugins/endpoints/index.js'
      },
      {
        code: 'export class SomeClass {}',
        filename: '/some/path/plugins/actions/index.js'
      },
      // Default exports, to ensure rule does not crash with these and is this legal in index/meta.js for app?
      {
        code: 'export default someExpression;',
        filename: '/some/path/plugins/actions/index.js'
      },
      {
        code: 'export default function () {}',
        filename: '/some/path/plugins/actions/index.js'
      },
      {
        code: 'export default function* () {}',
        filename: '/some/path/plugins/actions/index.js'
      },
      {
        code: 'export default class SomeClass {}',
        filename: '/some/path/plugins/actions/index.js'
      },
      {
        code: 'export default function NamedFunc() {}',
        filename: '/some/path/plugins/actions/index.js'
      } /* ,
      {
        code: 'const NamedFunc = () => {}; export default NamedFunc;'
      },
      {
        // should this be error.
        code: 'const SomeNamedExport = () => {}; export {SomeNamedExport as default};'
      }*/
    ],
    invalid: [
      {
        // Typical Happy path cases which should report as errors
        code: "export {_sample} from 'marcusSourceModule'",
        filename: 'D:\\some\\path\\plugins\\react-components\\meta.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      },
      {
        code: "export {namedExport as _someNamedExport} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      },
      {
        code: "export {_namedList1 , _namedList2} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          },
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      },
      {
        code: "export {namedList1 as _X , namedList2 as _Y} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          },
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      },
      {
        code: "export {namedList1 as _namedList1, namedList2 as _namedList2} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          },
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      },
      {
        code: "export {default as _SomeMappedExport} from 'marcusSourceModule'",
        filename: '/some/path/plugins/actions/index.js',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      } /*,
      {
        // TODO: Check if this be a failure should it have _ as well?
        // Exporting destructured assignments with renaming
        code: 'export const { _name1: name1, _name2: bar } = Obj;',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          },
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      } ,
      // Legal export statements that should not crash rule / eslint
      {
        code: 'export let _name1, _name2;',
        errors: [
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          },
          {
            messageId: 'noUnderscoreOOTBExports',
            type: 'ExportSpecifier'
          }
        ]
      }*/
    ]
  });
});
