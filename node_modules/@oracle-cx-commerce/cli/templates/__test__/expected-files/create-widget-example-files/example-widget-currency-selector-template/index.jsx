import React, {useContext} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';

/*
 * Uncomment the following line to get the parameter substitution
 * function, e.g. t(someParameterizedResourceString, "someValue").
 */
import {t} from '@oracle-cx-commerce/utils/generic';

import PropTypes from 'prop-types';

/*
 *  Imports the OSF connect utility and StoreContext
 */
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';

/*
 * The widget template files provide an implementation example of a Currency Selector.
 * To use the example, run the following commands to create the supplemental plugins:
 *
 * Run: yarn occ create-fetcher --name currencyList --endpoint listCurrencies --selector getCurrencyInfo
 * Run: yarn occ create-selector --name currencyInfo --repository currencyRepository --table currencyInfo
 */
import {getCurrencyInfo} from '../../selectors';
import {currencyList} from '../../fetchers';
import {useCurrencyList} from '../../fetchers/hooks';

import css from './styles.css';


/*
 * The server-side rendering framework checks each component for a "fetchers" array
 * to determine what actions to take in order to populate the initial state. For this
 * component, we need the currency list.
 */
export const fetchers = [currencyList];

/**
 * The custom component example.
 *
 * @param {string} props.config* Configurations properties for Design studio
 * @param {string} props.label* Resource strings from imported locales
 */

const CurrencySelectorExample = props => {
  const {configIncludeExtraInfo, helloText, labelExtraInfo, labelSampleTranslation} = props;
  // Labels for currency selector example
  const {labelCurrencies, labelSelectACurrency, labelSelectedCurrency} = props;
  // List of available currency for the currency selector example
  const {currencies} = props;
  // Variable to hold the selector currency for currency selector example
  const {selectedCurrency} = props;

  const store = useContext(StoreContext);
  useCurrencyList(store);

  /*
   * Invoked when the user selects a currency from the
   * select element. Invokes the 'getCurrency' action to
   * update the selected currency with info from the server.
   */
  const onCurrencyChange = event => {
    const repositoryId = event.target.value;
    if (repositoryId) {
      store.action('getCurrency', {repositoryId});
    }
  };

  return (
    <Styled id="CurrencySelectorExample" css={css}>
      <div className="CurrencySelectorExample">
        CurrencySelectorExample - {helloText}
        <span className="CurrencySelectorExample__Label">{labelSampleTranslation}</span>
        <span className="CurrencySelectorExample__ExtraInfo">{labelExtraInfo}</span>
        {configIncludeExtraInfo && <span className="CurrencySelectorExample__ExtraInfo">{labelExtraInfo}</span>}
        <h1> Currency Selector Example: </h1>
        {currencies && (
          <div>
            <span className="CurrencySelector__Label">{labelCurrencies}</span>
            <select
              value={selectedCurrency && selectedCurrency.repositoryId}
              onChange={onCurrencyChange}
              onBlur={onCurrencyChange}
            >
              <option value="">{labelSelectACurrency}</option>

              {currencies.map(currency => (
                <option key={currency.repositoryId} value={currency.repositoryId}>
                  {currency.displayName}
                </option>
              ))}
            </select>
          </div>
        )}
        {selectedCurrency && (
          <div className="CurrencySelector__SelectedCurrencyInfo">
            {labelSelectedCurrency} {selectedCurrency.displayName} ({selectedCurrency.currencyCode})
          </div>
        )}
      </div>
    </Styled>
  );
};

/*
 * React PropTypes property for the Widget's metadata.
 */
CurrencySelectorExample.propTypes = {
  helloText: PropTypes.string.isRequired,
  labelExtraInfo: PropTypes.string.isRequired,
  labelSampleTranslation: PropTypes.string.isRequired,
  currencies: PropTypes.array.isRequired,
  selectedCurrency: PropTypes.object.isRequired
};

/*
 * Wrap the component with a "connect" object to access the state
 * value as properties and to re-display the component when those
 * properties change.
 *
 */
export default connect(getCurrencyInfo)(CurrencySelectorExample);

/*
 * If this component does not make use of state, use the
 * following export instead.
 */
// export default CurrencySelectorExample;
