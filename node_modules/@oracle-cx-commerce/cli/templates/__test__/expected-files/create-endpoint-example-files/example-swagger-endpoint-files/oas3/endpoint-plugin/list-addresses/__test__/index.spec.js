import listAddressesEndpoint from '../index';

const endpointConfigState = {
  configRepository: {
    endpoints: {
      'listAddresses': {
        url: 'https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443',
        method: ''
      }
    }
  }
};
const listAddressesPayload = {};
test('listAddresses endpoint.getRequest() with valid payload gives a proper request', async () => {
  const payload = {
    ...listAddressesPayload
  };
  const request = await listAddressesEndpoint.getRequest(payload, endpointConfigState);
  expect(request.url).toBe('https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443');
  expect(request.method).toBe('GET');
});

test('listAddresses with valid payload returns response populated with repository structure', async () => {
  const body = {};

  const response = new Response(JSON.stringify(body), {
    status: 200,
    url: 'https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443'
  });

  const endpointResponse = listAddressesEndpoint.getResponse(response, endpointConfigState, {});
  expect(endpointResponse.status).toBe(200);
  expect(endpointResponse.url).toBe('https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443');
  const json = await endpointResponse.getJson();

  expect(json).toEqual({
    json: {}
  });
});

test('listAddresses with no response returns empty object', async () => {
  const body = {};

  const response = new Response(JSON.stringify(body), {
    status: 200,
    url: 'https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443'
  });

  const endpointResponse = listAddressesEndpoint.getResponse(response, {}, {});
  expect(endpointResponse.status).toBe(200);
  expect(endpointResponse.url).toBe('https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443');
  const json = await endpointResponse.getJson();
  expect(json).toEqual({
    json: {}
  });
});

test('listAddresses with invalid payload return error', async () => {
  const payload = {};
  const body = {
    errorCode: '',
    message: 'Test message'
  };

  const response = new Response(JSON.stringify(body), {
    status: 500,
    url: 'https://aosfpc1dev-store.occa.us-ashburn-1.ocs.oc-test.com:443'
  });

  const endpointResponse = listAddressesEndpoint.getResponse(response, {}, payload);
  const json = await endpointResponse.getJson();
  expect(json).toEqual({
    error: {
      ...body,
      status: 500
    }
  });
});
