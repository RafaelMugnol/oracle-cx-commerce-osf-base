/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {
  WIDGET_DEFAULT_PATH,
  getPathToWidgetIndex,
  getPathToWidgetMeta,
  discoverTemplateFiles
} = require('@oracle-cx-commerce/cli/templates/utils');
const {
  validateOutputFiles,
  createTestApp,
  validateImports
} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {createWidget} = require('@oracle-cx-commerce/cli/templates');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  name: 'ExampleWidget',
  appDir: 'packages/apps/blank-store'
};

const expectedBaseTemplateWidgetFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-widget-example-files',
  'example-widget-base-template'
);

const expectedCurrencyTemplateWidgetFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-widget-example-files',
  'example-widget-currency-selector-template'
);

describe('create-widget:all  -  all the tests that will invoke create-widget with different options', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  afterAll(async () => {
    await tempAppDir.cleanup();
  });

  test('create-widget:list-template-files - check that all widget template files are present', () => {
    const widgetTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'widget', 'template-files');
    const expectedFileList = [
      path.join('__test__', 'widget-name-widget.spec.js'),
      path.join('config', 'index.js'),
      path.join('config', 'locales.js'),
      'index.js',
      path.join('locales', 'index.js'),
      'meta.js',
      'readme.js',
      'styles.js'
    ];
    // only pass the path
    expect(discoverTemplateFiles(widgetTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
  });

  test('create-widget:create-an-already-existing-widget-blank-store - create a widget that already existing in an specific app', async () => {
    const options = {...blankStoreOptions, name: 'HelloWorld'};
    await expect(createWidget(options.appName, options)).rejects.toThrow(
      `Component "${dashCase(options.name)}", already exists in path ${path.resolve(
        options.appDir,
        WIDGET_DEFAULT_PATH
      )}.`
    );
  });

  test('create-widget:create-an-already-existing-widget-test-app - create a widget in already existing in the test app', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath, name: 'HelloWorld'};

    await expect(createWidget(options.appName, options)).rejects.toThrow(
      `Component "${dashCase(options.name)}", already exists in path ${path.resolve(
        options.appDir,
        WIDGET_DEFAULT_PATH
      )}.`
    );
  });

  test('create-widget:create-a-widget-in-test-app-folder - create a widget in the test app check widget folder exist', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath, name: 'firstExampleWidget'};
    await expect(createWidget(options.appName, options)).resolves.not.toThrow();
    const newWidgetPath = path.resolve(options.appDir, WIDGET_DEFAULT_PATH, dashCase(options.name));
    console.log(newWidgetPath);
    expect(fs.existsSync(newWidgetPath)).toBeTruthy();
  });

  test('create-widget:check-for-imports-in-test-app-imports - create a widget in the test app and check if imports exist', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath, name: 'secondExampleWidget'};
    await expect(createWidget(options.appName, options)).resolves.not.toThrow();
    const testAppWidgetIndexPath = getPathToWidgetIndex(options.appDir);
    const testAppWidgetMetaPath = getPathToWidgetMeta(options.appDir);
    validateImports(testAppWidgetIndexPath, `${options.name}`);
    validateImports(testAppWidgetMetaPath, `${options.name}`);
  });

  test('create-widget:check-widget-base-template-content - create a widget in the test app and check the content', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath};
    await expect(createWidget(options.appName, options)).resolves.not.toThrow();
    const newWidgetPath = path.resolve(options.appDir, WIDGET_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedBaseTemplateWidgetFiles, newWidgetPath);
  });

  test('create-widget:check-widget-currency-selector-template-content - create a widget in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'CurrencySelectorExample',
      template: 'CurrencySelector'
    };
    await expect(createWidget(options.appName, options)).resolves.not.toThrow();
    const newWidgetPath = path.resolve(options.appDir, WIDGET_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedCurrencyTemplateWidgetFiles, newWidgetPath);
  });
});
