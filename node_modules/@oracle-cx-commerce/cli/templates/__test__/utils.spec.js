/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');

const {
  WIDGET_DEFAULT_PATH,
  ACTION_DEFAULT_PATH,
  ENDPOINT_DEFAULT_PATH,
  FETCHER_DEFAULT_PATH,
  ENDPOINT_FACTORY_PATH,
  SELECTOR_DEFAULT_PATH,
  readAppLocales,
  readAppName,
  verifyApp,
  validatePluginFolderExists,
  pluginExists
} = require('@oracle-cx-commerce/cli/templates/utils');

const {createTestApp} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  directoryName: 'aDirectoryName',
  appDir: 'packages/apps/blank-store'
};

describe('asset-creation-tools-utils:all  -  all the tests that will test the utils function of the asset creation tools', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  afterAll(async () => {
    await tempAppDir.cleanup();
  });

  test('asset-creation-tools-utils:test readAppLocales', () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(readAppLocales(options.appDir)).toMatchObject(['en', 'de']);
  });

  test('asset-creation-tools-utils:test readAppName', () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(readAppName(options.appDir)).toBe('@oracle-cx-commerce/blank-store');
  });

  test('asset-creation-tools-utils:test verifyApp - app exists', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    await expect(verifyApp(options.appName, options.appDir)).resolves.not.toThrow();
  });

  test('asset-creation-tools-utils:test verifyApp - app does not exists', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: 'no-existing-dir'
    };
    await expect(verifyApp(options.appName, options.appDir)).rejects.toThrow(
      `Cannot access application ${options.appName} at path: ${options.appDir}`
    );
  });

  test('asset-creation-tools-utils:test validatePluginFolderExists Widget - Component Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, WIDGET_DEFAULT_PATH);
    }).not.toThrow();

    options.appDir = 'non-existing-folder';
    expect(() => {
      validatePluginFolderExists(options.appDir, WIDGET_DEFAULT_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, WIDGET_DEFAULT_PATH)}`);
  });

  test('asset-creation-tools-utils:test validatePluginFolderExists Action - Action Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, ACTION_DEFAULT_PATH);
    }).not.toThrow();

    options.appDir = 'non-existing-folder';
    expect(() => {
      validatePluginFolderExists(options.appDir, ACTION_DEFAULT_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, ACTION_DEFAULT_PATH)}`);
  });

  test('asset-creation-tools-utils:test validatePluginFolderExists Endpoint- Endpoint Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, ENDPOINT_DEFAULT_PATH);
    }).not.toThrow();

    options.appDir = 'non-existing-folder';
    expect(() => {
      validatePluginFolderExists(options.appDir, ENDPOINT_DEFAULT_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, ENDPOINT_DEFAULT_PATH)}`);
  });

  // Endpoint factory folder does not exists by default in sample apps
  test('asset-creation-tools-utils:test validatePluginFolderExists Endpoint Factory - Endpoint Factory Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, ENDPOINT_FACTORY_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, ENDPOINT_FACTORY_PATH)}`);
  });

  // Fetchers folder does not exists by default in sample apps
  test('asset-creation-tools-utils:test validatePluginFolderExists Fetcher- Fetcher Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, FETCHER_DEFAULT_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, FETCHER_DEFAULT_PATH)}`);
  });

  // Selectors folder does not exists by default in sample apps
  test('asset-creation-tools-utils:test validatePluginFolderExists Selector - Selector Folder', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    expect(() => {
      validatePluginFolderExists(options.appDir, SELECTOR_DEFAULT_PATH);
    }).toThrow(`Cannot access application's plugins folder: ${path.resolve(options.appDir, SELECTOR_DEFAULT_PATH)}`);
  });

  test('asset-creation-tools-utils:test pluginExists component - hello-world exists in blank store', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    // expects hello-world to be missing from the component folder.
    expect(pluginExists(options.appDir, WIDGET_DEFAULT_PATH, dashCase('HelloWorld'))).toBeTruthy();
  });

  test('asset-creation-tools-utils:test pluginExists component - non-existing component in blank store', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    // expects hello-world to be missing from the component folder.
    expect(pluginExists(options.appDir, WIDGET_DEFAULT_PATH, dashCase('NonExistingComponent'))).toBeFalsy();
  });

  test('asset-creation-tools-utils:test pluginExists action - non-existing action in blank store', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    // expects hello-world to be missing from the component folder.
    expect(pluginExists(options.appDir, ACTION_DEFAULT_PATH, dashCase('NonExistingComponent'))).toBeFalsy();
  });

  test('asset-creation-tools-utils:test pluginExists action - non-existing endpoint in blank store', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath
    };
    // expects hello-world to be missing from the component folder.
    expect(pluginExists(options.appDir, ENDPOINT_DEFAULT_PATH, dashCase('NonExistingComponent'))).toBeFalsy();
  });
});
