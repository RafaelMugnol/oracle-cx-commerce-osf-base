/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {
  ACTION_DEFAULT_PATH,
  getPathToActionIndex,
  getPathToActionMeta,
  discoverTemplateFiles
} = require('@oracle-cx-commerce/cli/templates/utils');
const {
  validateOutputFiles,
  createTestApp,
  validateImports
} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {createAction} = require('@oracle-cx-commerce/cli/templates');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  name: 'exampleAction',
  appDir: 'packages/apps/blank-store'
};

const expectedReducerActionFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-action-example-files',
  'example-action-reducer'
);
const expectedSagaSameNameActionFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-action-example-files',
  'example-action-saga-same-name'
);
const expectedSagaDiffNameActionFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-action-example-files',
  'example-action-saga-different-name'
);
const expectedSagaCustomActionFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-action-example-files',
  'example-action-saga-custom'
);

describe('create-action:all  -  all the tests that will invoke create-action with different options', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  beforeEach(() => {
    // run before each
  });

  afterAll(async () => {
    tempAppDir.cleanup();
  });
  describe('create-reducer-action:all  -  all the tests that will invoke create-action with --reducer option', () => {
    beforeEach(() => {
      // run before each
    });
    test('create-reducer-action:list-template-files - check that all action template files are present', () => {
      const actionTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'actions', 'template-files');
      const expectedFileList = [
        'index.js',
        'meta.js',
        path.join('schema', 'input.json'),
        path.join('schema', 'output.js'),
        path.join('__test__', 'index.spec.js')
      ];
      // only pass the path
      expect(discoverTemplateFiles(actionTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-reducer-action:create-an-already-existing-action-blank-store - create an action that already existing in an specific app', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'firstExampleAction', reducer: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      await expect(createAction(options.appName, options)).rejects.toThrow(
        `Action "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          ACTION_DEFAULT_PATH
        )}.`
      );
    });

    test('create-reducer-action:create-an-action-in-test-app-folder - create an action in the test app check action folder exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'secondExampleAction', reducer: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      console.log(newActionPath);
      expect(fs.existsSync(newActionPath)).toBeTruthy();
    });

    test('create-reducer-action:check-for-imports-in-test-app-imports - create an action in the test app and check if imports exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'thirdExampleAction', reducer: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const testAppActionIndexPath = getPathToActionIndex(options.appDir);
      const testAppActionMetaPath = getPathToActionMeta(options.appDir);
      validateImports(testAppActionIndexPath, `${options.name}`);
      validateImports(testAppActionMetaPath, `${options.name}`);
    });

    test('create-reducer-action:check-action-content-in-test-app-content - create an action in the test app and check the content', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'fourthExampleAction', reducer: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      validateOutputFiles(expectedReducerActionFiles, newActionPath);
    });
  });

  describe('create-saga-same-name-action:all  -  all the tests that will invoke create-action with --endpoint option', () => {
    beforeEach(() => {
      // run before each
    });
    test('create-saga-same-name-action:list-template-files - check that all action template files are present', () => {
      const actionTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'actions', 'template-files');
      const expectedFileList = [
        path.join('__test__', 'index.spec.js'),
        'index.js',
        'meta.js',
        path.join('schema', 'input.json'),
        path.join('schema', 'output.js')
      ];
      // only pass the path
      expect(discoverTemplateFiles(actionTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-saga-same-name-action:create-an-already-existing-action-blank-store - create an action that already existing in an specific app', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'fifthExampleAction', endpoint: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      await expect(createAction(options.appName, options)).rejects.toThrow(
        `Action "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          ACTION_DEFAULT_PATH
        )}.`
      );
    });

    test('create-saga-same-name-action:create-an-action-in-test-app-folder - create an action in the test app check action folder exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'sixthExampleAction', endpoint: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      console.log(newActionPath);
      expect(fs.existsSync(newActionPath)).toBeTruthy();
    });

    test('create-saga-same-name-action:check-for-imports-in-test-app-imports - create an action in the test app and check if imports exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'seventhExampleAction', endpoint: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const testAppActionIndexPath = getPathToActionIndex(options.appDir);
      const testAppActionMetaPath = getPathToActionMeta(options.appDir);
      validateImports(testAppActionIndexPath, `${options.name}`);
      validateImports(testAppActionMetaPath, `${options.name}`);
    });

    test('create-saga-same-name-action:check-action-content-in-test-app-content - create an action in the test app and check the content', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'eighthExampleAction', endpoint: true};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      validateOutputFiles(expectedSagaSameNameActionFiles, newActionPath);
    });
  });

  describe('create-saga-different-name-action:all  -  all the tests that will invoke create-action with --endpoint option', () => {
    beforeEach(() => {
      // run before each
    });
    test('create-saga-different-name-action:list-template-files - check that all action template files are present', () => {
      const actionTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'actions', 'template-files');
      const expectedFileList = [
        path.join('__test__', 'index.spec.js'),
        'index.js',
        'meta.js',
        path.join('schema', 'input.json'),
        path.join('schema', 'output.js')
      ];
      // only pass the path
      expect(discoverTemplateFiles(actionTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-saga-different-name-action:create-an-already-existing-action-blank-store - create an action that already existing in an specific app', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'ninthExampleAction', endpoint: 'endpointName'};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      await expect(createAction(options.appName, options)).rejects.toThrow(
        `Action "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          ACTION_DEFAULT_PATH
        )}.`
      );
    });

    test('create-saga-different-name-action:create-an-action-in-test-app-folder - create an action in the test app check action folder exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'tenthExampleAction', endpoint: 'endpointName'};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      console.log(newActionPath);
      expect(fs.existsSync(newActionPath)).toBeTruthy();
    });

    test('create-saga-different-name-action:check-for-imports-in-test-app-imports - create an action in the test app and check if imports exist', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'eleventhExampleAction',
        endpoint: 'endpointName'
      };
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const testAppActionIndexPath = getPathToActionIndex(options.appDir);
      const testAppActionMetaPath = getPathToActionMeta(options.appDir);
      validateImports(testAppActionIndexPath, `${options.name}`);
      validateImports(testAppActionMetaPath, `${options.name}`);
    });

    test('create-saga-different-name-action:check-action-content-in-test-app-content - create an action in the test app and check the content', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'twelfthExampleAction',
        endpoint: 'endpointName'
      };
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      validateOutputFiles(expectedSagaDiffNameActionFiles, newActionPath);
    });
  });

  describe('create-saga-custom-action:all  -  all the tests that will invoke create-action and create a custom action', () => {
    beforeEach(() => {
      // run before each
    });
    test('create-saga-custom-action:list-template-files - check that all action template files are present', () => {
      const actionTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'actions', 'template-files');
      const expectedFileList = [
        path.join('__test__', 'index.spec.js'),
        'index.js',
        'meta.js',
        path.join('schema', 'input.json'),
        path.join('schema', 'output.js')
      ];
      // only pass the path
      expect(discoverTemplateFiles(actionTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-saga-custom-action:create-an-already-existing-action-blank-store - create an action that already existing in an specific app', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'thirteenthExampleAction', endpoint: undefined};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();

      await expect(createAction(options.appName, options)).rejects.toThrow(
        `Action "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          ACTION_DEFAULT_PATH
        )}.`
      );
    });

    test('create-saga-custom-action:create-an-action-in-test-app-folder - create an action in the test app check action folder exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'fourteenthExampleAction', endpoint: undefined};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      console.log(newActionPath);
      expect(fs.existsSync(newActionPath)).toBeTruthy();
    });

    test('create-saga-custom-action:check-for-imports-in-test-app-imports - create an action in the test app and check if imports exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'fifteenthExampleAction', endpoint: undefined};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const testAppActionIndexPath = getPathToActionIndex(options.appDir);
      const testAppActionMetaPath = getPathToActionMeta(options.appDir);
      validateImports(testAppActionIndexPath, `${options.name}`);
      validateImports(testAppActionMetaPath, `${options.name}`);
    });

    test('create-saga-custom-action:check-action-content-in-test-app-content - create an action in the test app and check the content', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'sixteenthExampleAction', endpoint: undefined};
      await expect(createAction(options.appName, options)).resolves.not.toThrow();
      const newActionPath = path.resolve(options.appDir, ACTION_DEFAULT_PATH, dashCase(options.name));
      validateOutputFiles(expectedSagaCustomActionFiles, newActionPath);
    });
  });

  describe('create-action-bad-options:all  -  use cases that should not work when creating an action', () => {
    beforeEach(() => {
      // run before each
    });
    test('create-action-bad-options:both-reducer-and-endpoint - using both options --reducer and --endpoint to createAction', () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        reducer: true,
        endpoint: true || 'endpointName'
      };

      expect(createAction(options.appName, options)).rejects.toThrow(`Can't specify both 'reducer' and 'endpoint'.`);
    });
  });
});
