/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {
  SELECTOR_DEFAULT_PATH,
  getPathToSelectorIndex,
  discoverTemplateFiles
} = require('@oracle-cx-commerce/cli/templates/utils');
const {
  validateOutputFiles,
  createTestApp,
  validateImports
} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {createSelector} = require('@oracle-cx-commerce/cli/templates');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  name: 'exampleSelector',
  repository: 'exampleRepository',
  table: 'exampleTable',
  entity: 'exampleEntity',
  entityId: undefined,
  appDir: 'packages/apps/blank-store'
};

const expectedSelectorNameRepository = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-with-name'
);

const expectedSelectorNameRepositoryTable = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table-with-name'
);

const expectedSelectorNameRepositoryTableEntity = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table-entity-with-name'
);

const expectedSelectorNameRepositoryTableEntityId = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table-entityId-with-name'
);

const expectedSelectorRepository = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository'
);

const expectedSelectorRepositoryTable = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table'
);

const expectedSelectorRepositoryTableEntity = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table-entity'
);

const expectedSelectorRepositoryTableEntityId = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-selector-example-files',
  'example-selector-repository-table-entityId'
);

describe('create-selector:all  -  all the tests that will invoke create-selector with different options', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  beforeEach(() => {
    // run before each
  });

  afterAll(async () => {
    tempAppDir.cleanup();
  });

  test('create-selector:list-template-files - check that all selector template files are present', () => {
    const selectorTemplatesDirectory = path.resolve(path.relative('.', __dirname), '..', 'selectors', 'template-files');
    const expectedFileList = ['index.js'];
    // only pass the path
    expect(discoverTemplateFiles(selectorTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
  });

  test('create-selector:create-an-already-existing-selector-blank-store - create a selector that already existing in an specific app', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'firstExampleSelector',
      repository: 'firstExampleRepository',
      table: 'firstExampleTable',
      entity: 'firstExampleEntity',
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    await expect(createSelector(options.appName, options)).rejects.toThrow(
      `Selector "${dashCase(options.name)}", already exists in path ${path.resolve(
        options.appDir,
        SELECTOR_DEFAULT_PATH
      )}.`
    );
  });

  test('create-selector:create-a-selector-in-test-app-folder - create a selector in the test app check selector folder exist', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'secondExampleSelector',
      repository: 'secondExampleRepository',
      table: 'secondExampleTable',
      entity: 'secondExampleEntity',
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.name));
    console.log(newSelectorPath);
    expect(fs.existsSync(newSelectorPath)).toBeTruthy();
  });

  test('create-selector:check-for-imports-in-test-app-imports - create a selector in the test app and check if imports exist', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'thirdExampleSelector',
      repository: 'thirdExampleRepository',
      table: 'thirdExampleTable',
      entity: undefined,
      entityId: 'thirdExampleEntityId'
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const testAppSelectorIndexPath = getPathToSelectorIndex(options.appDir);
    const newSelectorDirectoryNamePath = `${dashCase(options.name)}`;
    validateImports(testAppSelectorIndexPath, `${newSelectorDirectoryNamePath}`);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'fourthExampleSelector',
      repository: 'fourthExampleRepository',
      table: undefined,
      entity: undefined,
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedSelectorNameRepository, newSelectorPath);
  });
  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'fifthExampleSelector',
      repository: 'fifthExampleRepository',
      table: 'fifthExampleTable',
      entity: undefined,
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedSelectorNameRepositoryTable, newSelectorPath);
  });
  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'sixthExampleSelector',
      repository: 'sixthExampleRepository',
      table: 'sixthExampleTable',
      entity: 'sixthExampleEntity',
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedSelectorNameRepositoryTableEntity, newSelectorPath);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'seventhExampleSelector',
      repository: 'seventhExampleRepository',
      table: 'seventhExampleTable',
      entity: undefined,
      entityId: 'seventhExampleEntityId'
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedSelectorNameRepositoryTableEntityId, newSelectorPath);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: undefined,
      repository: 'eighthExampleRepository',
      table: undefined,
      entity: undefined,
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.repository));
    validateOutputFiles(expectedSelectorRepository, newSelectorPath);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: undefined,
      repository: 'ninthExampleRepository',
      table: 'ninthExampleTable',
      entity: undefined,
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.table));
    validateOutputFiles(expectedSelectorRepositoryTable, newSelectorPath);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: undefined,
      repository: 'tenthExampleRepository',
      table: 'tenthExampleTable',
      entity: 'tenthExampleEntity',
      entityId: undefined
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.entity));
    validateOutputFiles(expectedSelectorRepositoryTableEntity, newSelectorPath);
  });

  test('create-selector:check-selector-content-in-test-app-content - create a selector in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: undefined,
      repository: 'eleventhExampleRepository',
      table: 'eleventhExampleTable',
      entity: undefined,
      entityId: 'eleventhExampleEntityId'
    };
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();
    const newSelectorPath = path.resolve(options.appDir, SELECTOR_DEFAULT_PATH, dashCase(options.entityId));
    validateOutputFiles(expectedSelectorRepositoryTableEntityId, newSelectorPath);
  });

  test('create-selector:check-selector-folder-being-created - create a selector in the test app and that the selector folder is being created properly', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'twelfthExampleSelector',
      repository: 'twelfthExampleRepository',
      table: 'twelfthExampleTable',
      entity: 'twelfthExampleEntity',
      entityId: undefined
    };

    const tempAppDirSelectorFolder = await createTestApp(options.appName);
    expect(tempAppDirSelectorFolder).toBeDefined();

    const testAppPathSelectorFolder = path.resolve(tempAppDirSelectorFolder.path, options.appName);
    const selectorFolderPath = path.resolve(testAppPathSelectorFolder, SELECTOR_DEFAULT_PATH);

    console.log(`testAppPathSelectorFolder folder: ${testAppPathSelectorFolder}`);
    console.log(`selectors folder: ${selectorFolderPath}`);

    expect(fs.existsSync(selectorFolderPath)).toBeFalsy();

    options.appDir = testAppPathSelectorFolder;
    await expect(createSelector(options.appName, options)).resolves.not.toThrow();

    expect(fs.existsSync(selectorFolderPath)).toBeTruthy();
    tempAppDirSelectorFolder.cleanup();
  });
  describe('create-selector-bad-options:all  -  use cases that should not work when creating a selector', () => {
    test('create-selector-bad-options:repository-and-table-options-undefined - run createSelector with repository and table undefined but entityId defined', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        table: undefined,
        entityId: !undefined
      };
      await expect(createSelector(options.appName, options)).rejects.toThrow(
        `Can't specify 'entityId' when 'table' is not specified.`
      );
    });
    test('create-selector-bad-options:repository-and-table-options-undefined - run createSelector with repository and table undefined but entity defined', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        table: undefined,
        entity: !undefined
      };
      await expect(createSelector(options.appName, options)).rejects.toThrow(
        `Can't specify 'entity' when 'table' is not specified.`
      );
    });
    test('create-selector-bad-options:entityId-option-undefined - run createSelector with both entity defined and entityId defined', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        entity: !undefined,
        entityId: !undefined
      };
      await expect(createSelector(options.appName, options)).rejects.toThrow(
        `Can't specify both entity and entityId together.`
      );
    });
  });
});
