/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {
  SUBSCRIBER_DEFAULT_PATH,
  getPathToSubscriberIndex,
  getPathToSubscriberMeta,
  discoverTemplateFiles
} = require('@oracle-cx-commerce/cli/templates/utils');
const {
  validateOutputFiles,
  createTestApp,
  validateImports
} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {createSubscriber} = require('@oracle-cx-commerce/cli/templates');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  name: 'exampleSubscriber',
  appDir: 'packages/apps/blank-store'
};

const expectedSubscriberFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-subscriber-example-files'
);

describe('create-subscriber:all  -  all the tests that will invoke create-subscriber with different options', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  afterAll(async () => {
    await tempAppDir.cleanup();
  });

  test('create-subscriber:list-template-files - check that all subscriber template files are present', () => {
    const subscriberTemplatesDirectory = path.resolve(
      path.relative('.', __dirname),
      '..',
      'subscriber',
      'template-files'
    );
    const expectedFileList = ['index.js', 'meta.js'];
    // only pass the path
    expect(discoverTemplateFiles(subscriberTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
  });

  test('create-subscriber:create-an-already-existing-subscriber-blank-store - create a subscriber that already existing in an specific app', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'firstExampleSubscriber'
    };
    await expect(createSubscriber(options.appName, options)).resolves.not.toThrow();
    await expect(createSubscriber(options.appName, options)).rejects.toThrow(
      `Subscriber "${dashCase(options.name)}", already exists in path ${path.resolve(
        options.appDir,
        SUBSCRIBER_DEFAULT_PATH
      )}.`
    );
  });

  test('create-subscriber:create-a-subscriber-in-test-app-folder - create a subscriber in the test app check subscriber folder exist', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath, name: 'secondExampleSubscriber'};
    await expect(createSubscriber(options.appName, options)).resolves.not.toThrow();
    const newSubscriberPath = path.resolve(options.appDir, SUBSCRIBER_DEFAULT_PATH, dashCase(options.name));
    console.log(newSubscriberPath);
    expect(fs.existsSync(newSubscriberPath)).toBeTruthy();
  });

  test('create-subscriber:check-for-imports-in-test-app-imports - create a subscriber in the test app and check if imports exist', async () => {
    const options = {...blankStoreOptions, appDir: testAppPath, name: 'thirdExampleSubscriber'};
    await expect(createSubscriber(options.appName, options)).resolves.not.toThrow();
    const testAppSubscriberIndexPath = getPathToSubscriberIndex(options.appDir);
    const testAppSubscriberMetaPath = getPathToSubscriberMeta(options.appDir);
    validateImports(testAppSubscriberIndexPath, `${options.name}`);
    validateImports(testAppSubscriberMetaPath, `${options.name}`);
  });

  test('create-subscriber:check-subscriber-content-in-test-app-content - create a subscriber in the test app and check the content', async () => {
    const options = {
      ...blankStoreOptions,
      appDir: testAppPath,
      name: 'fourthExampleSubscriber'
    };
    await expect(createSubscriber(options.appName, options)).resolves.not.toThrow();
    const newSubscriberPath = path.resolve(options.appDir, SUBSCRIBER_DEFAULT_PATH, dashCase(options.name));
    validateOutputFiles(expectedSubscriberFiles, newSubscriberPath);
  });
});
