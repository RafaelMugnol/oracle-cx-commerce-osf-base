/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {
  FETCHER_DEFAULT_PATH,
  WIDGET_DEFAULT_PATH,
  getPathToFetcherIndex,
  getPathToFetcherMeta,
  getPathToFetcherHooks,
  discoverTemplateFiles,
  capitalizeFirstLetter
} = require('@oracle-cx-commerce/cli/templates/utils');

const {
  validateOutputFiles,
  createTestApp,
  validateImports
} = require('@oracle-cx-commerce/cli/templates/__test__/asset-creation-tests-utils');
const {createFetcher} = require('@oracle-cx-commerce/cli/templates');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const blankStoreOptions = {
  appName: 'blank-store',
  userName: 'dev',
  name: 'exampleFetcher',
  endpoint: 'anEndpoint',
  selector: 'aSelector',
  appDir: 'packages/apps/blank-store'
};

const expectedGlobalFetcherFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-fetcher-example-files',
  'example-fetcher-global'
);
const expectedForComponentFetcherFiles = path.resolve(
  path.relative('.', __dirname),
  'expected-files',
  'create-fetcher-example-files',
  'example-fetcher-for-component'
);

describe('create-fetcher:all  -  all the tests that will invoke create-fetcher with different options', () => {
  let testAppPath, tempAppDir;
  beforeAll(async () => {
    tempAppDir = await createTestApp(blankStoreOptions.appName);
    expect(tempAppDir).toBeDefined();
    testAppPath = path.resolve(tempAppDir.path, blankStoreOptions.appName);
  });

  afterAll(async () => {
    await tempAppDir.cleanup();
  });

  describe('create-global-fetcher:all  -  all the tests that will invoke create-fetcher with --global option', () => {
    test('create-global-fetcher:list-template-files - check that all fetcher template files are present', () => {
      const fetcherTemplatesDirectory = path.resolve(
        path.relative('.', __dirname),
        '..',
        'fetcher',
        'template-files',
        'global'
      );
      const expectedFileList = ['hook.js', 'index.js', 'meta.js'];
      // only pass the path
      expect(discoverTemplateFiles(fetcherTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-global-fetcher:create-an-already-existing-fetcher-blank-store - create a fetcher that already existing in an specific app', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'firstExampleFetcher'};
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      await expect(createFetcher(options.appName, options)).rejects.toThrow(
        `Fetcher "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          FETCHER_DEFAULT_PATH
        )}.`
      );
    });

    test('create-global-fetcher:create-a-fetcher-in-test-app-folder - create a fetcher in the test app check fetcher folder exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'secondExampleFetcher'};
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const newFetcherPath = path.resolve(options.appDir, FETCHER_DEFAULT_PATH, dashCase(options.name));
      console.log(newFetcherPath);
      expect(fs.existsSync(newFetcherPath)).toBeTruthy();
    });

    test('create-global-fetcher:check-for-imports-in-test-app-imports - create a fetcher in the test app and check if imports exist', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath, name: 'thirdExampleFetcher'};
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const testAppFetcherIndexPath = getPathToFetcherIndex(options.appDir);
      const testAppFetcherMetaPath = getPathToFetcherMeta(options.appDir);
      const testAppFetcherHookPath = getPathToFetcherHooks(options.appDir);

      const capatalizedFetcherName = capitalizeFirstLetter(options.name);
      validateImports(testAppFetcherIndexPath, options.name);
      validateImports(testAppFetcherMetaPath, options.name);
      validateImports(testAppFetcherHookPath, `use${capatalizedFetcherName}`);
    });

    test('create-global-fetcher:check-fetcher-content-in-test-app-content - create a fetcher in the test app and check the content', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath};
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const newfetcherPath = path.resolve(options.appDir, FETCHER_DEFAULT_PATH, dashCase(options.name));
      validateOutputFiles(expectedGlobalFetcherFiles, newfetcherPath);
    });

    test('create-global-fetcher:check-fetcher-folder-being-created - create a fetcher in the test app and that the fetcher folder is being created properly', async () => {
      const options = {...blankStoreOptions, appDir: testAppPath};

      const tempAppDirFetcherFolder = await createTestApp(options.appName);
      expect(tempAppDirFetcherFolder).toBeDefined();

      const testAppPathFetcherFolder = path.resolve(tempAppDirFetcherFolder.path, options.appName);
      const fetcherFolderPath = path.resolve(testAppPathFetcherFolder, FETCHER_DEFAULT_PATH);

      console.log(`testAppPathFetcherFolder folder: ${testAppPathFetcherFolder}`);
      console.log(`fetchers folder: ${fetcherFolderPath}`);

      expect(fs.existsSync(fetcherFolderPath)).toBeFalsy();

      options.appDir = testAppPathFetcherFolder;
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();

      expect(fs.existsSync(fetcherFolderPath)).toBeTruthy();
      tempAppDirFetcherFolder.cleanup();
    });
  });

  describe('create-for-component-fetcher:all  -  all the tests that will invoke create-fetcher with --forComponent option', () => {
    test('create-for-component-fetcher:list-template-files - check that all fetcher template files are present', () => {
      const fetcherTemplatesDirectory = path.resolve(
        path.relative('.', __dirname),
        '..',
        'fetcher',
        'template-files',
        'component-dependent'
      );
      const expectedFileList = ['hook.js', 'index.js', 'meta.js'];
      // only pass the path
      expect(discoverTemplateFiles(fetcherTemplatesDirectory).sort()).toMatchObject(expectedFileList.sort());
    });

    test('create-for-component-fetcher:create-an-already-existing-fetcher-blank-store - create a fetcher that already existing in an specific app', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'firstExampleFetcher',
        forComponent: 'HelloWorld'
      };

      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      await expect(createFetcher(options.appName, options)).rejects.toThrow(
        `Fetcher "${dashCase(options.name)}", already exists in path ${path.resolve(
          options.appDir,
          FETCHER_DEFAULT_PATH
        )}.`
      );
    });

    test('create-for-component-fetcher:create-a-fetcher-for-non-existing-component - create a fetcher for a non-existing-component', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'firstExampleFetcher',
        forComponent: 'NonExistingComponent'
      };

      await expect(createFetcher(options.appName, options)).rejects.toThrow(
        `Component "${dashCase(options.forComponent)}" does not exist in path ${path.resolve(
          testAppPath,
          WIDGET_DEFAULT_PATH
        )}`
      );
    });

    test('create-for-component-fetcher:create-a-fetcher-in-test-app-folder - create a fetcher in the test app check fetcher folder exist', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'secondExampleFetcher',
        forComponent: 'HelloWorld'
      };

      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const newFetcherPath = path.resolve(
        options.appDir,
        WIDGET_DEFAULT_PATH,
        dashCase(options.forComponent),
        'fetchers'
      );
      console.log(newFetcherPath);
      expect(fs.existsSync(newFetcherPath)).toBeTruthy();
    });

    test('create-for-component-fetcher:check-for-imports-in-test-app-imports - create a fetcher in the test app and check if imports exist', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        name: 'thirdExampleFetcher',
        forComponent: 'HelloWorld'
      };

      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const pathToComponent = path.join(options.appDir, WIDGET_DEFAULT_PATH, dashCase(options.forComponent));
      const testAppFetcherIndexPath = path.resolve(pathToComponent, 'fetchers', 'index.js');
      const testAppFetcherMetaPath = path.resolve(pathToComponent, 'fetchers', 'meta.js');
      const testAppFetcherHookPath = path.resolve(pathToComponent, 'fetchers', 'hooks.js');

      const capatalizedFetcherName = capitalizeFirstLetter(options.name);
      validateImports(testAppFetcherIndexPath, options.name);
      validateImports(testAppFetcherMetaPath, options.name);
      validateImports(testAppFetcherHookPath, `use${capatalizedFetcherName}`);
    });

    test('create-for-component-fetcher:check-fetcher-content-in-test-app-content - create a fetcher in the test app and check the content', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        forComponent: 'HelloWorld'
      };
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();
      const newfetcherPath = path.resolve(
        options.appDir,
        WIDGET_DEFAULT_PATH,
        dashCase(options.forComponent),
        'fetchers',
        dashCase(options.name)
      );
      validateOutputFiles(expectedForComponentFetcherFiles, newfetcherPath);
    });

    test('create-for-component-fetcher:check-fetcher-folder-being-created - create a fetcher in the test app and that the fetcher folder is being created properly', async () => {
      const options = {
        ...blankStoreOptions,
        appDir: testAppPath,
        forComponent: 'HelloWorld'
      };
      const tempAppDirFetcherFolder = await createTestApp(options.appName);
      expect(tempAppDirFetcherFolder).toBeDefined();

      const testAppPathFetcherFolder = path.resolve(tempAppDirFetcherFolder.path, options.appName);
      const fetcherFolderPath = path.resolve(
        testAppPathFetcherFolder,
        WIDGET_DEFAULT_PATH,
        dashCase(options.forComponent),
        'fetchers'
      );

      console.log(`testAppPathFetcherFolder folder: ${testAppPathFetcherFolder}`);
      console.log(`fetchers folder: ${fetcherFolderPath}`);

      expect(fs.existsSync(fetcherFolderPath)).toBeFalsy();

      options.appDir = testAppPathFetcherFolder;
      await expect(createFetcher(options.appName, options)).resolves.not.toThrow();

      expect(fs.existsSync(fetcherFolderPath)).toBeTruthy();
      tempAppDirFetcherFolder.cleanup();
    });
  });
});
