/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

const {
  subscriberIndexExportString,
  subscriberMetaExportString
} = require('@oracle-cx-commerce/cli/templates/subscriber/string-utils');

const logger = require('@oracle-cx-commerce/logger/cli');

const {
  SUBSCRIBER_DEFAULT_PATH,
  getPathToSubscriberIndex,
  getPathToSubscriberMeta,
  writeTemplateFiles,
  createOrUpdateImportsAndExports,
  generateTemplateFiles,
  verifyApp,
  validatePluginFolderExists,
  pluginExists,
  ensureDirectoryExists,
  standardizePluginName
} = require('@oracle-cx-commerce/cli/templates/utils');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: require('path').join(__dirname, './locales')});

/**
 * Adds an export and import reference at the end of an index.js or meta.js file
 *
 * @param      {Object}  options   The command line options including appDir and other widget specific options
 */
async function checkAndUpdateSubscriberExports(options) {
  const pathToSubscriberIndex = getPathToSubscriberIndex(options.appDir);
  const pathToSubscriberMeta = getPathToSubscriberMeta(options.appDir);

  logger.info(___`Updating exports for files:`);
  await createOrUpdateImportsAndExports(pathToSubscriberIndex, subscriberIndexExportString(options.name));
  await createOrUpdateImportsAndExports(pathToSubscriberMeta, subscriberMetaExportString(options.name));
  logger.info(`\t${pathToSubscriberIndex}`);
  logger.info(`\t${pathToSubscriberMeta}`);
}

/**
 * Create a subscriber from a template for a specific app in the workspace
 *
 * @param      {string}   appName           The app to create the subscriber for
 * @param      {Object}   options           The command line options including appDir and other widget specific options
 */
async function createSubscriber(appName, options) {
  // Validate/standardize plugin name
  options.name = standardizePluginName(options.name);

  // Verify app exists
  await verifyApp(appName, options.appDir);

  // Check if 'subscribers' folders exists, create if it does not.
  try {
    await validatePluginFolderExists(options.appDir, SUBSCRIBER_DEFAULT_PATH);
  } catch (err) {
    await ensureDirectoryExists(path.resolve(options.appDir, SUBSCRIBER_DEFAULT_PATH, `index.js`));
  }

  // Check if subscriber with the same name already exists
  if (await pluginExists(options.appDir, SUBSCRIBER_DEFAULT_PATH, `${dashCase(options.name)}`)) {
    throw new Error(
      ___`Subscriber "${dashCase(options.name)}", already exists in path ${path.resolve(
        options.appDir,
        SUBSCRIBER_DEFAULT_PATH
      )}.`
    );
  }

  // Log information about the subscriber to create
  logger.info(___`Creating subscriber: ${options.name}.`);
  logger.info(___`\tPath to Subscriber files: ${path.join(options.appDir, SUBSCRIBER_DEFAULT_PATH)}`);

  // Generate files content to be written
  const templatesDirectory = path.resolve(path.relative('.', __dirname), 'template-files');

  const filesToWrite = generateTemplateFiles(templatesDirectory, options);

  // Define destination for new subscriber
  const installPath = path.join(options.appDir, SUBSCRIBER_DEFAULT_PATH);
  const newSubscriberFolder = path.join(installPath, dashCase(options.name));
  logger.info(___`Creating new subscriber folder ${newSubscriberFolder}.`);

  // Write the files to the specified destination
  await writeTemplateFiles(newSubscriberFolder, filesToWrite);

  // Update Exports
  await checkAndUpdateSubscriberExports(options);
}

module.exports = {createSubscriber};
