/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const metaImport = `import {buildResources} from '@oracle-cx-commerce/resources/utils';
import {mergeDefaultConfig} from '@oracle-cx-commerce/react-widgets/config';
import * as resources from '../../../core/ui/locales';
import config from './config';\n`;

function metaLocaleKeys(templateOption) {
  const baseTemplateLocales = `const resourceKeys = ['helloText', 'labelExtraInfo', 'labelSampleTranslation'];`;
  const currencyTemplateLocales = `const resourceKeys = ['labelCurrencies', 'labelSelectACurrency', 'labelSelectedCurrency'];`;

  const metaLocalesKeyContentWithComments = `
/**
 * The list below declares which of the locale resources should be made available to the widget
 */
${templateOption && templateOption.toLowerCase() === 'currencyselector' ? currencyTemplateLocales : baseTemplateLocales}
`;

  return metaLocalesKeyContentWithComments;
}

const localeCommentedSuggestions = `
/**
 * Different examples on how to import a config object.
 */
// import config from './config';
// import defaultConfig from '@oracle-cx-commerce/react-widgets/config';
// import {mergeDefaultConfig} from '@oracle-cx-commerce/react-widgets/config';
`;

function localeExport(widgetName, userName) {
  return `
/**
 * Metadata for the widget.
 */
export default {
  name: '${widgetName}',
  decription: 'Description of widget ${widgetName}',
  author: '${userName}',
  fetchers: [],
  actions: [],
  /**
   * Include references to all of our resource strings in all supported locales.
   * This will enable the component to access any resource string via its props,
   * using the locale that is currently in effect.
   */
  resources: buildResources(resources, resourceKeys),
  /**
   *  Specify configuration properties for use in Design Studio.
   */
  config: mergeDefaultConfig(config)
};
`;
}

module.exports = options => {
  let content = metaImport;
  content += metaLocaleKeys(options.template);

  // content += options.minimal ? '' : localeCommentedSuggestions;
  content += localeCommentedSuggestions;

  content += localeExport(options.widgetName, options.userName);

  return [
    {
      fileName: 'meta.js',
      relativePath: '',
      content
    }
  ];
};
