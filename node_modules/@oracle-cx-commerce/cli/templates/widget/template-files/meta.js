/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const metaImport = `import {mergeDefaultConfig} from '@oracle-cx-commerce/react-widgets/config';
import config from './config';
`;

function metaLocaleImport(options) {
  let localeImportContent = '';
  for (const locale of options.localesList) {
    localeImportContent += `import * as ${locale} from './locales/${locale}';\n`;
  }

  return localeImportContent;
}

const localeCommentedSuggestions = `
/**
 * Different examples on how to import a config object.
 */
// import config from './config';
// import defaultConfig from '@oracle-cx-commerce/react-widgets/config';
// import {mergeDefaultConfig} from '@oracle-cx-commerce/react-widgets/config';
`;

function localeExport(localesList, widgetName, userName) {
  return `
/**
 * Metadata for the widget.
 */
export default {
  name: '${widgetName}',
  decription: 'Description of widget ${widgetName}',
  author: '${userName}',
  fetchers: [],
  actions: [],
  /**
   * Include references to all of our resource strings in all supported locales.
   * This will enable the component to access any resource string via its props,
   * using the locale that is currently in effect.
   */
  resources: {
    ${localesList.join(',\n    ')}
  },
  /**
   *  Specify configuration properties for use in Design Studio.
   */
  config: mergeDefaultConfig(config)
};
`;
}

module.exports = options => {
  let content = metaImport;
  content += metaLocaleImport(options);

  // content += options.minimal ? '' : localeCommentedSuggestions;
  content += localeCommentedSuggestions;

  content += localeExport(options.localesList, options.widgetName, options.userName);

  return [
    {
      fileName: 'meta.js',
      relativePath: '',
      content
    }
  ];
};
