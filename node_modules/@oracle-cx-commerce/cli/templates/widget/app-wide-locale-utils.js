/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const fse = require('fs-extra');
const path = require('path');
const logger = require('@oracle-cx-commerce/logger/cli');

const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: require('path').join(__dirname, './locales')});

function wrapLocaleWithLocaleTag(localeString, locale) {
  const localeTag = locale === 'en' ? '' : `[${locale}]`;

  return `${localeTag}${localeString}${localeTag}`;
}

/**
 * Given an array of locales, template an index.js file containing imports and exports
 * for each of the required locales to be placed in {appDir}/src/core/ui/locales.
 * @param {Array} localesOptions  An array of locales read from the occ.locales property of {appDir}/package.json
 * @returns {String}              Template of the content to write.
 */
const localesIndexContent = (localesOptions, appPackageName) => {
  let content = `/* eslint-env node */\n/* eslint-disable camelcase */\n`;

  content += `
// NOTICE: For locales that include a hyphen, such as pt-BR, variable names must use an underscore instead of the hyphen. e.g.:
// const pt_BR = require('${appPackageName}/src/core/ui/locales/pt-BR.json');
`;

  content += `
/**
 * NOTICE: The import statements for app locales must include full (not relative) path to each locale file.
 */
`;

  for (const locale of localesOptions) {
    content += `const ${locale.replace('-', '_')} = require('${appPackageName}/src/core/ui/locales/${locale}.json');\n`;
  }

  const localeExports = localesOptions.map(locale => locale.replace('-', '_'));
  content += `\nexport {${localeExports.join(', ')}};\n`;

  return content;
};

/**
 * Return an object containing all the locales required for create-widget templates, wrapped in the desired local tag
 * @param {String} locale
 * @returns {Object}
 */
const templateLocaleKeys = locale => {
  return {
    helloText: wrapLocaleWithLocaleTag('sample component text', locale),
    labelExtraInfo: wrapLocaleWithLocaleTag('...with some extra info!', locale),
    labelSampleTranslation: wrapLocaleWithLocaleTag('A Translated Label', locale),
    labelCurrencies: wrapLocaleWithLocaleTag('Currencies:', locale),
    labelSelectACurrency: wrapLocaleWithLocaleTag('Select a currency...', locale),
    labelSelectedCurrency: wrapLocaleWithLocaleTag('Selected Currency:', locale),
    includeExtraInfoLabel: wrapLocaleWithLocaleTag('Display extra info', locale),
    // eslint-disable-next-line prettier/prettier
    includeExtraInfoHelpText: wrapLocaleWithLocaleTag('If selected, the display will include some extra info.', locale)
  };
};

/**
 * Given a path to a locale file, attempt to read the locale file and verify the content
 * to be a valid JSON object.
 * Throws an error if content of file is not a valid JSON object.
 * @param {String} pathToLocaleFile
 * @returns {Object}  parsed content of the locale file
 */
function readLocaleFile(pathToLocaleFile) {
  const localeData = fse.readFileSync(pathToLocaleFile, 'utf8');
  try {
    return JSON.parse(localeData);
  } catch (err) {
    throw new Error(
      ___`Failed to parse locale file ${pathToLocaleFile} due to the file containing an invalid JSON. Please fix ${pathToLocaleFile} to be a valid JSON file and rerun the command.`
    );
  }
}

/**
 * Given a path to locale index.js file, reads the file and checks that each locale
 * specified in 'localeList' are being imported in index.js by reading the file
 * and parsing each line to match an expected 'require' string.
 *
 * Alerts the user via a logger.warn statement in the case of a missing locale import.
 * @param {*} pathToLocaleIndex   Path to index.js file of {appDir}/src/core/ui/locales/index.js
 * @param {*} localeList          An array of locales read from the occ.locales property of {appDir}/package.json
 */
function isLocaleImportPresent(pathToLocaleIndex, localeList, appPackageName) {
  const localeIndexContent = fse.readFileSync(pathToLocaleIndex, 'utf8');
  localeList.forEach(locale => {
    const appWideLocaleImportToFind = `require('${appPackageName}/src/core/ui/locales/${locale}.json')`;
    const importStatementToAdd = `const ${locale.replace('-', '_')} = ${appWideLocaleImportToFind};`;

    let appWideLocaleImportPresent = false;

    for (const line of localeIndexContent.split('\n')) {
      if (appWideLocaleImportPresent) break;

      if (line.includes(appWideLocaleImportToFind)) appWideLocaleImportPresent = true;
    }

    !appWideLocaleImportPresent &&
      logger.warn(
        ___`Detected a missing import for locale '${locale}', please add the following import statement:\n${importStatementToAdd}\n to ${pathToLocaleIndex}.`
      );
  });
}

/**
 * Given a path to locale index.js file, requires the file and checks that locales
 * specified in 'localeList' are being exported by the index.js file.
 * @param {*} pathToLocaleIndex Path to index.js file of {appDir}/src/core/ui/locales/index.js
 * @param {*} localeList        An array of locales read from the occ.locales property of {appDir}/package.json
 */
function isLocaleExportsPresent(pathToLocaleIndex, localeList) {
  const localeIndexContent = fse.readFileSync(pathToLocaleIndex, 'utf8');
  const linesContainingExport = [];
  // read the file line by line and attempt to find 'export' mentions
  for (const line of localeIndexContent.split('\n')) {
    if (line.includes('export')) linesContainingExport.push(line);
  }

  // for each locale, find a reference to the locale in the export statement found above
  localeList.forEach(locale => {
    let localeExportFound = false;
    for (const line of linesContainingExport) {
      if (line.includes(locale.replace('-', '_'))) {
        localeExportFound = true;
        break;
      }
    }

    !localeExportFound &&
      logger.warn(
        // eslint-disable-next-line prettier/prettier
        ___`Missing locale "${locale}" export in ${pathToLocaleIndex}. Please add an export for "${locale.replace('-','_')}".`
      );
  });
}

/**
 * Updates/writes locale files located at {appDir}/src/core/ui/locales/{locale} and alerts the user for required action based on the following criteria:
 * - {appDir}/src/core/ui/locales/index.js must have for proper imports/exports based on 'localeList' (localeList pulled from app's package.json)
 * - each resource locale entry in  {appDir}/src/core/ui/locales/{resource}.json must include the key:value pairs specified in 'templateLocaleKeys'
 * @param {*} appDir      Path to the app directory
 * @param {*} localeList  An array of locales read from the occ.locales property of {appDir}/package.json
 */
function updateAppLocales(appDir, localeList, appPackageName) {
  // check if app-wide locales exist
  const pathToLocalesFolder = path.join(appDir, 'src', 'core', 'ui', 'locales');
  fse.ensureDirSync(pathToLocalesFolder);

  /**
   * Check if {app-dir}/src/core/ui/locales/index.js exists.
   * - If exists, CHECK that all required locale IMPORTS and EXPORTS exist
   * - If does NOT exists, template and WRITE file with the required imports and exports
   */
  const pathToLocaleIndexFile = path.join(pathToLocalesFolder, 'index.js');
  const localeIndexExist = fse.existsSync(pathToLocaleIndexFile);
  if (localeIndexExist) {
    logger.verbose(`${pathToLocaleIndexFile} is present, validating that all locales are being imported properly.`);
    isLocaleImportPresent(pathToLocaleIndexFile, localeList, appPackageName);
    logger.verbose(`${pathToLocaleIndexFile} is present, validating that all locales exports are present.`);
    isLocaleExportsPresent(pathToLocaleIndexFile, localeList);
  } else {
    try {
      fse.outputFileSync(pathToLocaleIndexFile, localesIndexContent(localeList, appPackageName));
      logger.info(___`Writing an app-wide locale file ${pathToLocaleIndexFile}`);
    } catch (error) {
      throw new Error(
        ___`Error occured during attempt to write file ${pathToLocaleIndexFile} required for widget creation.\n${error}`
      );
    }
  }

  /**
   * Write/Update each locale file in {app-dir}/src/core/ui/locales/{locale}.json
   */
  localeList.forEach(locale => {
    // console.log(`inside localeList loop`);
    const localesToAdd = templateLocaleKeys(locale);

    const pathToLocaleFile = path.join(pathToLocalesFolder, `${locale}.json`);

    if (fse.existsSync(pathToLocaleFile)) {
      // Locale file exists, read the locale file, verify it's a valid JSON object and add the locale keys if not present in the file already
      logger.verbose(
        ___`${pathToLocaleFile} is present in the locale folder, check if it contains the required locale keys.`
      );
      const localeFileData = readLocaleFile(pathToLocaleFile);
      const intialLocaleKeyCount = Object.keys(localeFileData).length;
      Object.keys(localesToAdd).forEach(localeKey => {
        if (!localeFileData[localeKey]) {
          logger.verbose(___`locale ${localeKey} is not present for locale "${locale}", adding it to locale file.`);
          localeFileData[localeKey] = localesToAdd[localeKey];
        }
      });

      const postIterationLocaleKeyCount = Object.keys(localeFileData).length;
      // need to write the file
      if (postIterationLocaleKeyCount > intialLocaleKeyCount) {
        logger.info(___`Updating locale file ${pathToLocaleFile} with additional locale entries.`);
        fse.outputFileSync(pathToLocaleFile, JSON.stringify(localeFileData, null, 2));
      }
    } else {
      // Locale file does not exists, write the file with all the required keys obtain from 'templateLocaleKeys'
      logger.verbose(
        ___`${pathToLocaleFile} is not found in the app locale folder, writing a template file for locale "${locale}".`
      );
      try {
        fse.outputFileSync(pathToLocaleFile, JSON.stringify(localesToAdd, null, 2));
        logger.info(___`Writing a new locale file ${pathToLocaleFile} with default locale entries.`);
      } catch (error) {
        throw new Error(
          ___`Error occured during attempt to write file ${pathToLocaleFile} required for widget creation.\n${error}`
        );
      }
    }
  });
}

module.exports = {
  readLocaleFile,
  templateLocaleKeys,
  wrapLocaleWithLocaleTag,
  localesIndexContent,
  isLocaleImportPresent,
  isLocaleExportsPresent,
  updateAppLocales
};
