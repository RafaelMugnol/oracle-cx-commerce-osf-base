/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const {camelCase} = require('@oracle-cx-commerce/tools-util/strings');

function testImport(operationId) {
  return `import ${camelCase(operationId)}Endpoint from '../index';\n`;
}

function testBody(operationId, url) {
  return `
const endpointConfigState = {
  configRepository: {
    endpoints: {
      '${operationId}': {
        url: '${url}',
        method: ''
      }
    }
  }
};
const ${camelCase(operationId)}Payload = {};
test('${operationId} endpoint.getRequest() with valid payload gives a proper request', async () => {
  const payload = {
    ...${camelCase(operationId)}Payload
  };
  const request = await ${camelCase(operationId)}Endpoint.getRequest(payload, endpointConfigState);
  expect(request.url).toBe('${url}');
  expect(request.method).toBe('GET');
});

test('${operationId} with valid payload returns response populated with repository structure', async () => {
  const body = {};

  const response = new Response(JSON.stringify(body), {
    status: 200,
    url: '${url}'
  });

  const endpointResponse = ${camelCase(operationId)}Endpoint.getResponse(response, endpointConfigState, {});
  expect(endpointResponse.status).toBe(200);
  expect(endpointResponse.url).toBe('${url}');
  const json = await endpointResponse.getJson();

  expect(json).toEqual({
    json: {}
  });
});

test('${operationId} with no response returns empty object', async () => {
  const body = {};

  const response = new Response(JSON.stringify(body), {
    status: 200,
    url: '${url}'
  });

  const endpointResponse = ${camelCase(operationId)}Endpoint.getResponse(response, {}, {});
  expect(endpointResponse.status).toBe(200);
  expect(endpointResponse.url).toBe('${url}');
  const json = await endpointResponse.getJson();
  expect(json).toEqual({
    json: {}
  });
});

test('${operationId} with invalid payload return error', async () => {
  const payload = {};
  const body = {
    errorCode: '',
    message: 'Test message'
  };

  const response = new Response(JSON.stringify(body), {
    status: 500,
    url: '${url}'
  });

  const endpointResponse = ${camelCase(operationId)}Endpoint.getResponse(response, {}, payload);
  const json = await endpointResponse.getJson();
  expect(json).toEqual({
    error: {
      ...body,
      status: 500
    }
  });
});
`;
}

module.exports = options => {
  let content = '';
  if (options.swagger) {
    content += testImport(options.operationId);
    content += testBody(options.operationId, options.swaggerDocumentConfigs.host);

    return [
      {
        fileName: 'index.spec.js',
        relativePath: '__test__',
        content
      }
    ];
  }

  return [];
};
