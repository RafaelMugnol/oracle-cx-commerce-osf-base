/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {ENDPOINT_DEFAULT_PATH} = require('@oracle-cx-commerce/cli/templates/utils');
const {dashCase} = require('@oracle-cx-commerce/tools-util/strings');

function swaggerMetaExport(operationID, userName, description, directoryNamePath, packageName) {
  const endpointPluginAbsolutePath = `${packageName}/${ENDPOINT_DEFAULT_PATH}/${directoryNamePath}/${dashCase(
    operationID
  )}`;

  return `export default {
  name: '${operationID}',
  description: '${description}',
  author: '${userName}',
  // Add comment: 'Documentation link for underlying rest endpoint'
  serviceurl: '',
  // The path to Json schema representing the request Json structure and the example of payload.
  input: '${endpointPluginAbsolutePath}/schema/input.json',
  // The json schema represents the redux states changes that will occur due to this reducer.
  // The json schema is expected to contain the state definition and an example.
  output: '${endpointPluginAbsolutePath}/schema/output.json',
  packageId: ''
};
`;
}

function metaExport(directoryName, userName, packageName) {
  const endpointPluginAbsolutePath = `${packageName}/${ENDPOINT_DEFAULT_PATH}/${directoryName}`;

  return `export default {
  name: '${directoryName}',
  description: 'Description for ${directoryName}',
  author: '${userName}',
  // Add comment: 'Documentation link for underlying rest endpoint'
  serviceurl: '',
  // The path to Json schema representing the request Json structure and the example of payload.
  input: '${endpointPluginAbsolutePath}/schema/input.json',
  // The json schema represents the redux states changes that will occur due to this reducer.
  // The json schema is expected to contain the state definition and an example.
  output: '${endpointPluginAbsolutePath}/schema/output.json',
  packageId: ''
};
`;
}
// eslint-disable-next-line no-unused-vars
module.exports = options => {
  let content = '';
  content += options.swagger
    ? swaggerMetaExport(
        options.operationId,
        options.userName,
        options.description,
        options.directoryNamePath,
        options.packageName
      )
    : metaExport(options.directoryName, options.userName, options.packageName);

  return [
    {
      fileName: 'meta.js',
      relativePath: ``,
      content
    }
  ];
};
