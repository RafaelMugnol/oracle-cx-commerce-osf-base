/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const sagaImport = `import {all, put, select} from 'redux-saga/effects';
import {endpointSaga, takeEvery} from '@oracle-cx-commerce/store/utils';\n`;
const reducerimport = `import {combineReducers, createReducer} from '@oracle-cx-commerce/store/utils';`;

function reducerActionBody(actionName) {
  return `
/**
 * This is a contrived example of a reducer. It copies a value
 * from the action payload into a location in the application state.
 * The destination location is partially specified here and also in
 * the "reducer" property of this module's default export (see below).
 */

/**
 * Reducer that updates the application state. To run the reducer, please add a --reducer flag.
 * For example, yarn occ create-action --action-name getCurrency --endpoint _getCurrency --reducer.
 */
const ${actionName}Reducer = (state, {payload = {}}) => {
  return {
    ...state,
    myProperty: payload.repositoryId
  };
};
`;
}

function reducerExport(actionName) {
  return `/**
 * The ${actionName} action.
 *
 * This exports an object with a "reducer" property specifying a set of reducer to
 * be associated with the action. Run API the first time the action is dispatched
 * via the store API.
 */
export default {
  reducer: combineReducers({
    myRepository: combineReducers({
      myTable: createReducer({
        ${actionName}: ${actionName}Reducer
      })
    })
  })
};
`;
}

const actionBodyComments = `
/**
 * Saga that updates the application state. The code runs saga when the reducer flag is not supplied.
 * There are three options to consider:
 * 1. Create a custom action by default
 *    example: yarn occ create-action —-action-name getCurrency
 * 2. Create a custom action which invokes an endpoint with the same name as the action-name
 *    example: yarn occ create-action —-action-name getCurrency —-endpoint
 * 3. Create a custom action which invokes an endpoint with a different name as the action-name
 *    example: yarn occ create-action —-action-name testCurrency —-endpoint getCurrency
 */
`;

function actionBody(actionName, endpoint) {
  if (endpoint === true) {
    return '';
  }

  if (endpoint === undefined) {
    return `
function ${actionName}Saga(action) {
  // Place to implement what the action will do
  console.warn('Action: ${actionName} have been invoked. No further action.');
}
`;
  }

  // function to trigger an endpoint with an Id different than action name
  return `
function* ${actionName}Saga(action) {
  const response = yield endpointSaga({action, payload: action.payload, endpointId: '${endpoint}'});

  return response;
}
`;
}

function sagaExportComments(actionName) {
  return `
/**
 * The ${actionName} action.
 *
 * This exports a generator function named "saga", whose presence signals OSF to pass
 * the generator function to Redux-Saga's middleware. Run API the first time the action
 * is dispatched via the store API.
 *
 * The generator function results in an asynchronous endpoint invocation
 * when the action is dispatched.
 */`;
}

function sagaExport(actionName, endpoint) {
  return `
export default {
  *saga() {
    yield takeEvery('${actionName}', ${endpoint === true ? 'endpointSaga' : `${actionName}Saga`});
  }
};
`;
}

module.exports = options => {
  let content = '';
  if (options.reducer) {
    content += reducerimport;
    content += reducerActionBody(options.actionName);
    content += reducerExport(options.actionName);
  } else {
    content += sagaImport;
    content += actionBodyComments;
    content += actionBody(options.actionName, options.endpoint);
    content += sagaExportComments(options.actionName);
    content += sagaExport(options.actionName, options.endpoint);
  }

  return [
    {
      fileName: 'index.js',
      relativePath: '',
      content
    }
  ];
};
