#!/usr/bin/env node

/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
/* eslint max-lines: ['error', {max: 1000, skipBlankLines: true, skipComments: true}] */

const program = require('commander');
const {overrideConsoleLog, changeLogLevel, serverLogger, cliLogger} = require('@oracle-cx-commerce/logger');

let logger = cliLogger;
overrideConsoleLog(logger);
const {loadWorkspaceConfig} = require('@oracle-cx-commerce/cli-shared');
const {getProgramConfiguration, promptConfirmPublish, promptAppKey, validateConfiguration} =
  require('@oracle-cx-commerce/cli-shared').cliHelperMethods;
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: require('path').join(__dirname, './locales')});
const fetch = require('@oracle-cx-commerce/http-client');

const {
  createWidget,
  createFetcher,
  createAction,
  createEndpoint,
  createSelector,
  listEndpoints,
  createSubscriber
} = require('@oracle-cx-commerce/cli/templates');

const {
  deploy,
  getStatus,
  deleteApp,
  deployOutput,
  serve,
  createTemplate,
  build,
  download,
  configure,
  configureApp,
  getLogs,
  redeploy,
  downloadAssets,
  uploadSearchConfig,
  uploadCustomTypeaheadKeywords,
  setLoggingOptions,
  upgrade,
  createApp,
  listApplications,
  showVersions
} = require('./actions');
const {version} = require('./package.json');
const {getOCCRegistry, occServerSatisfiesMinVersion, getOCCVersion} = require('./utils');

/*
 * Builds the array of all --tag options, or any other option that can have multiple
 * values passed in.
 */
function aggregate(val, existing) {
  existing.push(val);

  return existing;
}

const processActionError = async error => {
  await printVersion();
  logger.error(error.stack);
  // If logging to a file or in production mode, give a second for the logs to flush
  if (process.env.LOG_DIRECTORY) {
    setTimeout(process.exit, 2000, 1);
  } else {
    process.exit(1);
  }
};

let occUrl;

/**
 * Prints the OSF version and prompts users to upgrade if their OCC version allows it
 */
async function printVersion() {
  process.removeListener('beforeExit', printVersion);
  // Print out the current CLI version
  try {
    logger.info(`OSF v${version}`);
    // Resolve the registry
    const registry = await getOCCRegistry();
    logger.verbose(___`You are using @oracle-cx-commerce registry ${registry}`);
    // Fetch and print out the latest CLI version
    // Disable the request logging for this request in case it fails - in this case it's not particularly helpful, and would likely only distract from other errors
    const requestLogDisabled = process.env.DISABLE_REQUEST_LOG;
    process.env.DISABLE_REQUEST_LOG = true;
    try {
      const response = await fetch(`${registry}@oracle-cx-commerce/occ-metadata`);
      const data = await response.json();
      const latestVersion = data['dist-tags'].latest;
      const reqOccVersion = data.versions[latestVersion].occ.minVersion;
      if (version !== latestVersion) {
        logger.info(___`Latest available version of OSF is v${latestVersion}`);
        // If occUrl is defined, only prompt to upgrade if their OCC server allows it
        if (occUrl) {
          const occVersion = await getOCCVersion({appServerURL: occUrl});
          if (!occServerSatisfiesMinVersion(occVersion, reqOccVersion)) {
            // You aren't able to upgrade due to OCC version
            logger.info(___`Your OCC server (${occUrl}) needs to be updated to use the latest OSF version.`);
            logger.info(
              ___`It's currently v${occVersion}, but needs to be at least v${reqOccVersion} to use OSF v${latestVersion}.`
            );

            return;
          }
        }
        logger.info(___`You may use 'yarn occ upgrade' to upgrade OSF versions in your workspace`);
      }
    } catch (error) {
      logger.warn(___`Unable to determine latest CLI version on registry, or OCC version: ${error.message}`);
    } finally {
      process.env.DISABLE_REQUEST_LOG = requestLogDisabled;
    }
  } catch (error) {
    logger.warn(___`Unable to compare current CLI version to latest version: ${error.message}`);
  }
}

const preAction = async (appName, cliOptions) => {
  // Choose the correct logger if we are running occ serve
  if (cliOptions._name === 'serve') {
    logger = serverLogger;
    overrideConsoleLog(logger);
  }
  cliOptions = getProgramConfiguration(cliOptions);
  await promptAppKey(cliOptions);

  cliOptions.publishAll = await promptConfirmPublish(cliOptions);

  const options = loadWorkspaceConfig(appName, cliOptions);
  occUrl = options.appServerAdmin || options.appServer;
  if (options.verbose) {
    changeLogLevel(logger, 'debug');
  }

  //if an localDevAppName option is specified and it's a string, use it.
  //note it is a boolean (localDevAppName=false) when --no-localDevAppName is
  //specified
  if (
    options._occActionOptions.includes('localDevAppName') &&
    options.localDevAppName !== undefined &&
    typeof options.localDevAppName === 'string'
  ) {
    logger.info(
      ___`The local development application name (${options.localDevAppName}) will be used for application ${options.appName}.`
    );
    //change the app name to the alternate
    options.localDevApp = true;
    options.localDevAppName = options.localDevAppName.toLowerCase();
    options.originAppName = options.appName;
    options.appName = options.localDevAppName;
  }
  //add a function to return the original app name based on localDevApp
  options.getOriginAppName = () => {
    return options.localDevApp ? options.originAppName : options.appName;
  };

  if (!validateConfiguration(options, [...options._occActionOptions, ...options._occArgOptions])) {
    throw new Error(
      ___`Errors in configuration have occurred. Resolve the reported errors to continue. Use yarn configure to set a new value or override it on the command line. Also check for environment variable configuration overrides for the reported values.`
    );
  }

  // Defines the hostname of the server from which the app should get assets, which is either Live or Preview.
  options.appServerURL = options.live ? options.appServer : options.appServerAdmin;

  if (options.publish) {
    // Ensure OCC Server Version is greater than or equal to 21.2.4 to avoid DS selective publishing issue
    logger.verbose(___`Attempting to get OCC server version to determine selective publish compatibility.`);
    const occVersion = await getOCCVersion(options);
    if (!(await occServerSatisfiesMinVersion(occVersion, '21.2.4'))) {
      throw new Error(
        ___`Cannot run selective publishing (--publish) against OCC server version (${occVersion}) less than the minimum required version (21.2.4). You may instead publish all items with --publishAll.`
      );
    }
  }

  // output the config to the log.
  const str = JSON.stringify(options, (key, val) => (key === 'serverConfig' ? undefined : val), 2); // spacing level = 2
  logger.verbose(___`Configuration options ${str}`);

  return options;
};

/*
 * Create a cli program runner for a given action
 */
const run = action => async (appName, cliOptions) => {
  try {
    const options = await preAction(appName, cliOptions);
    await action(options.appName, options);
  } catch (error) {
    processActionError(error);
  }
};
// The live option
function addLiveOption() {
  return this.option('-L, --live', ___`Operate in the live context.`).option(
    '--no-live',
    ___`Operate in the preview context. This is the default behavior.`
  );
}
addLiveOption.bind(program);
// The publish option
function addPublishOption() {
  this.option('-p, --publish', ___`With this option, any changes from the deploy/delete will be published.`);
  this.option(
    '--publishAll [confirm]',
    ___`With this option, all changes in the publishing queue will be published. You will be prompted to confirm this option. Optionally, the prompt can be bypassed by specifying 'Y'`
  );

  return this;
}
addPublishOption.bind(program);
// The list option
function addListOption() {
  return this.option('-l, --list', ___`Displays the current configuration settings`);
}
addListOption.bind(program);
// The cluster option
function addClusterOption() {
  return this.option(
    '-c, --cluster [clusterId]',
    ___`Return a cluster specific result. Provide a clusterId to change which cluster is targeted.`
  );
}
addClusterOption.bind(program);

// The json option
function addJsonOption() {
  return this.option('-j, --json', ___`Output the results as raw JSON instead of formatted text.`);
}
addJsonOption.bind(program);
function addDeploymentOption() {
  return this.option('-d, --deployment <deployId>', ___`Query information for a specific deployment`);
}
addDeploymentOption.bind(program);
function addDsAssetModeOption() {
  return this.option(
    '-m, --dsAssetMode <mode>',
    ___`Sets the rendering mode for design studio assets ("local" | "remote").`
  );
}
addDsAssetModeOption.bind(program);

// These functions are used for added common options to all the commands
function addCommonOccServerOptions() {
  return this.option(
    '-k, --appKey [key]',
    ___`With this option you will be prompted for an application key (OAuth access token)`
  )
    .option('-s, --appServer <url>', ___`Application server URL`)
    .option('-a, --appServerAdmin <url>', ___`Application admin server URL`)
    .option('-e, --serverEnv <env>', ___`Cloud Commerce server environment to use`);
}
addCommonOccServerOptions.bind(program);

function addCommonHttpServerOptions() {
  return this.option('--httpHost <host>', ___`Presentation server hostname (http)`)
    .option('--httpPort <port>', ___`Presentation server port (http)`)
    .option('--httpsHost <host>', ___`Presentation server hostname (https)`)
    .option('--httpsPort <port>', ___`Presentation server port (https)`)
    .option('--sslKey <path>', ___`The path to the ssl key file used for https.`)
    .option('--sslCert <path>', ___`The path to the ssl cert file used for https.`);
}
addCommonHttpServerOptions.bind(program);

function addCommonOptions() {
  return this.version(version)
    .option('-v, --verbose', ___`Provides verbose logging where available`)
    .option('--no-verbose', ___`Disables verbose logging`);
}
addCommonOptions.bind(program);

function addLocalDevAppNameOption() {
  return this.option(
    '--localDevAppName <appName>',
    ___`Specify a local development application name to use in the context of this workspace when doing application specific operations such as occ deploy, occ start, etc. This is useful when multiple developers are working on the same application, sharing an OCC instance, and want to isolate their OCC asset changes. Each local dev app name will appear as a separate application in Design Studio. Note that when an application is deployed using a local app name, it will not be installed in the preview or live sandboxes. Developers must launch a local server using dsAssetMode=remote to serve assets from Design Studio.`
  ).option('--no-localDevAppName', ___`Ignore the local development application name configured for the application.`);
}
addLocalDevAppNameOption.bind(program);

function addDeploymentOptions() {
  return this.option('--deployType <type>', ___`The type of deployment to do (e.g. 'full')`)
    .option(
      '--ignore <glob>',
      ___`Path-like (e.g. '*.log') matching files to exclude from the deployment/accelerator zip`,
      aggregate,
      []
    )
    .option(
      '--include <glob>',
      ___`Path-like (e.g. '*.md') matching files to include in the deployment/accelerator zip`,
      aggregate,
      []
    );
}
addDeploymentOptions.bind(program);

// The debugMode option
function addDebugModeOption() {
  return this.option(
    '--debugMode',
    ___`Turn on development/debug mode on the given cluster. When used with redeploy, this implies '--force' to pick up the logging change. THIS WILL SLOW PERFORMANCE FOR MORE LOGGING.`
  ).option(
    '--no-debugMode',
    ___`Turn off development/debug mode on the given cluster. When used with redeploy, this implies '--force' to pick up the logging change.`
  );
}
addDebugModeOption.bind(program);

function addBackupOption() {
  return this.option(
    '--backup',
    ___`Back up assets related to the app before doing a 'reset' deployment. True by default.`
  ).option('--no-backup', ___`Do not download existing preview assets and create a backup before 'reset' deploys`);
}
addBackupOption.bind(program);

Object.getPrototypeOf(program).addCommonOptions = addCommonOptions;
Object.getPrototypeOf(program).addCommonOccServerOptions = addCommonOccServerOptions;
Object.getPrototypeOf(program).addCommonHttpServerOptions = addCommonHttpServerOptions;
Object.getPrototypeOf(program).addDeploymentOptions = addDeploymentOptions;
Object.getPrototypeOf(program).addPublishOption = addPublishOption;
Object.getPrototypeOf(program).addLiveOption = addLiveOption;
Object.getPrototypeOf(program).addLocalDevAppNameOption = addLocalDevAppNameOption;
Object.getPrototypeOf(program).addDebugModeOption = addDebugModeOption;
Object.getPrototypeOf(program).addListOption = addListOption;
Object.getPrototypeOf(program).addClusterOption = addClusterOption;
Object.getPrototypeOf(program).addJsonOption = addJsonOption;
Object.getPrototypeOf(program).addDeploymentOption = addDeploymentOption;
Object.getPrototypeOf(program).addDsAssetModeOption = addDsAssetModeOption;
Object.getPrototypeOf(program).addDebugModeOption = addDebugModeOption;
Object.getPrototypeOf(program).addBackupOption = addBackupOption;

// Store option values separately and access them using .opts(), instead of storing them as properties on the command object.
program.storeOptionsAsProperties(false);

/*
 * Create the cli program
 */

// Configure
program
  .command('configure')
  .addCommonOptions()
  .addLiveOption()
  .option('-n, --appName <name>', ___`The application name to use as the default.`)
  .addDsAssetModeOption()
  .option(
    '--userName <name>',
    ___`Sets the user name for any actions done from this workspace. Defaults to the OS username.`
  )
  .option('--appContext <context>', ___`The appContext to use as the default.`)
  .addCommonOccServerOptions()
  .addCommonHttpServerOptions()
  .addListOption()
  .description(___`Updates workspace configuration.`)
  .addBackupOption()
  .on('--help', function () {
    console.log();
    console.log(___`Description:`);
    console.log(___`  This command updates the workspace's configuration values.`);
    console.log();
    console.log(___`  One or more of the options can be specified. Previously set values are preserved.`);
    console.log();
    console.log(___`  Note that the serverEnv option has no affect on this command.`);
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ configure --appName blank-store --appServerAdmin http://someserver.oracle.com:9080 --appKey');
    console.log('  $ occ configure --httpPort 5050 --httpsPort 5051');
    console.log('  $ occ configure --list');
  })
  .action(async options => {
    try {
      options = getProgramConfiguration(options);
      changeLogLevel(logger, options.verbose && 'debug');
      await promptAppKey(options);
      if (!validateConfiguration(options, [...options._occSelectedOptions])) {
        throw new Error(___`Errors in configuration have occurred. Resolve the reported errors to continue.`);
      }

      configure(options);
    } catch (error) {
      processActionError(error);
    }
  });

program
  .command('configure-app [appName]')
  .addLocalDevAppNameOption()
  .addListOption()
  .description(___`Updates application configuration.`)
  .on('--help', function () {
    console.log();
    console.log(___`Description:`);
    console.log(___`  This command updates the application's configuration values.`);
    console.log(___`  Note that the serverEnv option has no affect on this command.`);
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ configure-app --localDevAppName marcus-app');
    console.log('  $ occ configure-app --list');
  })
  .action(async (appName, options) => {
    try {
      // Question: can we potentially use yarn occ configure-app as the tool to "debug" app-config?
      // It loads the appConfig as part of lines 432  and 439,  which also causes the following log
      // statement to be printed twice,
      // [cli] info: Successfully loaded appcontext 'development' configurations onto app-config.
      options = getProgramConfiguration(options);
      if (!validateConfiguration(options, [...options._occSelectedOptions])) {
        throw new Error(___`Errors in configuration have occurred. Resolve the reported errors to continue.`);
      }
      changeLogLevel(logger, options.verbose && 'debug');
      const workspaceConfig = loadWorkspaceConfig(appName);
      appName = appName || workspaceConfig.appName;
      configureApp(appName, options);
    } catch (error) {
      processActionError(error);
    }
  });

// Build
program
  .command('build [appName]')
  .addCommonOptions()
  .description(___`Build an occ application.`)
  .option('--legacy', ___`Generate legacy client code when building in development mode.`)
  .option('-p, --production', ___`Build an occ application in production mode.`)
  .option('-w, --watch', ___`Watch for changes when building in development mode.`)
  .action(run(build));

// Deploy
program
  .command('deploy [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addDeploymentOptions()
  .addLocalDevAppNameOption()
  .option(
    '--replaceApp <appName>',
    ___`When specified the application being deployed will replace this application in the hosted sandbox`
  )
  .option(
    '--zipFile [zip file location]',
    ___`Deploy a specific zip file. The app name used to deploy is extracted from the zip.`
  )
  .description(___`Deploy an occ application bundle`)
  .option(
    '-t, --tag <value>',
    ___`Associate a custom value with the deployment. This value will be included as part of the deployment\'s metadata`,
    aggregate,
    []
  )
  .addPublishOption()
  .option('--no-build', ___`Skip the production build before deploying`)
  .option(
    '-r, --reset [confirm]',
    ___`Resets the state of the application to that of the workspace. Note that any pending change to assets in Design Studio will be lost.`
  )
  .option('-l, --list', ___`Query all deployments for an application.`)
  .addDebugModeOption()
  .addBackupOption()
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ deploy blank-store --no-build');
    console.log('  $ occ deploy blank-store --tag commit1234 --tag version 1.0.0');
    console.log('  $ occ deploy --zipFile ./somefile.zip');
  })
  .action(run(deploy));

// Redeploy
program
  .command('redeploy [clusterId]')
  .addLiveOption()
  .addCommonOptions()
  .addCommonOccServerOptions()
  .option(
    '--force',
    ___`Whether to force environments that already report the deployment as ACTIVE to also accept the redeployment`
  )
  .addDebugModeOption()
  .description(___`Instructs admin to resend either the preview or live deployment to the given cluster.`)
  .on('--help', function () {
    console.log();
    console.log(___`Description:`);
    console.log();
    console.log(
      ___`  This can be used to retry a failed installation or to synchronize the controllers on the same deployment.`
    );
    console.log(___`  The deployment is determined based on the application that was last deployed to the cluster.`);
    console.log(___`  Using that application to determine which preview or live deployment to push to the cluster.`);
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ redeploy --appServerAdmin http://someserver.oracle.com --appKey');
    console.log('  $ occ redeploy storefront --live');
  })
  .action(async (clusterName, cliOptions) => {
    try {
      const options = await preAction(null, cliOptions);
      await redeploy(clusterName, options);
    } catch (error) {
      processActionError(error);
    }
  });

// Deployment logging
program
  .command('deploy-log [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLiveOption()
  .addLocalDevAppNameOption()
  .description(___`Query the deployment logs for an application.`)
  .option('--system', ___`Get the system log instead of the application log. Default is the application log.`)
  .addClusterOption()
  .addDeploymentOption()
  .option('--since <date>', ___`Query the deployment log beginning at a specific date. Format is MM-DD-YYYY HH:MM:SS`)
  .option('--until <date>', ___`Query the deployment log ending at a specific date. Format is MM-DD-YYYY HH:MM:SS`)
  .option('--queryText <text>', ___`Query the messages in the deployment log for specific text.`)
  .option('--label <value>', ___`Query the log for entries matching the given label value.`)
  .option('--zipFile <filename>', ___`Return the deployment log in the specified zip file.`)
  .option('--limit <number>', ___`Limit the results to a specific number of lines.`)
  .option('--includeArchives [number]', ___`Query the deployment log including the given number of archived logs.`)
  .addJsonOption()
  .option(
    '--loggingLevel <level>',
    ___`Query the deployment log for messages at only the given level. Valid levels are error, warn, info, verbose or debug.`
  )
  .option(
    '--order <value>',
    ___`Specify the order the log results are returned, either ascending or descending. Valid values are asc or desc.`
  )
  .action(run(getLogs));

// Deploy status
program
  .command('deploy-status [appName]')
  .description(___`Queries the deployment status for an application.`)
  .addClusterOption()
  .addDeploymentOption()
  .addJsonOption()
  .option('--last', ___`Check the status of an application's last deployment from this workspace`)
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLocalDevAppNameOption()
  .action(run(getStatus));

// Output
program
  .command('output [appName]')
  .description(___`Generates the deployment files for the given app.`)
  .addCommonOptions()
  .addDeploymentOptions()
  .addLocalDevAppNameOption()
  .action(run(deployOutput));

// Delete
program
  .command('delete [appName]')
  .description(___`Deletes an occ application from OCC Admin.`)
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addPublishOption()
  .addLocalDevAppNameOption()
  .action(run(deleteApp));

// Download
program
  .command('download [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLiveOption()
  .addLocalDevAppNameOption()
  .description(___`Download the current deployment for an application`)
  .addDeploymentOption()
  .on('--help', function () {
    console.log();
    console.log(___`Description:`);
    console.log(___`  Downloads a deployment using two possible methods:`);
    console.log(___`  1. Download an application's current preview or live deployment.`);
    console.log(___`  2. Download a specific deployment by id.`);
    console.log();
    console.log(___`  Note that app name is ignored when downloading by id`);
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ download blank-store --live');
    console.log('  $ occ download --deployment 200005');
  })
  .action(run(download));

// List applications
program
  .command('list-apps')
  .description(___`List the available applications and clusters on the server.`)
  .addJsonOption()
  .addCommonOptions()
  .addCommonOccServerOptions()
  .action(async cliOptions => {
    try {
      const options = await preAction(null, cliOptions);
      await listApplications(options);
    } catch (error) {
      processActionError(error);
    }
  });

// Set options for logging
program
  .command('set-logging-options [clusterId]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLiveOption()
  .description(___`Sets various logging options for the given cluster.`)
  .option('--appLogLevel <level>', ___`Sets the application log level for the given cluster.`)
  .option('--systemLogLevel <level>', ___`Sets the system log level for the given cluster.`)
  .action(async (clusterName, cliOptions) => {
    try {
      const options = await preAction(null, cliOptions);
      await setLoggingOptions(clusterName, options);
    } catch (error) {
      processActionError(error);
    }
  });

// Upgrade
program
  .command('upgrade [version]')
  .description(___`Upgrade the versions of OSF packages depended on throughout the workspace.`)
  .option('--dryRun', ___`Don't make any actual changes, just list what changes would be made.`)
  .option('--latest', ___`Upgrade to the latest version, regardless of BREAKING CHANGES from the current OSF version`)
  .option(
    '--acceptDowngrade',
    ___`If the current OSF version is too new for the OCC server, downgrade to the latest OSF version that matches the OCC server`
  )
  .option(
    '--force',
    ___`Instead of exiting when unable to contact the registry/OCC Servers, found version incompatibilities, or encountered other errors, attempt to continue. MUST be used with a specific version of OSF (e.g. ${"'occ upgrade 2.0.0 --force'"})`
  )
  .addCommonOccServerOptions()
  .option(
    '--no-verifyOcc',
    ___`Don't check the OCC Server version when determining what version of OSF to upgrade to (not recommended)`
  )
  .addCommonOptions()
  // ignore option deemed unnecessary for now
  // .option(
  //   '--ignore <glob>',
  //   ___`Path-like (e.g. '**/__test__/**') matching packages to exclude from the upgrade`,
  //   aggregate,
  //   []
  // )
  .action(async (version, cliOptions) => {
    try {
      const options = await preAction(null, cliOptions);
      await upgrade(version, options);
    } catch (error) {
      processActionError(error);
    }
  });

program
  .command('download-assets [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLiveOption()
  .addLocalDevAppNameOption()
  .option('--confirm', ___`Bypasses the confirmation for overwriting the files in the local workspace.`)
  .option(
    '-r, --reset',
    ___`Resets the state of the workspace assets to that of the Design Studio. Note that any pending changes to assets in the workspace will be lost.`
  )
  // Q: Do any of the following three options need to be available as config/env options?
  .option(
    '--no-import',
    ___`Don't unpack the files into the workspace, simply save the assets to a zip file. They can then be imported/restored later using --fromFile.`
  )
  .option('--dest <path>', ___`Saves the downloaded zip file to a location other than the default.`)
  .option('--fromFile <path>', ___`Load the assets from a zip file on disk instead of from an OCC Admin server.`)
  .description(___`Downloads the assets from design studio and writes them to the workspace`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ download-assets cloudlake');
    console.log('  $ occ download-assets cloudlake --reset');
  })
  .action(run(downloadAssets));

program
  .command('upload-search-config [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLocalDevAppNameOption()
  .description(___`Upload the search configuration`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ upload-search-config');
  })
  .action(run(uploadSearchConfig));

program
  .command('upload-custom-typeahead-keywords [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addLocalDevAppNameOption()
  .description(
    ___`Reads the custom keyword records from the 'config/search/data/keywords.js' in the app, and appends them to the existing elements in the '/gsdata/v1/cloud/data/keywords' record collection.`
  )
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ upload-custom-typeahead-keywords');
  })
  .action(run(uploadCustomTypeaheadKeywords));

// Serve
program
  .command('serve [appName]')
  .addCommonOptions()
  .addCommonOccServerOptions()
  .addCommonHttpServerOptions()
  .addLocalDevAppNameOption()
  .addLiveOption()
  .option('--listConfig', ___`List configuration used for the operation.`)
  .option('--appContext <context>', ___`Select an app config from config/app-config.`)
  .addDsAssetModeOption()
  .description(___`Start presentation server [localhost]`)
  .option('--skipProxy', ___`Do not setup a proxy between the app and OCC server.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('  $ occ serve my-app');
    console.log('  $ occ serve my-app --appServer http://a-vm.us.oracle.com:8080');
  })
  .action(run(serve));

// Create a template archive from an app
program
  .command('create-template [appName]')
  .addCommonOptions()
  .addDeploymentOptions()
  .addLocalDevAppNameOption()
  .description(___`Creates a workspace template archive containing the given app.`)
  .option('--dest <path>', ___`The destination location for the output.`)
  .on('--help', function () {
    console.log();
    console.log(___`Example:`);
    console.log('  $ occ create-template blank-store --dest archives-directory');
  })
  .action(run(createTemplate));

// Create a ui-component
program
  .command('create-widget [appName]')
  .description(___`Create a widget plugin for a specific application.`)
  .option('-n, --name <widget-name>', ___`Name of the widget plugin to create.`)
  .option(
    '--template <template-name>',
    ___`Name of the template to create the widget from (available templates: Blank, CurrencySelector).`,
    `Blank`
  )
  .option('--list-templates', ___`Show list of available widget templates available.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-widget --name MyWidget');
    console.log('\t$ occ create-widget blank-store --name MyWidget');
    console.log('\t$ occ create-widget blank-store --name MyWidget --template CurrencySelector');
  })
  .action(run(createWidget));

// Create a fetcher
program
  .command('create-fetcher [appName]')
  .description(___`Create a fetcher for a specific application.`)
  .requiredOption('-n, --name <fetcher-name>', ___`Name of the fetcher plugin to create.`)
  .option(
    '--forComponent <component-name>',
    ___`Create the fetcher for a specific component, default is to create a global fetcher.`
  )
  .option('--endpoint <endpoint>', ___`An Endpoint for fetcher to invoke.`)
  .option('--selector <selector>', ___`A Selector to be used by the fetcher to check if data exists in the state.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-fetcher --name myFetcher --endpoint anEndpoint --selector aSelector');
    console.log(
      '\t$ occ create-fetcher --name myFetcher --endpoint anEndpoint --selector aSelector --forComponent HelloWorld'
    );
  })
  .action(run(createFetcher));

// Create an action
program
  .command('create-action [appName]')
  .description(___`Create an action for a specific application.`)
  .option(
    '-n, --name <action-name>',
    ___`Name of the action to create. Defaults to the endpoint name if not specified.`
  )
  .option('--endpoint [endpoint]', ___`Endpoint for action to invoke.`)
  .option('--reducer', ___`Create a reducer that updates the application state.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-action --name myAction');
    console.log('\t$ occ create-action --name myAction --endpoint');
    console.log('\t$ occ create-action --endpoint anEndpoint');
    console.log('\t$ occ create-action --name myAction --endpoint anEndpoint');
    console.log('\t$ occ create-action --name myAction --reducer');
    console.log(
      '\t$ If the endpoint flag is supplied without an argument, the created action will invoke an endpoint whose name matches the action name.'
    );
  })
  .action(run(createAction));

// Create a selector
program
  .command('create-selector [appName]')
  .description(
    ___`Create a selector for a specific application. Please refer to the example in the sample application, or the OSF documentation.`
  )
  .option('-n, --name <selector-name>', ___`Name of the selector to create.`)
  .requiredOption('--repository <repository-name>', ___`Name of the repository to select.`)
  .option('--table <table-name>', ___`Name of the table to select from repository.`)
  .option('--entity <entity-name>', ___`Name of the entity to select from table.`)
  .option('--entityId <entityId>', ___`A selector to return an entity by ID.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-selector --name mySelector --repository myRepository');
    console.log('\t$ occ create-selector --name mySelector --repository myRepository --table myTable');
    console.log(
      '\t$ occ create-selector --name mySelector --repository myRepository --table myTable --entityId myEntityId'
    );
    console.log(
      '\t$ occ create-selector --name mySelector --repository myRepository --table myTable --entity myEntity'
    );
    console.log('\t$ occ create-selector --repository myRepository');
    console.log('\t$ occ create-selector --repository myRepository --table myTable');
    console.log('\t$ occ create-selector --repository myRepository --table myTable --entityId myEntityId');
    console.log('\t$ occ create-selector --repository myRepository --table myTable --entity myEntity');
  })
  .action(run(createSelector));

// Create endpoints
program
  .command('create-endpoint [appName]')
  .description(___`Create endpoint(s) for a URL or from a Swagger API document.`)
  .option(
    '-n, --directoryName  <name>',
    ___`The directory name under which to create endpoints, relative to the default path /src/plugins/endpoints.`
  )
  .option('--swagger <url | file>', ___`The URL or Path of a Swagger API document from which to create endpoint(s).`)
  .option('--url <url>', ___`The URL/Origin for which to create endpoint(s).`)
  .option('--verb <method>', ___`Method for Non Swagger API document such as Get, Put, Post.`)
  .option(
    '--endpoints <list-of-endpoints>',
    ___`Comma-separated list of endpointIds to create from the Swagger API document.`
  )
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-endpoint --directoryName aDirectoryName --swagger http://example.com/catalogApi');
    console.log(
      '\t$ occ create-endpoint --directoryName aDirectoryName --swagger http://example.com/catalogApi --endpoints endpointId1,endpointId2'
    );
    console.log(
      '\t$ occ create-endpoint --directoryName aDirectoryName --url http://example.com/catalogApi --verb [method]'
    );
    console.log('\t$ occ create-endpoint --swagger http://example.com/catalogApi');
    console.log(
      `\t$ If the directoryName is not specified, the created endpoint will use the URL's basePath as the directory name.`
    );
    console.log('\t$ occ create-endpoint --url http://example.com/catalogApi --verb [method]');
    console.log(
      '\t$ If the directoryName is not specified, the created endpoint will use the pathname as the directory name.'
    );
  })
  .action(run(createEndpoint));

// list endpoints
program
  .command('list-endpoints')
  .description(___`List all available endpoints from a Swagger API document.`)
  .option('--swagger <url | file>', ___`The URL or Path of a Swagger API document to list all endpoints from.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ list-endpoints --swagger http://example.com/catalogApi');
  })
  .action(async cliOptions => {
    try {
      const options = await preAction(null, cliOptions);
      await listEndpoints(options);
    } catch (error) {
      processActionError(error);
    }
  });
// Create a subscriber
program
  .command('create-subscriber [appName]')
  .description(___`Create a subscriber for named application.`)
  .requiredOption('-n, --name <subscriber-name>', ___`Name of the subscriber plugin to create.`)
  .on('--help', function () {
    console.log();
    console.log(___`Examples:`);
    console.log('\t$ occ create-subscriber --name mySubscriber');
  })
  .action(run(createSubscriber));

// Create App
program
  .command('create-app [appPackageName]')
  .description(___`Create a new app in an existing workspace from an accelerator template.`)
  .option('--template <templateName>', ___`Accelerator template name.`, 'core-commerce-reference-store')
  .on('--help', function () {
    console.log();
    console.log(___`Example:`);
    console.log('  $ occ create-app @acme/my-app');
    console.log('  $ occ create-app --template blank-store');
    console.log('  $ occ create-app @acme/my-app --template blank-store ');
  })
  .action(async (appPackageName, cliOptions) => {
    try {
      const options = await preAction(null, cliOptions);
      await createApp(appPackageName, options);
    } catch (error) {
      processActionError(error);
    }
  });

// CLI version
program.version(version);

// Show OSF version information
program
  .command('version')
  .description(___`List the version of various OSF elements on the workspace, and the Oracle Commerce Cloud version.`)
  .option('-a, --appServerAdmin <url>', ___`Application admin server URL.`)
  .option('-e, --serverEnv <env>', ___`Cloud Commerce server environment to use (from '.occ/config.js')`)
  .on('--help', function () {
    console.log();
    console.log(___`Example:`);
    console.log('  $ occ version');
    console.log('  $ occ version --serverEnv development ');
  })
  .action(async cliOptions => {
    try {
      const options = await preAction(cliOptions.appName, cliOptions);
      await showVersions(options);
    } catch (error) {
      processActionError(error);
    }
  });

process.on('beforeExit', printVersion);

//handle invalid commands with help
program.on('command:*', async function (operands) {
  logger.error(___`Unknown command '${operands[0]}'`);
  await printVersion();
  process.exitCode = 1;
  program.help();
});

if (!process.argv.includes('unit-testing-skip-parse')) {
  program.parse(process.argv);
}
