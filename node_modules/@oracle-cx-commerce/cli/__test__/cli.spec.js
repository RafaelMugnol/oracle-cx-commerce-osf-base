/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

describe('cli:commands', () => {
  beforeAll(async () => {
    //this loads up the commander program so it can be inspected.
    //the extra arg tells it to not both parsing the command line args... since that causes error trying
    //to parse the jest args
    process.argv.push('unit-testing-skip-parse');
    require('../cli');
  });
  afterAll(async () => {
    process.argv.delete('unit-testing-skip-parse');
  });

  test('test that each cli command is defined', () => {
    const expectedCommands = [
      {
        name: 'create-app',
        // eslint-disable-next-line prettier/prettier
        options: ['--template <templateName>', '--fromClassic', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>']
      },
      {
        name: 'upgrade',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '--dryRun', '--latest', '--acceptDowngrade', '--force', '--no-verifyOcc']
      },
      {
        name: 'set-logging-options',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '-L, --live', '--no-live', '--appLogLevel <level>', '--systemLogLevel <level>']
      },
      {
        name: 'deploy-log',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '-L, --live', '--no-live', '--localDevAppName <appName>', '--no-localDevAppName', '-j, --json', '--system', '-c, --cluster [clusterId]', '-d, --deployment <deployId>', '--since <date>' , '--until <date>', '--queryText <text>', '--label <value>', '--zipFile <filename>', '--limit <number>', '--includeArchives [number]', '--loggingLevel <level>', '--order <value>']
      },
      {
        name: 'create-subscriber',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --name <subscriber-name>']
      },
      {
        name: 'list-endpoints',
        // eslint-disable-next-line prettier/prettier
        options: ['--swagger <url | file>']
      },
      {
        name: 'create-endpoint',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --directoryName  <name>', '--swagger <url | file>', '--url <url>', '--verb <method>', '--endpoints <list-of-endpoints>']
      },
      {
        name: 'create-selector',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --name <selector-name>', '--repository <repository-name>', '--table <table-name>', '--entity <entity-name>', '--entityId <entityId>']
      },
      {
        name: 'create-action',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --name <action-name>', '--reducer', '--endpoint [endpoint]']
      },
      {
        name: 'create-fetcher',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --name <fetcher-name>', '--forComponent <component-name>', '--endpoint <endpoint>', '--selector <selector>']
      },
      {
        name: 'create-widget',
        // eslint-disable-next-line prettier/prettier
        options: ['-n, --name <widget-name>', '--template <template-name>', '--list-templates']
      },
      {
        name: 'create-template',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose' ,'--deployType <type>', '--ignore <glob>', '--include <glob>', '--dest <path>', '--localDevAppName <appName>', '--no-localDevAppName']
      },
      {
        name: 'serve',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '--localDevAppName <appName>', '--no-localDevAppName', '-e, --serverEnv <env>', '-L, --live', '--no-live', '-m, --dsAssetMode <mode>', '--sslKey <path>', '--sslCert <path>', '--httpHost <host>', '--httpPort <port>' ,'--httpsHost <host>', '--httpsPort <port>', '--skipProxy', '--appContext <context>', '--listConfig']
      },
      {
        name: 'upload-custom-typeahead-keywords',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '--localDevAppName <appName>', '--no-localDevAppName', '-e, --serverEnv <env>']
      },
      {
        name: 'upload-search-config',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '--localDevAppName <appName>', '--no-localDevAppName', '-e, --serverEnv <env>']
      },
      {
        name: 'download-assets',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '--localDevAppName <appName>', '--no-localDevAppName', '-e, --serverEnv <env>', '-L, --live', '--no-live', '--confirm', '-r, --reset', '--no-import', '--dest <path>', '--fromFile <path>' ]
      },
      {
        name: 'list-apps',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '-j, --json' ]
      },
      {
        name: 'download',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '--localDevAppName <appName>', '--no-localDevAppName', '-e, --serverEnv <env>', '-L, --live', '--no-live', '-d, --deployment <deployId>' ]
      },
      {
        name: 'delete',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '--localDevAppName <appName>', '--no-localDevAppName', '-p, --publish', '--publishAll [confirm]' ]
      },
      {
        name: 'output',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '--deployType <type>', '--localDevAppName <appName>', '--no-localDevAppName', '--include <glob>','--ignore <glob>']
      },
      {
        name: 'deploy-status',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>',  '--localDevAppName <appName>', '--no-localDevAppName', '-j, --json', '--last', '-c, --cluster [clusterId]', '-d, --deployment <deployId>']
      },
      {
        name: 'build',
        // eslint-disable-next-line prettier/prettier
        options: [ '-V, --version', '-v, --verbose', '--no-verbose', '--legacy', '-p, --production', '-w, --watch' ]
      },
      {
        name: 'configure-app',
        // eslint-disable-next-line prettier/prettier
        options: [ '--localDevAppName <appName>', '--no-localDevAppName', '-l, --list' ]
      },
      {
        name: 'deploy',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '--deployType <type>', '--ignore <glob>', '--zipFile [zip file location]', '--include <glob>','--localDevAppName <appName>', '--no-localDevAppName', '--replaceApp <appName>', '-t, --tag <value>', '-p, --publish', '--publishAll [confirm]', '--no-build', '-r, --reset [confirm]', '-l, --list', '--debugMode', '--no-debugMode' , '--backup', '--no-backup' ]
      },
      {
        name: 'redeploy',
        // eslint-disable-next-line prettier/prettier
         options: [ '-L, --live', '--no-live', '-V, --version', '-v, --verbose', '--no-verbose', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '--force', '--debugMode', '--no-debugMode']
      },
      {
        name: 'version',
        options: ['-a, --appServerAdmin <url>', '-e, --serverEnv <env>']
      },
      {
        name: 'configure',
        // eslint-disable-next-line prettier/prettier
        options: ['-V, --version', '-v, --verbose', '--no-verbose', '-L, --live', '--no-live', '-n, --appName <name>', '-m, --dsAssetMode <mode>', '--userName <name>', '--appContext <context>', '-k, --appKey [key]', '-s, --appServer <url>', '-a, --appServerAdmin <url>', '-e, --serverEnv <env>', '--httpHost <host>', '--httpPort <port>', '--httpsHost <host>', '--httpsPort <port>', '--sslKey <path>', '--sslCert <path>', '-l, --list' , '--backup', '--no-backup']
      }
    ];
    const program = require('commander');
    expect(program.commands.length).toEqual(27);
    expectedCommands.forEach(expectedCommand => {
      const found = program.commands.filter(command => command['_name'] === expectedCommand.name);
      if (found.length !== 1) {
        console.log(`Failed testing for expected command ${expectedCommand.name}`);
      }
      expect(found.length).toBe(1);
      //assertEquals(`Did not find expected command ${expectedCommand.name} in command spec`, 0, found.length);
      //make sure the options are the same for the command
      const command = found[0];
      if (command.options.length !== expectedCommand.options.length) {
        console.error(`Failed testing for expected number of options for command ${expectedCommand.name}`);
      }
      expect(command.options.length).toEqual(expectedCommand.options.length);

      expectedCommand.options.forEach(expectedOption => {
        const found = command.options.filter(option => option.flags === expectedOption);
        if (found.length !== 1) {
          console.error(`Failed testing for expected option ${expectedOption} on command ${expectedCommand.name}`);
        }
        expect(found.length).toBe(1);
      });
    });
  });
});
