/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const logger = require('@oracle-cx-commerce/logger/cli');
const {getRollupConfigurationLocation} = require('@oracle-cx-commerce/cli-shared').cliHelperMethods;
const {spawn} = require('child_process');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const fs = require('fs-extra');
const {createBuilder} = require('@oracle-cx-commerce/builder/esbuild');

const build = async (appName, options) => {
  // clean the dist dir before building.
  await fs.remove(path.join(options.appDir, 'dist'), err => {
    if (err) {
      logger.error(err);
    }
  });

  if (process.env.OCC_BUILDER) {
    logger.info(___`Building application ${appName}...`);

    const builders = [createBuilder({...options, production: false})];

    if (options.production) {
      builders.push(createBuilder(options));
    }

    await Promise.all(builders.map(builder => builder.build()));
  } else {
    // resolve the rollup config from the app dir.
    const rollupConfig = getRollupConfigurationLocation(options.appDir);

    logger.info(___`Building with config ${rollupConfig}...`);

    await new Promise((resolve, reject) => {
      const args = ['-c', `"${rollupConfig}"`, '--environment', `"OCC_APP_DIR:${options.appDir}"`];
      if (options.production === true) {
        args.push('--environment', 'BUILD:production');
      } else {
        if (options.watch === true) {
          args.push('-w');
        }
        if (options.legacy === true) {
          args.push('--environment', 'OCC_ADD_LEGACY_ROLLUP_CONF:true');
        }
      }
      spawn('rollup', args, {
        stdio: 'inherit',
        shell: true
      })
        .on('exit', function (code, signal) {
          if (code || signal) {
            if (signal === 'SIGABRT') {
              logger.warn(
                ___`Build failed - if this appears to be a memory/heap-related issue, try setting the environment variable "NODE_OPTIONS=--max-old-space-size=8192"`
              );
            }
            reject(new Error(`Build exited with: ${code || signal}`));
          }
          resolve();
        })
        .on('error', function (error) {
          reject(error);
        });
    });
  }

  logger.info(___`Build complete for application ${appName}`);
};

module.exports = {build};
