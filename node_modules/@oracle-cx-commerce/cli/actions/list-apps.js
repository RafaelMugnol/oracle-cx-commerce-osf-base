/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const logger = require('@oracle-cx-commerce/logger/cli');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {getClientApps} = require('@oracle-cx-commerce/tools-util/endpoints');
const {getDeploymentEnvironments} = require('@oracle-cx-commerce/tools-util/endpoints');
const {sprintf} = require('sprintf-js');

module.exports = async options => {
  const response = await getClientApps(options);
  const deployEnvResponse = await getDeploymentEnvironments(options);
  logger.info(___`Connecting to ${options.appServerAdmin}`);
  // Only report back react apps
  if (response.body.items) {
    const reactApps = response.body.items.filter(item => item.namespace === 'occ.react');
    if (reactApps.length > 0) {
      const columnMaxLength = {
        id: 0,
        name: 0
      };
      const reactAppsData = [];
      reactApps.forEach(reactApp => {
        const appData = {
          id: reactApp.repositoryId,
          name: reactApp.name
        };
        reactAppsData.push(appData);
        // Maximum length for each column
        columnMaxLength.id = Math.max(columnMaxLength.id, reactApp.repositoryId.length);
        columnMaxLength.name = Math.max(columnMaxLength.name, reactApp.name.length);
      });
      const offset = 2;
      // The column header
      const header = sprintf(`%-${columnMaxLength.id + offset}s`, 'ID') + sprintf(`%-${columnMaxLength.name}s`, 'NAME');
      // Each line of data
      const output = [];
      reactAppsData.forEach(line => {
        const content =
          sprintf(`%-${columnMaxLength.id + offset}s`, line.id) + sprintf(`%-${columnMaxLength.name}s`, line.name);
        output.push(content);
      });
      // Print the column header and each line of data in a single list
      logger.info(
        ___`\n The following applications are available: \n ----------------------------------------- \n ${header} \n ${output.join(
          '\n '
        )}`
      );
    } else {
      logger.info(___`No applications are available.`);
    }
  } else {
    throw new Error(___`Unexpected response from listApplications endpoint. Items property is missing`);
  }
  // Parse the deployment environment endpoint
  if (deployEnvResponse.items && deployEnvResponse.items.length !== 0) {
    const columnMaxLength = {
      id: 0,
      preview: 0,
      live: 0
    };
    const Data = [];
    deployEnvResponse.items.forEach(item => {
      const deployData = {
        id: item.clusterId,
        preview: item.applicationId,
        live: item.liveApplicationId
      };
      Data.push(deployData);
      // Maximum length for each column

      columnMaxLength.id = Math.max(columnMaxLength.id, item.clusterId ? item.clusterId.length : 0);
      columnMaxLength.preview = Math.max(columnMaxLength.preview, item.applicationId ? item.applicationId.length : 0);
      columnMaxLength.live = Math.max(columnMaxLength.live, item.liveApplicationId ? item.liveApplicationId.length : 0);
    });

    const offset = 2;
    // The column header
    const header =
      sprintf(`%-${columnMaxLength.id + offset}s`, 'ID') +
      sprintf(`%-${columnMaxLength.preview + offset}s`, 'PREVIEW') +
      sprintf(`%-${columnMaxLength.live}s`, 'LIVE');
    // Each line of data
    const output = [];
    Data.forEach(line => {
      const content =
        sprintf(`%-${columnMaxLength.id + offset}s`, line.id) +
        sprintf(`%-${columnMaxLength.preview + offset}s`, line.preview) +
        sprintf(`%-${columnMaxLength.live}s`, line.live);
      output.push(content);
    });
    // Print the column header and each line of data in a single list
    logger.info(
      ___`\n The following clusters are available for running applications: \n -------------------------------------------------------------- \n ${header} \n ${output.join(
        '\n '
      )}`
    );
  } else {
    logger.warn(___`There are no clusters configured for this environment.`);
  }
};
