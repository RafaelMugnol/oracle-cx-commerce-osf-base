/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {mockFetchResponse, clearMockResponses, Response, responseOptions} = require('node-fetch');
const {createRestClient} = require('@oracle-cx-commerce/tools-util/rest-client');

const {doPublish} = require('../publish');

describe('Errors in publish', () => {
  const options = {
    appServerAdmin: 'http://localhost:9080',
    appKey: 'secret-thing',
    appName: 'core-commerce-reference-store'
  };

  beforeEach(async () => {
    // Mock:
    // - await createRestClient(appServerAdmin, appKey);
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/login',
      new Response(
        '{"access_token":"valid.access.token.from.login.0","token_type":"bearer","expires_in":300}',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/login').responses[200].json
      ),
      {method: 'POST', body: 'grant_type=client_credentials'}
    );
    // - await getAppPublishChange(options);
    mockFetchResponse(
      // 'http://localhost:9080/ccadmin/v1/publishingChanges?q=assetId eq "core-commerce-reference-store"',
      'http://localhost:9080/ccadmin/v1/publishingChanges?q=assetId%20eq%20%22core-commerce-reference-store%22',
      new Response(
        '{"items": [ { "lastName": "", "authorProfileType": "applicationAccess", "itemType": "repository", "displayName": "core-commerce-reference-store - Oracle CX Commerce Core Commerce Reference Storefront Application", "author": "01234567-89ab-cdef-ghij-klmnopqrstuv", "changeType": 2, "subsystem": "application", "assetType": "application", "changeDetails": [ { "changeTime": "2021-01-02T13:14:15.000Z", "author": "01234567-89ab-cdef-ghij-klmnopqrstuv", "repositoryId": "823393" }, { "changeTime": "2021-01-02T13:14:15.000Z", "author": "01234567-89ab-cdef-ghij-klmnopqrstuv", "repositoryId": "825686" } ], "changeTime": "2021-01-02T13:14:15.000Z", "assetTypeDisplayName": "application", "firstName": "FastApp®", "assetId": "core-commerce-reference-store", "componentPath": "/atg/cloud/ui/PageRepository", "repositoryId": "change424022", "id": "change424022", "parentAssetType": "", "scheduledPublishItem": null, "authors": [ "01234567-89ab-cdef-ghij-klmnopqrstuv:,FastApp®" ] } ]}',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );
    // - await getChangeList({...options, changeItemIds: items.map(item => item.id)});
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publishingChangeLists',
      new Response(
        '{"changeListId": "1200023"}',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[201].json
      ),
      {method: 'POST', body: '{"changeItemIds":["change424022"]}'}
    );
    // - await getChangeListDependencies({...options, changeListId});
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publishingChangeLists/1200023?limit=40&changes=dependencies',
      new Response(
        '{ "total": 0, "totalResults": 0, "offset": 0, "limit": 40, "changeListId": "1200023", "items": [] }',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );
    // - await publish({...options, operationType: 'selective_publish', changeListId, eventName});
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publishingChangeLists/publish',
      new Response(
        '{"publishRunning": true, "statusMessage": "A publish has been successfully initiated."}',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {
        method: 'POST',
        body: '{"operationType":"selective_publish","changeListId":"1200023","eventName":"Publishing changes to app \'core-commerce-reference-store\' from the OSF CLI"}'
      }
    );

    options.restClient = await createRestClient(options.appServerAdmin, options.appKey);
  });

  afterEach(() => {
    clearMockResponses();
  });

  test('Publish succeeded with no dependencies and no wait', async () => {
    // Mock:
    // - await getPublishStatus(options);
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publish?lastPublished=true',
      new Response(
        // Publish finished
        '{ "publishInitiator": "77f4efb0-754a-4165-96cc-1a3976e93968", "firstName": "ocx-osf-storefront", "lastName": "", "publishRunning": false, "allowPublishingReset": false, "lastPublished": "2021-04-13T18:16:36.000Z", "eventName": "Publishing changes to app \'core-commerce-reference-store\' from the OSF CLI", "errorPhase": "0", "publishInitiatorProfileType": "applicationAccess" }',
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );

    await doPublish(options);

    clearMockResponses();
  });

  test("Detect failed install on 'live' server right away", async () => {
    // Mock:
    // - await getPublishStatus(options);
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publish?lastPublished=true',
      new Response(
        // Publish failed
        `{"lastName":"","allowPublishingReset":false,"errorMessage":"; ERROR CODE:210012; atg.cloud.exception.CCException: The OSF Application core-commerce-reference-store failed to install on the live server. Please correct the problem with the application and then try again. You may also selectively publish other unrelated assets. -- ERROR: Encountered error while performing action: INSTALL. yarn exited with code: 1. error Couldn't find any versions for \\"@oracle-cx-commerce/actions\\" that matches \\"2.19.1\\"","publishId":"publish20058","publishInitiatorProfileType":"applicationAccess","publishInitiator":"3cac91cd-7fe1-4c92-948a-e3a45bdda312","firstName":"marcus","publishRunning":true,"currentPhase":200,"lastCompletedPhase":130,"eventName":"","operationType":"publish","errorPhase":210}`,
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );

    await expect(doPublish(options)).rejects.toThrow(/failed to install on the live server/);

    clearMockResponses();
  });

  test("Detect failed install on 'live' server after a wait", async () => {
    // Mock:
    // - await getPublishStatus(options);
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publish?lastPublished=true',
      new Response(
        // Publish in progress
        `{"lastName":"","allowPublishingReset":false,"publishId":"publish20058","publishInitiatorProfileType":"applicationAccess","publishInitiator":"9af5835a-0587-4e94-9b82-21c33a9eb816","firstName":"FastApp®","publishRunning":true,"currentPhase":110,"lastCompletedPhase":100,"eventName":"Publishingchangestoapp'core-commerce-reference-store'fromtheOSFCLI","operationType":"selective_publish","errorPhase":0}`,
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );
    // - await sleep(3000);
    // - await getPublishStatus(options);
    mockFetchResponse(
      'http://localhost:9080/ccadmin/v1/publish?lastPublished=true',
      new Response(
        // Publish failed
        `{"lastName":"","allowPublishingReset":false,"errorMessage":"; ERROR CODE:210012; atg.cloud.exception.CCException: The OSF Application core-commerce-reference-store failed to install on the live server. Please correct the problem with the application and then try again. You may also selectively publish other unrelated assets. -- ERROR: Encountered error while performing action: INSTALL. yarn exited with code: 1. error Couldn't find any versions for \\"@oracle-cx-commerce/actions\\" that matches \\"2.19.1\\"","publishId":"publish20058","publishInitiatorProfileType":"applicationAccess","publishInitiator":"3cac91cd-7fe1-4c92-948a-e3a45bdda312","firstName":"marcus","publishRunning":true,"currentPhase":200,"lastCompletedPhase":130,"eventName":"","operationType":"publish","errorPhase":210}`,
        responseOptions.origin('http://localhost:9080').path('/ccadmin/v1/publishingChanges').responses[200].json
      ),
      {method: 'GET', body: null}
    );

    await expect(doPublish(options)).rejects.toThrow(/failed to install on the live server/);

    clearMockResponses();
  });
});
