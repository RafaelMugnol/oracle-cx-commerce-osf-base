/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const logger = require('@oracle-cx-commerce/logger/cli');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {
  getPublishStatus,
  getAppPublishChange,
  getChangeList,
  getChangeListDependencies,
  publish
} = require('@oracle-cx-commerce/tools-util/endpoints');

const sleep = millis => new Promise(resolve => setTimeout(resolve, millis));

const doPublish = async options => {
  let publishResponse;
  if (options.publishAll) {
    publishResponse = await publish(options, null, null, 'Publishing all items from the OSF CLI');
  } else {
    const res1 = await getAppPublishChange(options);
    const {items} = res1.body;
    if (!items || items.length !== 1) {
      throw new Error(
        ___`Got ${items ? items.length : 0} items to be published with assetId '${
          options.appName
        }'. There should have been exactly one item with that id. Either retry with --publishAll or publish through Admin.`
      );
    }

    const res2 = await getChangeList({...options, changeItemIds: items.map(item => item.id)});
    const {changeListId} = res2.body;
    const dependencies = await getChangeListDependencies({...options, changeListId});
    logger.verbose(___`Will publish ${options.appName} and its ${dependencies.body.total} dependencies`);
    const eventName = ___`Publishing changes to app '${options.appName}' from the OSF CLI`;

    publishResponse = await publish({...options, operationType: 'selective_publish', changeListId, eventName});
  }

  if (publishResponse.body && publishResponse.body.publishRunning === true) {
    // check publishing status until it returns complete or reports an error
    let published = false;
    while (!published) {
      const checkResponse = await getPublishStatus(options);
      if (checkResponse.body.errorMessage) {
        throw new Error(___`Publish failed: ${checkResponse.body.errorMessage}`);
      } else if (checkResponse.body.publishRunning === true) {
        logger.info(___`Publish running. Please wait...`);
        await sleep(3000);
      } else {
        logger.info(___`Publish completed successfully`);
        published = true;
      }
    }
    if (!published) {
      logger.info(___`Publish not completed`);
    }
  } else {
    logger.info(___`Nothing has changed, not publishing`);
  }
};

module.exports = {doPublish};
