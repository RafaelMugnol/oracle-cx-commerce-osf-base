/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const {Client} = require('@oracle-cx-commerce/tools-util/rest-client');
const {setLoggingConfig} = require('@oracle-cx-commerce/tools-util/endpoints');
const logger = require('@oracle-cx-commerce/logger/cli');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: require('path').join(__dirname, './locales')});

/*
 ** Sets the appLogLevel and systemLogLevel options on the given cluster.
 */
module.exports = async (clusterName, options) => {
  // List options we care about for this command
  const opts = ['appLogLevel', 'systemLogLevel', 'debugMode'];

  // verify at least one option was specified
  if (!Object.keys(options).some(option => opts.includes(option))) {
    throw new Error(
      ___`At least one option of ${opts.slice(0, -1).join(', ')}, or ${opts[opts.length - 1]} must be specified.`
    );
  }

  // Warn about debugMode performance impact
  if (options.debugMode === true)
    logger.warn(___`Setting debugMode to true will decrease performance to increase logging.`);

  // connect to the Admin server and login
  clusterName = clusterName || options.defaultCluster;
  const restClient = new Client(options.appServerAdmin, options.appKey);

  logger.info(___`Setting configuration for cluster ${clusterName} on server ${options.appServerAdmin}`);

  await restClient.login();
  try {
    // call the Admin configuration endpoint
    const response = await setLoggingConfig({
      restClient,
      clusterName,
      preview: !options.live,
      systemLogLevel: options.systemLogLevel,
      appLogLevel: options.appLogLevel,
      debugMode: options.debugMode
    });

    // output any results
    if (response && response.body.results) {
      response.body.results.forEach(item => {
        if (item.message) {
          logger.info(___`[${item.host}] ${item.message}`);
        }
      });
    }

    // output any errors
    if (response && response.body.errors) {
      response.body.errors.forEach(item => {
        if (item.error) {
          logger.error(___`${item.error.message}`);
        }
      });
    }
  } catch (error) {
    if (error.response && error.response.status === 404) {
      throw new Error(___`cluster ${clusterName} not found.`);
    } else {
      throw error;
    }
  }
};
