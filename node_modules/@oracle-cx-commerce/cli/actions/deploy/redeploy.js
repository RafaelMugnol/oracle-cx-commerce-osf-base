/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const path = require('path');
const logger = require('@oracle-cx-commerce/logger/cli');
const {Client} = require('@oracle-cx-commerce/tools-util/rest-client');
const {redeploy, getDeploymentEnvironment} = require('@oracle-cx-commerce/tools-util/endpoints');

const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {postRedeployVerifyStart, postDeploymentVerifyControllerStatus, isConfiguredControllers} = require('./status');
const setLoggingOptions = require('./set-logging-options');

module.exports = async (clusterName, options) => {
  const restClient = new Client(options.appServerAdmin, options.appKey);
  try {
    clusterName = clusterName || options.defaultCluster;

    logger.info(___`Connecting to ${options.appServerAdmin}`);
    await restClient.login(true);

    // get the the deployment environment so we can tell if there are controllers
    // the should be checked.
    const deploymentEnv = await getDeploymentEnvironment({restClient, clusterId: clusterName});

    // only continue if there are controllers for the given context
    if (!isConfiguredControllers(deploymentEnv, options.live)) {
      throw new Error(___`This admin server does not have a configured cluster named ${clusterName} for redeploy`);
    }
    // If the user has specified turning on/off debugMode, ensure it gets turned on/off
    if (options.debugMode === true || options.debugMode === false) {
      await setLoggingOptions(clusterName, options);
      options.force = true;
    }
    const response = await redeploy({restClient, clusterName, preview: !options.live, force: options.force || false});
    logger.info(___`Redeploy initiated for cluster ${clusterName}`);

    const redeployResponse = response.body;
    // As it is now, the check status response is misleading re: force re-deployments. See story CCSF-18882
    logger.info(___`Initiating the redeploy of deployment ${redeployResponse.deploymentId}`);
    let activeStatus;
    if (!options.force) {
      logger.info(___`Checking status of deployment installation.`);
      activeStatus = await postDeploymentVerifyControllerStatus(
        restClient,
        deploymentEnv,
        redeployResponse.deploymentId,
        options.live,
        false
      );
    } else if (redeployResponse.forceId) {
      logger.info(___`Force redeploy was assigned the id ${redeployResponse.forceId}`);
      const forceStarted = await postRedeployVerifyStart(
        restClient,
        redeployResponse.deploymentId,
        redeployResponse.forceId,
        options.live
      );
      if (forceStarted) {
        activeStatus = await postDeploymentVerifyControllerStatus(
          restClient,
          deploymentEnv,
          response.body.deploymentId,
          options.live
        );
      }
    }
    if (!activeStatus) {
      throw new Error(___`Redeployment failed to complete successfully`);
    }
  } catch (error) {
    // log the errors
    if (error.response && error.response.status === 404) {
      logger.info(___`Deployment not found for ${clusterName}`);
    } else {
      throw error;
    }
  } finally {
    restClient.logout();
  }
};
