/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const fs = require('fs-extra');
const http = require('http');
const https = require('https');
const path = require('path');

const {createApp} = require('@oracle-cx-commerce/express-app');

const logger = require('@oracle-cx-commerce/logger/server');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {assertFolderExistSync} = require('@oracle-cx-commerce/tools-util');
const {ipcStart, emitMessage} = require('../utils/ipc');
const {terminate, watchConnections} = require('../utils/server-terminator');
const {validateOCCVersion} = require('../utils/index');

const NODE_ENV = process.env.NODE_ENV || 'development';

const TIMEOUT = 10000;

function listConfigs(options) {
  // output the config to the log.
  const ignoreList = ['serverConfig', '_occActionOptions', '_occSelectedOptions', '_occActionName', '_occArgOptions'];
  const str = JSON.stringify(options, (key, val) => (ignoreList.includes(key) ? undefined : val), 2); // spacing level = 2
  logger.info(___`The configurations of this operation:\n${str}`);
}

module.exports = async (appName, options = {}) => {
  // Ensure the application directory is properly resolved.
  const appDir = path.resolve(options.appDir);
  // Compare the minimum required version with the OCC version.
  validateOCCVersion(options);
  // Check app directory is accessible.
  assertFolderExistSync(appDir, ___`Cannot access application folder: ${appDir}`);

  if (options.listConfig) {
    listConfigs(options);

    return;
  }
  // Create the storefront app.
  const app = await createApp(options);

  // Start IPC server to communicate with the controller.
  ipcStart();

  // Start the non-secure (http) express server
  const server = http.createServer(app).listen(options.httpPort, () => {
    emitMessage('READY', {message: `Listening on port ${options.httpPort}`, port: options.httpPort});

    logger.verbose(___`Running against the ${options.live ? 'live' : 'preview'} endpoints`);

    if (options.skipProxy) {
      logger.verbose(___`Skipping proxy setup. Requests will not be routed through proxy.`);
    }

    logger.info(
      ___`Application '${appName}' is running -> http://${options.httpHost}:${options.httpPort} (${NODE_ENV})`
    );
  });

  // Setup graceful shutdown in production
  if (options.production) {
    watchConnections(server);

    process
      .on('SIGINT', () => {
        terminate(server, TIMEOUT);
      })
      .on('SIGTERM', () => {
        terminate(server, TIMEOUT);
      });
  }

  // Start the secure (https) express server (non-production only)
  let sslCertPath;
  let sslKeyPath;
  if (
    !options.production &&
    options.httpsHost &&
    options.httpsPort &&
    options.sslKey &&
    options.sslCert &&
    fs.existsSync((sslCertPath = path.resolve(options.sslCert))) &&
    fs.existsSync((sslKeyPath = path.resolve(options.sslKey)))
  ) {
    const sslOptions = {
      key: fs.readFileSync(sslKeyPath),
      cert: fs.readFileSync(sslCertPath)
    };

    https
      .createServer(sslOptions, app)
      .listen(options.httpsPort, () =>
        logger.info(
          ___`Application '${appName}' is running -> https://${options.httpsHost}:${options.httpsPort} (${NODE_ENV})`
        )
      );
  } else {
    logger.info(
      ___`Not starting https server because the following configuration is not set: httpsHost, httpsPort, sslKey and sslCert`
    );
  }
};
