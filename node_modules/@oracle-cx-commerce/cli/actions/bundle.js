/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const fs = require('fs');
const path = require('path');
const {assert} = require('@oracle-cx-commerce/cli-shared');
const logger = require('@oracle-cx-commerce/logger/cli');
const {assertFolderExistSync} = require('@oracle-cx-commerce/tools-util');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {loadApp} = require('@oracle-cx-commerce/express-app/utils');

const createAppJson = (appName, options) => {
  // Get the occ app dir.
  const appDir = path.resolve(options.appDir);

  // Check app directory is accessible.
  assertFolderExistSync(appDir, `Cannot access application folder: ${appDir}`);

  // Ensure directories exist in the application.
  if (!fs.existsSync(`${appDir}/.occ`)) {
    fs.mkdirSync(`${appDir}/.occ`);
  }

  // Load occ app module and package.json.
  const {meta = {}} = loadApp(appDir);

  /**
   * Removes all locale strings from the metadata object except for those locales
   * in the given appLocales Set.
   * @param {Object} meta an object with all the metadata for an app.
   * @param {Set} appLocales a Set containing the keys for the locales the app should keep.
   */
  const filterMeta = (meta, appLocales) => {
    // Remove component-level resource strings
    if (meta.components) {
      let removedKeys = 0;
      Object.keys(meta.components).forEach(component => {
        if (meta.components[component].resources) {
          Object.keys(meta.components[component].resources).forEach(localeKey => {
            if (!appLocales.has(localeKey)) {
              delete meta.components[component].resources[localeKey];
              logger.silly(___`Removed ${component}.resources.${localeKey}`);
              removedKeys++;
            }
          });
        }
        if (meta.components[component].config && meta.components[component].config.locales) {
          Object.keys(meta.components[component].config.locales).forEach(localeKey => {
            if (!appLocales.has(localeKey)) {
              delete meta.components[component].config.locales[localeKey];
              logger.silly(___`Removed ${component}.config.locales.${localeKey}`);
              removedKeys++;
            }
          });
        }
      });
      logger.debug(___`Removed ${removedKeys} unnecessary locale strings`);
    }

    // Remove top-level DS resource strings
    if (meta.locales) {
      Object.keys(meta.locales).forEach(localeKey => {
        if (!appLocales.has(localeKey)) {
          delete meta.locales[localeKey];
          logger.debug(___`Removed top-level resources for locale: ${localeKey}`);
        }
      });
    }
  };

  try {
    // Get the locales used in the app according to package.json
    const {locales} = require(path.resolve(appDir, 'package.json')).occ;
    if (locales && locales.length) {
      // Only filter out unwanted locales if there are *some* locales defined.
      logger.verbose(
        ___`Removing all non-configuration-related resource strings unless they are for locales: ${locales.join(', ')}`
      );
      filterMeta(meta, new Set(locales));
    } else {
      logger.info(
        ___`No or empty "locales" section defined in ${path.resolve(
          appDir,
          'package.json'
        )}.occ. No resource strings will be filtered out.`
      );
    }
  } catch (error) {
    logger.info(
      ___`Unable to load target locales for ${appName}. Will not be able to filter out undesired locale data.`
    );
    logger.debug(error);
  }

  // Ensure required metadata is defined.
  assert(appName, ___`missing metadata--"appName" is required for app.json`);
  assert(meta.description, ___`missing metadata--"description" is required for app.json`);
  assert(meta.namespace, ___`missing metadata--"namespace" is required for app.json`);

  // Create app json metadata
  const appJson = {
    ...meta,
    name: appName
  };

  appJson.description = `${appName} - ${appJson.description}`;

  const appJsonPath = path.resolve(appDir, '.occ', 'app.json');
  fs.writeFileSync(appJsonPath, JSON.stringify(appJson));

  logger.info(___`app.json created - ${appJsonPath}`);
};
module.exports = {createAppJson};
