/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {
  resolveAcceleratorTemplate,
  appExists,
  modifyPackageJson,
  standardizeAppPackageName,
  unzipAcceleratorTemplate
} = require('@oracle-cx-commerce/accelerator-templates');

const fs = require('fs-extra');
const path = require('path');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, '../locales')});
const {convertClassicAssets} = require('../utils/convert-classic-assets-utils');

/**
 * This generates an app from an accelerator template in an existing workspace.
 *
 * @param {String} appPackageName   The package and app name of the new app.
 * @param {Object} options          The command line options including type, for the type of
 *                                  archive to generate, and dest, for the destination directory of the
 *                                  resulting archive file.
 * @returns {Promise} a promise to be resolved with the path to the resulting archive file.
 */
async function createApp(appPackageName, options) {
  const {fromClassic, appServerAdmin, appKey} = options;
  let {template: templateName} = options; // assign var content template -> templateName
  if (fromClassic) {
    templateName = 'core-commerce-reference-store';
  }
  const templatePath = resolveAcceleratorTemplate(templateName);
  const appFolderName = appPackageName ? standardizeAppPackageName(appPackageName) : templateName;
  const newAppPath = path.resolve('packages', 'apps', appFolderName);

  if (appExists(appFolderName)) {
    throw new Error(___`Application with name '${appFolderName}' already exists in the workspace.`);
  }

  fs.mkdirpSync(newAppPath);
  await unzipAcceleratorTemplate('app', templatePath, newAppPath);

  if (appPackageName) {
    // modify package.json in /packages/apps/{$appName} level
    const pathToPackageJson = path.resolve(newAppPath, 'package.json');
    const newKeyValues = {
      name: appPackageName,
      version: '0.1.0'
    };
    modifyPackageJson(pathToPackageJson, newKeyValues);
  }
  if (fromClassic) {
    await convertClassicAssets(newAppPath, appFolderName, appServerAdmin, appKey);
  }
}

module.exports = {createApp};
