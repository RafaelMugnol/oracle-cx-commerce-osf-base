/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

const path = require('path');
const fse = require('fs-extra');
const createTempDir = require('tmp-promise').dir;

const {mockConsole} = require('@oracle-cx-commerce/test/utils/console');
const {mockFetchResponse, clearMockResponses, Response} = require('node-fetch');

const {showVersions} = require('@oracle-cx-commerce/cli/actions/version');

const cliOptionsBase = {
  appServerAdmin: 'http://localhost:9080',
  appServerURL: 'http://localhost:9080',
  appKey: 'app.key==',
  serverEnv: 'development',
  serverConfig: {
    development: {
      appServerAdmin: 'http://localhost:9080',
      appServerURL: 'http://localhost:9080',
      appKey: 'app.key=='
    },
    prod: {
      appServerAdmin: 'http://prod-host:9080',
      appServerURL: 'http://prod-host:9080',
      appKey: 'prod.host.app.key=='
    }
  }
};

const mock = {
  responses: {
    200: {
      json: {
        ok: true,
        status: 200,
        statusText: 'OK',
        headers: {
          'Content-Type': 'application/json',
          'OracleCommerceCloud-Version': '21.1.11'
        }
      }
    },
    503: {
      html: {
        ok: false,
        status: 503,
        statusText: 'Service Unavailable',
        headers: {'Content-Type': 'text/html'}
      }
    }
  },
  load: origin => ({
    registry: {
      response: {
        200: () => {
          mockFetchResponse(`${origin}/ccadmin/v1/registry/`, new Response('{}', mock.responses[200].json), {
            method: 'HEAD'
          });
        },
        503: () => {
          mockFetchResponse(
            `${origin}/ccadmin/v1/registry/`,
            new Response('<body>Service Unavailable</body>', mock.responses[503].html)
          );
        }
      }
    }
  }),
  clear: () => clearMockResponses()
};

async function withWorkingDirectory(newWorkingDirectory, subroutine) {
  const originalWorkingDirectory = process.cwd();
  try {
    process.chdir(newWorkingDirectory);
  } catch (error) {
    throw new Error(`Could not change working directory to '${newWorkingDirectory}', reason: ${error}`);
  }
  console.debug(`Changed working directory to '${newWorkingDirectory}'.`);

  let output;
  let rejectionReason;
  try {
    output = await subroutine();
  } catch (reason) {
    rejectionReason = reason;
  } finally {
    process.chdir(originalWorkingDirectory);
    console.debug(`Returning working directory to '${originalWorkingDirectory}'.`);
  }

  if (rejectionReason) {
    throw rejectionReason;
  } else {
    return output;
  }
}

const appPackageJsonPath = appName => path.join(`packages/apps/${appName}/package.json`);
const appPackageJsonData = (name, version) => ({
  name,
  version,
  private: true,
  description: 'My Oracle Cloud Commerce Storefront Template Application'
});

jest.mock('@oracle-cx-commerce/cli/package.json', () => {
  const cliPackageJsonData = version => ({
    name: '@oracle-cx-commerce/cli',
    version
  });

  return cliPackageJsonData('2.44.4');
});

describe('Tool behavior', () => {
  describe('List all OSF elements', () => {
    let tempDir;
    const cliOptions = {...cliOptionsBase};

    beforeAll(async () => {
      try {
        tempDir = await createTempDir({
          unsafeCleanup: true,
          // dir: path.resolve('.'),
          prefix: 'tests-temp-dir'
        });

        const workDir = tempDir.path;

        let appName = 'my-blank-store';
        let version = '2.33.3';
        let filePath = path.join(workDir, appPackageJsonPath(appName));
        await fse.outputJson(filePath, appPackageJsonData(appName, version));

        appName = 'my-core-commerce-reference-store';
        version = '2.22.2';
        filePath = path.join(workDir, appPackageJsonPath(appName));
        await fse.outputJson(filePath, appPackageJsonData(appName, version));

        appName = 'an-empty-dir-store';
        version = '2.55.5';
        filePath = path.join(workDir, appPackageJsonPath(appName).replace('package.json', ''));
        await fse.ensureDir(filePath);

        appName = 'a-missing-version-store';
        version = '2.22.2';
        filePath = path.join(workDir, appPackageJsonPath(appName));
        await fse.outputJson(filePath, appPackageJsonData(appName, undefined));
      } catch (error) {
        expect(error).toBeUndefined();
      }
    });

    afterAll(() => {
      // Delete the temporary work directory
      tempDir.cleanup();
    });

    test('No options specified.', async () => {
      await mockConsole(['log', 'debug'], async () => {
        mock.load('http://localhost:9080').registry.response[200]();

        await withWorkingDirectory(tempDir.path, async () => {
          await expect(showVersions(cliOptions)).resolves.not.toThrow();
        });

        expect(console.debug.mock.calls[0][0]).toMatch(/Changed working directory to '.+tests-temp-dir-.+'/);
        expect(console.log.mock.calls[0][0]).toMatch('Versions:');
        expect(console.log.mock.calls[1][0]).toMatch(/OSF CLI: 2.44.4/);
        expect(console.log.mock.calls[2][0]).toMatch(/a-missing-version-store: Not available/);
        expect(console.log.mock.calls[3][0]).toMatch(/my-blank-store: 2.33.3/);
        expect(console.log.mock.calls[4][0]).toMatch(/my-core-commerce-reference-store: 2.22.2/);
        expect(console.log.mock.calls[5][0]).toMatch(/OCC server: 21.1.11/);
        expect(console.debug.mock.calls[1][0]).toMatch(/Returning working directory to '.+'/);

        mock.clear();
      });
    });

    test("Using '--serverEnv' option.", async () => {
      await mockConsole(['log', 'debug'], async () => {
        mock.load('http://prod-host:9080').registry.response[200]();

        const cliOptionsWithServerEnv = {
          ...cliOptions,
          serverEnv: 'prod',
          ...cliOptions.serverConfig['prod']
        };

        await withWorkingDirectory(tempDir.path, async () => {
          await expect(showVersions(cliOptionsWithServerEnv)).resolves.not.toThrow();
        });

        expect(console.debug.mock.calls[0][0]).toMatch(/Changed working directory to '.+tests-temp-dir-.+'/);
        expect(console.log.mock.calls[0][0]).toMatch('Versions:');
        expect(console.log.mock.calls[1][0]).toMatch(/OSF CLI: 2.44.4/);
        expect(console.log.mock.calls[2][0]).toMatch(/a-missing-version-store: Not available/);
        expect(console.log.mock.calls[3][0]).toMatch(/my-blank-store: 2.33.3/);
        expect(console.log.mock.calls[4][0]).toMatch(/my-core-commerce-reference-store: 2.22.2/);
        expect(console.log.mock.calls[5][0]).toMatch(/OCC server: 21.1.11/);
        expect(console.debug.mock.calls[1][0]).toMatch(/Returning working directory to '.+'/);

        mock.clear();
      });
    });

    test("Using '--appServerAdmin' option.", async () => {
      await mockConsole(['log', 'debug'], async () => {
        mock.load('http://an-admin-host:9080').registry.response[200]();

        const cliOptionsWithServerAdmin = {
          ...cliOptions,
          appServerAdmin: 'http://an-admin-host:9080',
          appServerURL: 'http://an-admin-host:9080'
        };

        await withWorkingDirectory(tempDir.path, async () => {
          await expect(showVersions(cliOptionsWithServerAdmin)).resolves.not.toThrow();
        });

        expect(console.debug.mock.calls[0][0]).toMatch(/Changed working directory to '.+tests-temp-dir-.+'/);
        expect(console.log.mock.calls[0][0]).toMatch('Versions:');
        expect(console.log.mock.calls[1][0]).toMatch(/OSF CLI: 2.44.4/);
        expect(console.log.mock.calls[2][0]).toMatch(/a-missing-version-store: Not available/);
        expect(console.log.mock.calls[3][0]).toMatch(/my-blank-store: 2.33.3/);
        expect(console.log.mock.calls[4][0]).toMatch(/my-core-commerce-reference-store: 2.22.2/);
        expect(console.log.mock.calls[5][0]).toMatch(/OCC server: 21.1.11/);
        expect(console.debug.mock.calls[1][0]).toMatch(/Returning working directory to '.+'/);

        mock.clear();
      });
    });

    test('Server check failed', async () => {
      await mockConsole(['log', 'debug'], async () => {
        mock.load('http://a-busy-host:9080').registry.response[503]();

        const cliOptionsWithServerAdmin = {
          ...cliOptions,
          appServerAdmin: 'http://a-busy-host:9080',
          appServerURL: 'http://a-busy-host:9080'
        };

        await withWorkingDirectory(tempDir.path, async () => {
          await expect(showVersions(cliOptionsWithServerAdmin)).resolves.not.toThrow();
        });

        expect(console.debug.mock.calls[0][0]).toMatch(/Changed working directory to '.+tests-temp-dir-.+'/);
        expect(console.log.mock.calls[0][0]).toMatch('Versions:');
        expect(console.log.mock.calls[1][0]).toMatch(/OSF CLI: 2.44.4/);
        expect(console.log.mock.calls[2][0]).toMatch(/a-missing-version-store: Not available/);
        expect(console.log.mock.calls[3][0]).toMatch(/my-blank-store: 2.33.3/);
        expect(console.log.mock.calls[4][0]).toMatch(/my-core-commerce-reference-store: 2.22.2/);
        expect(console.log.mock.calls[5][0]).toMatch(/OCC server: Network request failed/);
        expect(console.debug.mock.calls[1][0]).toMatch(/Returning working directory to '.+'/);

        mock.clear();
      });
    });
  });
});
