/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {determineUpgradeVersion, checkForDowngrade} = require('../upgrade');

test('checkForDowngrade throws error on downgrade, unless param', () => {
  expect(() => checkForDowngrade('1.0.0', '0.9.0')).toThrowError();
  expect(() => checkForDowngrade('1.1.0', '1.0.0')).toThrowError();
  expect(() => checkForDowngrade('1.0.1', '1.0.0')).toThrowError();

  expect(checkForDowngrade('1.0.0', '0.9.0', undefined, {acceptDowngrade: true})).toBeTruthy();
  expect(checkForDowngrade('1.1.0', '1.0.0', undefined, {acceptDowngrade: true})).toBeTruthy();

  expect(checkForDowngrade('1.0.1', '1.0.0', undefined, {force: true})).toBeTruthy();
});

test('checkForDowngrade does not throw on upgrade/equal', () => {
  expect(checkForDowngrade('1.0.0', '2.9.0')).toBeFalsy();
  expect(checkForDowngrade('1.0.0', '1.9.0')).toBeFalsy();
  expect(checkForDowngrade('1.0.0', '1.0.1')).toBeFalsy();
  expect(checkForDowngrade('1.0.0', '1.0.0')).toBeFalsy();
});

test('determineUpgradeVersion given version cases', () => {
  // Throws if given version wasn't found in registry
  const osfVersions = {'1.2.0': {occ: {minVersion: '20.1.0'}, engines: {node: process.version}}};
  expect(() => determineUpgradeVersion('1.1.0', undefined, undefined, osfVersions)).toThrowError();
  // Unless force is used
  expect(determineUpgradeVersion('1.1.0', undefined, undefined, osfVersions, {force: true})).toBe('1.1.0');

  // Put 1.1.0 in the array but pretend it doesn't have OCC version defined
  osfVersions['1.1.0'] = {};
  expect(determineUpgradeVersion('1.1.0', undefined, undefined, osfVersions)).toBe('1.1.0');
  // Uses default OCC version of 20.3
  expect(determineUpgradeVersion('1.1.0', undefined, '20.3', osfVersions, {verifyOcc: true})).toBe('1.1.0');
  expect(() => determineUpgradeVersion('1.1.0', undefined, '20.2', osfVersions, {verifyOcc: true})).toThrowError();
  expect(determineUpgradeVersion('1.1.0', undefined, '20.2', osfVersions, {verifyOcc: true, force: true})).toBe(
    '1.1.0'
  );
  // Respects version from osfVersions entry
  osfVersions['1.1.0'] = {occ: {minVersion: '20.4'}, engines: {node: process.version}};
  expect(() => determineUpgradeVersion('1.1.0', undefined, '20.3', osfVersions, {verifyOcc: true})).toThrowError();
  expect(determineUpgradeVersion('1.1.0', undefined, '20.4', osfVersions, {verifyOcc: true})).toBe('1.1.0');

  // Throw on Node incompatibility
  expect(() =>
    determineUpgradeVersion('1.1.0', undefined, '20.3', osfVersions, {LOCAL_NODE_VERSION: 'v8.1.0'})
  ).toThrowError();
  // Unless force is true
  expect(
    determineUpgradeVersion('1.1.0', undefined, '20.3', osfVersions, {LOCAL_NODE_VERSION: 'v8.1.0', force: true})
  ).toBe('1.1.0');
});

const osfVersions = {
  '1.11.0': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '1.11.0',
    files: ['occ.manifest.json'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    _id: '@oracle-cx-commerce/occ-metadata@1.11.0',
    dist: {
      shasum: '54d7e7059cdd877eb6979bde9b06536f961dec94',
      integrity: 'sha512-MFkknnZPMPwrECBQW/vbjGPaNwRWIqtWZGanEk/Gkz6VXDv39+y0gcQyoE4xwE8SbHgyl/yb43jVLbQxQrNRhA==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-1.11.0.tgz'
    },
    contributors: []
  },
  '1.12.0': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '1.12.0',
    files: ['occ.manifest.json'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    _id: '@oracle-cx-commerce/occ-metadata@1.12.0',
    dist: {
      shasum: '5abc0d11f1b5c67905c8bab6b2458a144f7085de',
      integrity: 'sha512-W7m1ITfiPjvSMFykMq1/5RAbfZ4AruE7ceMPZDe9UOx4KjOYdOx+cXsT1ltsXNb3HjKgvX8/w5f4lZiNbnb12w==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-1.12.0.tgz'
    },
    contributors: []
  },
  '2.0.0': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '2.0.0',
    files: ['occ.manifest.json', 'index.js'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    dependencies: {'@oracle-cx-commerce/logger': '2.0.0'},
    _id: '@oracle-cx-commerce/occ-metadata@2.0.0',
    dist: {
      shasum: 'c881b97e6dbf15a5fa27e16cc7e8c72f55dfd192',
      integrity: 'sha512-mel97IsKl3XS82wJkhQJyzayLIlFxAbLiowIpKi3z3dPvCAb5by2ZvbF28hvOWbFHkBvnYq0e1mNwEdC3LfZIg==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-2.0.0.tgz'
    },
    contributors: [],
    engines: {node: '12.x'}
  },
  '2.0.1': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '2.0.0',
    files: ['occ.manifest.json', 'index.js'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    dependencies: {'@oracle-cx-commerce/logger': '2.0.0'},
    occ: {minVersion: '20.3.3'},
    _id: '@oracle-cx-commerce/occ-metadata@2.0.0',
    dist: {
      shasum: 'c881b97e6dbf15a5fa27e16cc7e8c72f55dfd192',
      integrity: 'sha512-mel97IsKl3XS82wJkhQJyzayLIlFxAbLiowIpKi3z3dPvCAb5by2ZvbF28hvOWbFHkBvnYq0e1mNwEdC3LfZIg==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-2.0.0.tgz'
    },
    contributors: []
  },
  '2.1.0': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '2.1.0',
    files: ['occ.manifest.json', 'index.js'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    dependencies: {'@oracle-cx-commerce/logger': '2.1.0'},
    occ: {minVersion: '20.3.5'},
    _id: '@oracle-cx-commerce/occ-metadata@2.1.0',
    dist: {
      shasum: '8a98ac680e67f65a2e3ae8228963484bd76a3c9a',
      integrity: 'sha512-b4v49yFTHJBNOiulWsqNbwdxfgcEm+L5823TSXsUi89Bdzrq5IvwN4xTz4mrMlGsBAxpBLs1hOnYW1cgxv6wQQ==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-2.1.0.tgz'
    },
    contributors: []
  },
  '2.2.0': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '2.2.0',
    files: ['occ.manifest.json', 'index.js'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    dependencies: {'@oracle-cx-commerce/logger': '2.2.0'},
    occ: {minVersion: '20.3.5'},
    _id: '@oracle-cx-commerce/occ-metadata@2.2.0',
    dist: {
      shasum: 'b2b12daa3d69e9d1b505fe7c7304e91a8507e2ee',
      integrity: 'sha512-SslB+OmBs81477v9znrbEcPdE1JUAn+n9a0OJnx143vPn50FBHbxE0N6vZej2aKzS4I8pTeG6I8fg1lMPDrpTw==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-2.2.0.tgz'
    },
    contributors: [],
    engines: {node: '12.x || 14.x'}
  },
  '2.2.1-SNAPSHOT': {
    name: '@oracle-cx-commerce/occ-metadata',
    version: '2.2.1-SNAPSHOT',
    files: ['occ.manifest.json', 'index.js'],
    devDependencies: {'@yarnpkg/lockfile': '1.1.0', glob: '7.1.6'},
    dependencies: {'@oracle-cx-commerce/logger': '2.2.1-SNAPSHOT'},
    occ: {minVersion: '20.3.5'},
    _id: '@oracle-cx-commerce/occ-metadata@2.2.1-SNAPSHOT',
    dist: {
      shasum: '8f06fc917eea1032140ea3ad1f0164294341b23a',
      integrity: 'sha512-WgAkzcv7Jj4t493il2G6D10pgYFEcaPm2VFAFREViPU3g4cXinOR4RW+E4uRQNxgoxScUEdJxIFfOhyPQY3A9w==',
      tarball: 'http://slc12krx.us.oracle.com:4873/@oracle-cx-commerce%2focc-metadata/-/occ-metadata-2.2.1-SNAPSHOT.tgz'
    },
    contributors: [],
    engines: {node: '12.x'}
  }
};

test('determineUpgradeVersion find version use cases', () => {
  // osf versions 1.11, 1.12, 2.0, 2.0.1, 2.1.0, 2.2.0, 2.2.1-SNAPSHOT
  // Upgrades within major version
  const opts = {LOCAL_NODE_VERSION: 'v12.22.1'};
  expect(determineUpgradeVersion(null, '1.11.0', null, osfVersions, opts)).toBe('1.12.0');
  expect(determineUpgradeVersion(null, '2.0.0', null, osfVersions, opts)).toBe('2.2.1-SNAPSHOT');
  expect(determineUpgradeVersion(null, '2.5.0', null, osfVersions, opts)).toBe('2.2.1-SNAPSHOT'); // also downgrades
  expect(() => determineUpgradeVersion(null, '3.0.0', null, osfVersions, opts)).toThrowError();
  // Unless --latest option is used, then it'll get whatever
  expect(determineUpgradeVersion(null, '1.11.0', null, osfVersions, {...opts, latest: true})).toBe('2.2.1-SNAPSHOT');
  expect(determineUpgradeVersion(null, '3.0.0', null, osfVersions, {...opts, latest: true})).toBe('2.2.1-SNAPSHOT');

  // Respects OCC version limit
  expect(() => determineUpgradeVersion(null, '1.11.0', '20.2', osfVersions, {...opts, verifyOcc: true})).toThrowError();
  expect(determineUpgradeVersion(null, '1.11.0', '20.3', osfVersions, {...opts, verifyOcc: true})).toBe('1.12.0');
  expect(determineUpgradeVersion(null, '1.11.0', '20.3', osfVersions, {...opts, verifyOcc: true, latest: true})).toBe(
    '2.0.0'
  );
  expect(determineUpgradeVersion(null, '2.0.0', '20.3', osfVersions, {...opts, verifyOcc: true})).toBe('2.0.0');
  expect(determineUpgradeVersion(null, '2.0.0', '20.3.4', osfVersions, {...opts, verifyOcc: true})).toBe('2.0.1');
  expect(determineUpgradeVersion(null, '2.0.0', '20.3.5', osfVersions, {...opts, verifyOcc: true})).toBe(
    '2.2.1-SNAPSHOT'
  );

  // Respects Node version limit
  expect(determineUpgradeVersion(null, '2.0.0', null, osfVersions, opts)).toBe('2.2.1-SNAPSHOT');
  expect(determineUpgradeVersion(null, '2.0.0', null, osfVersions, {LOCAL_NODE_VERSION: 'v14.10.0'})).toBe('2.2.0');
  expect(() =>
    determineUpgradeVersion(null, '2.0.0', null, osfVersions, {LOCAL_NODE_VERSION: 'v8.10.0'})
  ).toThrowError();
});
