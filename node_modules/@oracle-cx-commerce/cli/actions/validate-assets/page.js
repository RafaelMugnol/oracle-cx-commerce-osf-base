/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs-extra');
const logger = require('@oracle-cx-commerce/logger/cli');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});

const PATH_TO_PAGES = path.join('assets', 'pages');
const MAX_LENGTH = 254;
const MAX_WIDTH = 12;
const MIN_WIDTH = 0;
const VALID_REGION_TYPES = ['header', 'main', 'footer'];

class Page {
  /**
   * Initialize a Container Object
   * @param {*} pageFileName File name of the Container
   * @param {*} appDir
   */
  constructor(pageFileName, appDir) {
    this.appDir = appDir;
    this.pageFileName = pageFileName;
    this.path = path.join(appDir, PATH_TO_PAGES, pageFileName);

    this.foundIssues = [];

    this.pageFileContent = null;
    this.aggregatePageReferences = [];
    this.aggregatePageSlotsReferences = [];

    /**
     * Run a series of functions to populate the above fields
     */
    this.processPageFile();
  }

  /**
   * Validate required property
   * @param {*} obj Layout entry
   * @param {*} propertyName Name of the property
   * @param {*} fn Function that validates the type of a property
   * @param {*} appDir
   */
  validateRequiredProperty(obj, propertyName, fn, entryIndex) {
    if (!Object.prototype.hasOwnProperty.call(obj, propertyName)) {
      this.foundIssues.push(___`\t - layout entry #${entryIndex + 1} is missing the '${propertyName}' property.`);
    } else if (!fn(obj[propertyName])) {
      this.foundIssues.push(
        ___`\t - the type of ${propertyName} property in layout entry #${entryIndex + 1} is invalid.`
      );
    }
  }
  /**
   * - Checks if pageFile exists
   * - Checks if pageFile contains a valid JSON Object
   */
  processPageFile() {
    const pageJsonData = fs.readFileSync(this.path, 'utf-8');
    let parsedPageJsonData;
    try {
      parsedPageJsonData = JSON.parse(pageJsonData);
    } catch (error) {
      this.foundIssues.push(___`\t -  contains an invalid JSON object.`);

      return;
    }

    if (!parsedPageJsonData.shortName) {
      this.foundIssues.push(___`\t -  page is missing 'shortName' property.`);
    }

    if (parsedPageJsonData.shortName && parsedPageJsonData.shortName.length > MAX_LENGTH) {
      this.foundIssues.push(
        ___`\t - page has 'shortName' property with an invalid value that exceeds ${MAX_LENGTH} characters.`
      );
    }

    if (!parsedPageJsonData.address) {
      this.foundIssues.push(___`\t - page is missing 'address' property.`);
    }

    if (parsedPageJsonData.address && parsedPageJsonData.address.length > MAX_LENGTH) {
      this.foundIssues.push(
        ___`\t - page has 'address' property with an invalid value that exceeds ${MAX_LENGTH} characters.`
      );
    }
    if (parsedPageJsonData.secured) {
      if (typeof parsedPageJsonData.secured !== 'boolean') {
        this.foundIssues.push(___`\t - page has 'secured' property with an invalid type that is not a boolean.`);
      }
    }

    if (parsedPageJsonData.pageTypeDisplayName) {
      if (
        typeof parsedPageJsonData.pageTypeDisplayName != 'object' ||
        (typeof parsedPageJsonData.pageTypeDisplayName == 'object' &&
          Array.isArray(parsedPageJsonData.pageTypeDisplayName))
      ) {
        this.foundIssues.push(
          ___`\t - page has 'pageTypeDisplayName' property with an invalid type that is not a JSON object.`
        );
      }
    }
    if (parsedPageJsonData.defaultPage) {
      if (typeof parsedPageJsonData.defaultPage !== 'boolean') {
        this.foundIssues.push(___`\t - page has 'defaultPage' property with an invalid type that is not a boolean.`);
      }
    }
    if (!parsedPageJsonData.title) {
      this.foundIssues.push(___`\t - page missing 'title' property.`);
    }
    if (parsedPageJsonData.title && parsedPageJsonData.title.length > MAX_LENGTH) {
      this.foundIssues.push(
        ___`\t - page has 'title' property with an invalid value that exceeds ${MAX_LENGTH} characters.`
      );
    }
    if (parsedPageJsonData.allowCustomAddress) {
      if (typeof parsedPageJsonData.allowCustomAddress !== 'boolean') {
        this.foundIssues.push(
          ___`\t - page has 'allowCustomAddress' property with an invalid type that is not a boolean.`
        );
      }
    }
    if (parsedPageJsonData.settings) {
      if (
        typeof parsedPageJsonData.settings != 'object' ||
        (typeof parsedPageJsonData.settings == 'object' && Array.isArray(parsedPageJsonData.settings))
      ) {
        this.foundIssues.push(___`\t - page has 'settings' property with an invalid type that is not a JSON object.`);
      }
    }
    if (!parsedPageJsonData.layout) {
      this.foundIssues.push(___`\t - page is missing 'layout' property.`);

      return;
    }
    if (!Array.isArray(parsedPageJsonData.layout)) {
      this.foundIssues.push(___`\t - 'layout' property contains an invalid type that is not an array.`);

      return;
    }
    if (parsedPageJsonData.layout.length === 0) {
      logger.warn(___`'${this.path}'`);
      logger.warn(___`\t - 'layout' property contains 0 regions defined.`);
    }
    //Check whether the 'components' property is included in the entire page JSON
    const components = Object.values(parsedPageJsonData.layout);
    const checkIfComponentsPropertyExists = property =>
      components.some(object => Object.keys(object).includes(property));
    const ifPropertyExists = checkIfComponentsPropertyExists('components');
    if (parsedPageJsonData.layout.length !== 0 && ifPropertyExists === false) {
      this.foundIssues.push(___`\t - page is missing 'components' property.`);
    }

    this.validatePageLayoutEntries(parsedPageJsonData.layout);
    this.pageFileContent = parsedPageJsonData;
    this.pageLayout = parsedPageJsonData.layout;
    this.shortName = parsedPageJsonData.shortName;
    this.address = parsedPageJsonData.address;
    this.title = parsedPageJsonData.title;
    this.aggregatePageReferences = this.parseLayoutForPages(this.pageLayout);
    this.aggregatePageSlotsReferences = this.parseSlotsForPages(this.pageLayout);
  }

  /**
   * Iterate over each entry in the 'layout' property of pageFileName
   * @param {} pageLayoutEntries
   * @returns {Boolean} true if no issues were found, false otherwise
   */
  validatePageLayoutEntries(pageLayoutEntries) {
    pageLayoutEntries.forEach((layoutEntry, entryIndex) => {
      if (layoutEntry.displayName) {
        if (typeof layoutEntry.displayName !== 'string') {
          this.foundIssues.push(___`\t - 'displayName' property contains an invalid type that is not a string.`);
        }
        if (layoutEntry.displayName.length > MAX_LENGTH) {
          this.foundIssues.push(
            ___`\t - entry #${
              entryIndex + 1
            } has a 'displayName' property with an invalid value that exceeds ${MAX_LENGTH} characters.`
          );
        }
      }
      this.validateRequiredProperty(layoutEntry, 'width', Number.isInteger, entryIndex);
      if (Number.isInteger(layoutEntry.width) && (layoutEntry.width > MAX_WIDTH || layoutEntry.width < MIN_WIDTH)) {
        this.foundIssues.push(
          ___`\t - entry #${
            entryIndex + 1
          } has a 'width' property with an invalid value that is greater than ${MAX_WIDTH} or less than ${MIN_WIDTH}.`
        );
      }
      if (layoutEntry.type) {
        if (!VALID_REGION_TYPES.includes(layoutEntry.type)) {
          this.foundIssues.push(
            ___`\t - layout regions entry #${
              entryIndex + 1
            } 'type' property is invalid, 'type' must be one of ${VALID_REGION_TYPES.join(', ')}.`
          );
        }
      }
      if (layoutEntry.resources) {
        if (
          typeof layoutEntry.resources != 'object' ||
          (typeof layoutEntry.resources == 'object' && Array.isArray(layoutEntry.resources))
        ) {
          this.foundIssues.push(
            ___`\t - page has 'resources' property with an invalid type that is not a JSON object.`
          );
        }
      }
      if (layoutEntry.structure === 'slot') {
        if (!layoutEntry.slot) {
          this.foundIssues.push(___`\t - page is missing 'slot' property.`);
        }
      }
    });
  }

  /**
   * Iterates over the entries of the `layout` object coming from the page File
   */
  parseLayoutForPages(pageLayout) {
    const aggregatedEntries = [];
    pageLayout.forEach(layoutEntry => {
      if (layoutEntry.components && Array.isArray(layoutEntry.components)) {
        aggregatedEntries.push(...layoutEntry.components);
      }
    });

    return aggregatedEntries;
  }

  parseSlotsForPages(pageLayout) {
    const aggregatedSlotsEntries = [];
    pageLayout.forEach(layoutEntry => {
      if (layoutEntry.slot) {
        aggregatedSlotsEntries.push(layoutEntry.slot);
      }
    });

    return aggregatedSlotsEntries;
  }
}

module.exports = {
  Page,
  PATH_TO_PAGES
};
