/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {validateAssets} = require('@oracle-cx-commerce/cli/actions/validate-assets/index');

const coreCommerceReferenceStoreOptions = {
  appName: 'core-commerce-reference-store',
  userName: 'dev',
  name: 'exampleAssetValidation',
  appDir: path.resolve(
    path.relative('.', __dirname),
    'validation-examples',
    'container-examples',
    'core-commerce-reference-store'
  )
};

const pathToSampleAppJson = path.resolve(path.relative('.', __dirname), 'validation-examples', 'sample-app.json');
const mockAppJson = JSON.parse(fs.readFileSync(pathToSampleAppJson, 'utf-8')).components;

jest.mock('@oracle-cx-commerce/cli/actions/validate-assets/asset-validation-utils.js', () => {
  const original = jest.requireActual('@oracle-cx-commerce/cli/actions/validate-assets/asset-validation-utils.js');

  return {
    ...original,
    isAppJsonPresent: jest.fn(() => true),
    getAppJsonComponents: jest.fn(() => mockAppJson)
  };
});

describe('validate-assets:all  -  all the tests that will invoke validate-assets with different options', () => {
  beforeAll(async () => {});
  afterAll(async () => {});

  test('validate-assets:validate-container-class-exists - check that container class is present', () => {
    const newPath = path.resolve(path.relative('.', __dirname), '..', 'container.js');
    expect(fs.existsSync(newPath)).toBeTruthy();
  });

  test('validate-assets:all-cases-pass-validation - check that all cases pass validation', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).resolves.not.toThrow();
  });

  test('validate-assets:check-title-does-not-exists - check proper messages shows up when title property does not exists', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'missing-title-container',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-component-does-not-exists - check proper messages shows up when component property does not exists', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'missing-component-container',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-layout-does-not-exists - check proper messages shows up when layout property does not exists', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'missing-layout-container',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-container-has-correct-data-types - check proper messages shows up when wrong data type was found for title, component, width and components', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'wrong-data-type-container',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 4 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-width-value - check if width value is in a valid range', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'invalid-width-value',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-type-set-to-main - check if type property is set to main', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'type-set-to-main',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:check-no-duplicate-titles-across-containers - check if there is any duplicate title across different containers', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'duplicate-title-across-containers',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:validate-container-references - check if containers are referencing existing assets and base component exists', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'container-examples',
        'references-validation',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 2 issue(s). Please see issue(s) listed above.`
    );
  });
});
