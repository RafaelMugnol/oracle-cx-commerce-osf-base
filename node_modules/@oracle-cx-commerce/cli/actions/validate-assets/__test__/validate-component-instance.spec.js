/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs');

const {validateAssets} = require('@oracle-cx-commerce/cli/actions/validate-assets/index');

const coreCommerceReferenceStoreOptions = {
  appName: 'core-commerce-reference-store',
  userName: 'dev',
  name: 'exampleAssetValidation',
  appDir: path.resolve(
    path.relative('.', __dirname),
    'validation-examples',
    'component-examples',
    'core-commerce-reference-store'
  )
};

const pathToSampleAppJson = path.resolve(path.relative('.', __dirname), 'validation-examples', 'sample-app.json');
const mockAppJson = JSON.parse(fs.readFileSync(pathToSampleAppJson, 'utf-8')).components;

jest.mock('@oracle-cx-commerce/cli/actions/validate-assets/asset-validation-utils.js', () => {
  const original = jest.requireActual('@oracle-cx-commerce/cli/actions/validate-assets/asset-validation-utils.js');

  return {
    ...original,
    isAppJsonPresent: jest.fn(() => true),
    getAppJsonComponents: jest.fn(() => mockAppJson)
  };
});

describe('validate-assets:all  -  all the tests that will invoke validate-assets with different options', () => {
  beforeAll(async () => {});
  afterAll(async () => {});

  test('validate-assets:validate-component-instance-class-exists - check that component instance class is present', () => {
    const newPath = path.resolve(path.relative('.', __dirname), '..', 'component-instance.js');
    expect(fs.existsSync(newPath)).toBeTruthy();
  });

  test('validate-assets:all-cases-pass-validation - check that all cases pass validation', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).resolves.not.toThrow();
  });

  test('validate-container:check-index.json - check proper errors are thrown when index.json file is missing, or missing type property', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'index-validation',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 2 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-container:check-layout.json - check proper error is thrown when layout.json file is missing regions property', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'layout-validation',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-container:check-layout.json-entry - check proper errors are thrown when layout.json entry is missing components and width property and contains invalid value for width and type', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'layout-entry-validation',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 4 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-container:check-structure.json - check proper error is thrown when structure.json entry is missing regions property or contain invalid properties', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'structure-validation',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 5 issue(s). Please see issue(s) listed above.`
    );
  });

  test('validate-assets:validate-component-instance-references - check if component instances are referencing existing assets', async () => {
    const options = {
      ...coreCommerceReferenceStoreOptions,
      appDir: path.resolve(
        path.relative('.', __dirname),
        'validation-examples',
        'component-examples',
        'check-references',
        'core-commerce-reference-store'
      )
    };
    await expect(validateAssets(options.appName, options)).rejects.toThrow(
      `Asset validation failed, found 1 issue(s). Please see issue(s) listed above.`
    );
  });
});
