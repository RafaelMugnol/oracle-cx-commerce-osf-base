/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */
const path = require('path');
const fs = require('fs-extra');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});

const PATH_TO_GLOBAL_RESOURCES = path.join('src', 'locales');
const MAX_GLOBAL_RESOURCE_NAME_LENGTH = 50;
const MAX_GLOBAL_RESOURCES_LENGTH = 500;

class GlobalResource {
  /**
   * Initialize a Global Resource Object
   * @param {*} globalResourcesFileName File name of the Container
   * @param {*} appDir
   */
  constructor(globalResourcesFileName, appDir) {
    this.appDir = appDir;
    this.globalResourcesFileName = globalResourcesFileName;
    this.path = path.join(appDir, PATH_TO_GLOBAL_RESOURCES, globalResourcesFileName);

    this.foundIssues = [];

    this.globalResourcesFileContent = null;

    if (this.globalResourcesFileName.length > MAX_GLOBAL_RESOURCE_NAME_LENGTH) {
      throw new Error(
        ___`Global Resource file name exceeds the maximum length of ${MAX_GLOBAL_RESOURCE_NAME_LENGTH} characters.`
      );
    }
    /**
     * Run a function to populate the above fields
     */
    this.processGlobalResourcesFile();
  }

  processGlobalResourcesFile() {
    if (fs.pathExistsSync(this.path)) {
      const globalResourceJsonData = fs.readFileSync(this.path, 'utf-8');
      let parsedGlobalResourcesJsonData;
      try {
        parsedGlobalResourcesJsonData = JSON.parse(globalResourceJsonData);
      } catch (error) {
        this.foundIssues.push(___`\t - contains an invalid JSON object.`);

        return;
      }

      const globalResources = Object.keys(parsedGlobalResourcesJsonData);

      globalResources.forEach(entry => {
        const localesEntryKeys = Object.keys(parsedGlobalResourcesJsonData[entry]);
        localesEntryKeys.forEach(key => {
          const entryValue = parsedGlobalResourcesJsonData[entry][key];
          if (entryValue.length > MAX_GLOBAL_RESOURCES_LENGTH) {
            this.foundIssues.push(
              ___`\t - locales '${entry}' has an invalid entry ${key} which exceeds max length of ${MAX_GLOBAL_RESOURCES_LENGTH} characters.`
            );
          }
        });
      });
      this.globalResourcesFileContent = parsedGlobalResourcesJsonData;
    }
  }
}

module.exports = {
  GlobalResource,
  PATH_TO_GLOBAL_RESOURCES
};
