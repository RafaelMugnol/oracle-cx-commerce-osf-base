/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const {Client} = require('@oracle-cx-commerce/tools-util/rest-client');
const logger = require('@oracle-cx-commerce/logger/cli');
const path = require('path');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});

// Map of request handler functions, keyed by server URL.
const requestHandlers = {};

/**
 * Create a REST client for a specific URL.
 *
 * @param {String} url The URL of the server
 * @param {String} appKey A string to perform authentication on the server (optional)
 * @return {Object} The client object
 */
const createClient = async (url, appKey) => {
  try {
    const client = new Client(url, appKey);
    if (appKey) {
      await client.login();
    }

    return client;
  } catch (e) {
    logger.error(___`Unable to connect to server ${url}`);
    logger.error(e.message);
    if (e.response && (e.response.status === 400 || e.response.status === 401)) {
      logger.error(___`The provided appKey may be incorrect`);
    }

    throw e;
  }
};

/**
 * Issue a REST request.
 *
 * @param {Object} client The REST client object
 * @param {String} options.method Request method (default: 'get')
 * @param {String} options.path Request path (required)
 * @param {Object} options.body An object to be converted to the request body JSON string (optional)
 * @param {String} options.content The path of a module that exports an object to be converted to the request body JSON string (optional)
 * @param {String} options.payload The request body JSON string (optional)
 * @return {Object} The response
 */
const issueRequest = async (client, options) => {
  const {method = 'get'} = options;
  const opts = {
    method,
    url: options.path,
    responseType: 'json'
  };
  if (options.body || options.content || options.payload) {
    opts.headers = {
      'Content-Type': 'application/json; charset=UTF-8'
    };
    if (options.body) {
      opts.body = JSON.stringify(options.body);
    } else if (options.content) {
      opts.body = JSON.stringify(require(options.content));
    } else {
      opts.body = options.payload;
    }
  }
  const response = await client.request(opts);

  return response;
};

/**
 * Get a function for issuing REST requests to a specific server.
 *
 * @param {String} url The URL of the server
 * @param {String} appKey A string to perform authentication on the server
 * @return {Function} The request handler
 */
const getRequestHandler = async (url, appKey) => {
  if (!requestHandlers[url]) {
    const client = await createClient(url, appKey);
    if (client) {
      requestHandlers[url] = async options => {
        const response = await issueRequest(client, options);

        return response;
      };
    }
  }

  return requestHandlers[url];
};

module.exports = {
  getRequestHandler
};
