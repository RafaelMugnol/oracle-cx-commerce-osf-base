/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

const logger = require('@oracle-cx-commerce/logger/cli');
const path = require('path');
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: path.join(__dirname, './locales')});
const {listFiles} = require('@oracle-cx-commerce/tools-util/files');
const {guidedSearch} = require('@oracle-cx-commerce/cli/actions/endpoint/guided-search');
const {getRequestHandler} = require('./request-handler');

/**
 * Determine if the search config has already been uploaded. Note
 * that we are actually just checking for the presence of the site config.
 *
 * @param {Function} requestHandler Function to issue REST requests
 * @return {Boolean} True if the configuration exists
 */
const doesSearchConfigExist = async (requestHandler, page) => {
  try {
    await requestHandler({
      method: 'get',
      path: guidedSearch.admin.pageConfigUrl({page})
    });

    return true;
  } catch (e) {
    if (e.response && e.response.status === 404) {
      return false;
    }
    throw e;
  }
};

/**
 * Attempt to delete the existing search configuration.
 *
 * @param {Function} requestHandler Function to issue REST requests
 */
const deleteConfiguration = async (requestHandler, page) => {
  logger.info(___`Deleting existing search configuration`);
  await requestHandler({
    method: 'delete',
    path: guidedSearch.admin.pageConfigUrl({page})
  });
};

/**
 * Attempt to create the search configuration.
 *
 * @param {Function} requestHandler Function to issue REST requests
 */
const postSearchConfiguration = async (requestHandler, page, body) =>
  requestHandler({
    method: 'post',
    path: guidedSearch.admin.pageConfigUrl({page}),
    body
  });

const createSearchConfiguration = async (requestHandler, {file, page}) => {
  logger.info(___`Creating config for page '${page}'.`);
  const searchConfigPath = path.resolve(file);
  const body = require(searchConfigPath);

  return postSearchConfiguration(requestHandler, page, body);
};

/**
 * CLI action function that uploads the search configuration.
 *
 * @param {String} appName The name of the application (unused)
 * @param {String} options.appServerAdmin The URL of the server
 * @param {String} options.appKey A string to perform authentication on the server
 */
const uploadSearchConfig = async (appName, options) => {
  try {
    const url = options.appServerAdmin;
    logger.info(___`Connecting to admin server '${url}'`);
    const requestHandler = await getRequestHandler(url, options.appKey);

    const appDirectory = options.appDir || `packages/apps/${appName}`;
    const searchConfigDirectory = 'config/search/config/pages';
    const siteConfigPath = path.join(appDirectory, searchConfigDirectory, guidedSearch.admin.siteHome);
    const osfSiteConfigPath = path.join(siteConfigPath, guidedSearch.admin.osfRootPage);
    const fileList = await listFiles({directory: osfSiteConfigPath, recursive: true});
    const configFilesList = fileList.filter(file => file.endsWith('.js'));
    // 'configFilesAndPagesMap' looks like `[{file: 'packages/apps/cloudlake/config/search/config/pages/Default/osf/catalog.js', page: 'osf/catalog'}, ...]`
    const configFilesAndPagesMap = configFilesList.map(file => ({
      file,
      page: file.replace('.js', '').replace(siteConfigPath, '')
    }));

    if (!configFilesAndPagesMap.length) {
      logger.info(___`No files to upload in the '${osfSiteConfigPath}' folder.`);

      return;
    }

    const rootPage = guidedSearch.admin.osfRootPage;
    if (await doesSearchConfigExist(requestHandler, rootPage)) {
      logger.info(___`Clearing out configuration for root page '/${rootPage}'.`);
      await deleteConfiguration(requestHandler, rootPage);
    }
    await postSearchConfiguration(requestHandler, rootPage, guidedSearch.admin.pageConfig);

    const campaign = configFilesAndPagesMap.map(async configFile =>
      createSearchConfiguration(requestHandler, configFile)
    );
    await Promise.all(campaign);
    logger.info(___`Done`);
  } catch (e) {
    logger.error(___`Error in upload-search-config`);
    throw e;
  }
};

module.exports = {
  doesSearchConfigExist,
  uploadSearchConfig
};
