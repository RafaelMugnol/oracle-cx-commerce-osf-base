/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

const fetch = require('@oracle-cx-commerce/http-client');
const path = require('path');
const fsp = require('fs').promises;
const {___} = require('@oracle-cx-commerce/tools-i18n').i18n({directory: require('path').join(__dirname, './locales')});

const appsDirectory = 'packages/apps';

/**
 * Version information object.
 * @typedef {Object} VersionObject
 * @property {string} id - Identifier.
 * @property {string} version - Version number.
 * @property {string} source - Data source.
 */

/**
 * Run a subroutine, but prevent any request error log.
 *
 * @param      {Function}  subroutine  The subroutine
 * @return     {Promise<*>}   Subroutine output.
 */
async function withoutRequestErrorLog(subroutine) {
  const disableRequestLog = process.env.DISABLE_REQUEST_LOG;
  process.env.DISABLE_REQUEST_LOG = 'true';
  const result = await subroutine();
  process.env.DISABLE_REQUEST_LOG = disableRequestLog;

  return result;
}

/**
 * Gets the workspace path.
 *
 * @return     {string}  The workspace path.
 */
const getWorkspacePath = () => process.cwd();

/**
 * Gets the CLI-tools version.
 *
 * @return     {VersionObject}  The CLI-tools version.
 */
function getCliVersion() {
  const cliPath = '@oracle-cx-commerce/cli/package.json';
  const cli = require(cliPath);

  return {id: 'OSF CLI', version: cli.version, source: cliPath};
}

/**
 * Gets the application version.
 *
 * @param      {string}  appName  The application name
 * @return     {VersionObject|undefined}  The application version, or 'undefined' if not found.
 */
function getAppVersion(appName) {
  const appPath = path.join(getWorkspacePath(), `${appsDirectory}/${appName}/package.json`);
  try {
    const app = require(appPath);

    return {id: appName, version: app.version, source: appPath};
  } catch {
    return undefined;
  }
}

/**
 * Gets the list of applications on the workspace.
 *
 * @return     {Promise<[string]>}  The application list.
 */
async function getAppList() {
  const appsPath = path.join(getWorkspacePath(), appsDirectory);
  const content = await fsp.readdir(appsPath, {withFileTypes: true});
  const directories = content.filter(item => item.isDirectory());
  const apps = directories.map(dir => dir.name);

  return apps;
}

/**
 * Gets the version of all applications on the workspace.
 *
 * @return     {Promise<[VersionObject]>}  The application list.
 */
async function getAppsVersionList() {
  const apps = await getAppList();
  const appsVersionList = apps.map(appName => getAppVersion(appName));
  const appsVersion = appsVersionList.filter(p => p);

  return appsVersion;
}

/**
 * Gets the OCC Admin server version.
 *
 * The version value returned is 'undefined' if the network request fails.
 *
 * @param      {Object}   cliOptions  The CLI options
 * @return     {Promise<VersionObject>}  The OCC server version.
 */
async function getOccAdminServerVersion(cliOptions) {
  const url = `${cliOptions.appServerURL}/ccadmin/v1/registry/`;
  const fetchOptions = {method: 'HEAD'};
  let occVersion;
  try {
    const response = await withoutRequestErrorLog(async () => fetch(url, fetchOptions));
    occVersion = response.headers.get('oraclecommercecloud-version');
  } catch (reason) {
    // Gulp network errors.
    occVersion = ___`Network request failed`;
  }

  return {id: 'OCC server', version: occVersion, source: url};
}

/**
 * Gather the version of all OSF elements of interest.
 *
 * @param      {Object}   cliOptions  The CLI options
 * @return     {Promise<[VersionObject]>}  List of OSF elements and their versions.
 */
async function gatherVersions(cliOptions) {
  const versions = [];
  versions.push(getCliVersion());
  const appList = await getAppsVersionList();
  versions.push(...appList);
  versions.push(await getOccAdminServerVersion(cliOptions));

  return versions;
}

/**
 * Shows the version of all OSF elements of interest.
 *
 * @param      {Object}   cliOptions  The CLI options.
 * @return     {Promise<undefined>}  Undefined.
 */
async function showVersions(cliOptions) {
  const versions = await gatherVersions(cliOptions);

  console.log(___`Versions:`);

  const notAvailable = ___`Not available`;
  const tab = '- ';
  versions.forEach(item => {
    const {id, version} = item;
    const versionValue = version || notAvailable;
    console.log(`${tab}${id}: ${versionValue}`);
  });
}

module.exports = {
  showVersions
};
