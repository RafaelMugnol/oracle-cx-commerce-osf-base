/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

export const getLang = (req, res) => {
  const {page} = res.locals;

  const {locale} = page.context;

  if (locale) {
    return locale.replace('_', '-');
  }
};

export const isRenderToString = req => {
  const {options} = req.app.locals;

  if (options.renderToString === false) {
    return false;
  }

  return true;
};

/**
 * Determine if an individual `resource` is storable.
 *
 * @param {any} resource
 * @returns {Boolean}
 */
const isIndividualResourceStorable = resource => {
  const {request, response} = resource;

  // Non GET request can't be cached
  if (request.method !== 'GET') {
    return false;
  }

  const {headers} = response;

  const cacheControl = (headers.get('Cache-Control') || '').toLowerCase();

  // "private" response contain user specific information and can't be put into a public cache
  // "no-cache" and "no-store" response should not be cached
  if (cacheControl.includes('private') || cacheControl.includes('no-cache') || cacheControl.includes('no-store')) {
    return false;
  }

  return true;
};

/**
 * Determine if any all of the resources are storable.
 *
 * @param {any[]} resources The (1 or more) resource(s) to be tested for storablility.
 * @returns {Boolean} `true` IFF all resources are storable, `false` if one or more is not storable.
 */
export function isStorable(...resources) {
  if (resources.length === 0) {
    return false;
  }

  for (const resource of resources) {
    if (isIndividualResourceStorable(resource) === false) {
      // If one or more of the pages composite resources is not store-able, then the page is not store-able.
      return false;
    }
  }

  return true;
}

/**
 * Utility to set additional state on the middleware chain. Additional state will be merged into the
 * initial store state, when the store instance is created, so you need to set the additional state
 * BEFORE `setStore` executes.
 *
 * @param {import('express').Response} res
 * @param {any} state
 */
export const setAdditionalState = (res, state) => {
  if (!Array.isArray(res.locals.additionalState)) {
    res.locals.additionalState = [];
  }

  res.locals.additionalState.push(state);
};
