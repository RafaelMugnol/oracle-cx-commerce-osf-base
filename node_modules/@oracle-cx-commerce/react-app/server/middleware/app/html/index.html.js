/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import getPostBodyHtml from '@oracle-cx-commerce/react-app/server/middleware/app/html/post-body.html';
import getHeadHtml from '@oracle-cx-commerce/react-app/server/middleware/app/html/head.html';
import {getLang, isRenderToString} from '@oracle-cx-commerce/react-app/server/middleware/app/utils';
import {renderToNodeStream, renderToString} from '@oracle-cx-commerce/react-ui/server';
import {getSite} from '@oracle-cx-commerce/commerce-utils/selector';

const logger = require('@oracle-cx-commerce/logger/server');

const getDocumentEnd = (req, res) => {
  const {app} = res;

  const {state} = res.locals;

  // Delete this property. It's only used for SSR and CAN'T be serialized to JSON.
  delete state.global;

  // Mask the auth token -- for security and cache-ability reasons
  if (!app.isApiTest && state.clientRepository?.context?.session?.token) {
    // Set token to `true` to indicate that the user is authenticated -- real token value can be restored from the cookie
    state.clientRepository.context.session.token = true;
  }

  // Need to encode state because of XSS security condiderations - https://redux.js.org/usage/server-rendering/#security-considerations
  // Need double stringify to escape "'" - https://v8.dev/features/subsume-json#embedding-json-parse
  const stringifiedState = JSON.stringify(encodeURI(JSON.stringify(state)));

  const postBodyHtml = getPostBodyHtml(req, res);

  // Need to decode the encoded state browser side so it can be understood
  // JSON.parse is faster - https://v8.dev/blog/cost-of-javascript-2019#json
  return `</div><div id="portal"></div><script>window.state = JSON.parse(decodeURI(${stringifiedState}))</script>${postBodyHtml}</body></html>`;
};

const getDocumentHead = (req, res) => {
  const {state} = res.locals;

  const lang = getLang(req, res);

  const headHtml = getHeadHtml(req, res);

  const {pageTags: {bodyStart = []} = {}} = getSite(state);

  return `<!DOCTYPE html><html id="oracle-cc" lang="${lang}"><head>${headHtml}</head><body>${bodyStart.join(
    ''
  )}<div id="root">`;
};

const writeDocumentWithRenderToNodeStream = (req, res) =>
  new Promise((resolve, reject) => {
    const {components} = req.app.locals;

    const {state} = res.locals;

    const app = renderToNodeStream({components, state});

    res.type('html');

    res.write(getDocumentHead(req, res));

    app.pipe(res, {end: false});

    app.on('end', () => {
      try {
        res.end(getDocumentEnd(req, res));

        resolve();
      } catch (error) {
        reject(error);
      }
    });

    app.on('error', reject);
  });

const writeDocumentWithRenderToString = (req, res) => {
  const {components} = req.app.locals;

  const {state} = res.locals;

  const head = getDocumentHead(req, res);

  const app = renderToString({components, state});

  const end = getDocumentEnd(req, res);

  res.locals.html = head + app + end;

  res.send(res.locals.html);
};

export default async (req, res) => {
  if (isRenderToString(req, res)) {
    writeDocumentWithRenderToString(req, res);
  } else {
    try {
      await writeDocumentWithRenderToNodeStream(req, res);
    } catch (error) {
      res.end('Internal Server Error');

      logger.error(error);
    }
  }
};
