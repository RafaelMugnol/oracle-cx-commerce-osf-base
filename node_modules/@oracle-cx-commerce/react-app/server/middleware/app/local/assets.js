/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import fs from 'fs';
import path from 'path';

/**
 * Reads a file from the local disk and returns a parsed JSON object of the contents.
 *
 * @param {string} location the file location on disk to read from
 */
export const readJson = location => {
  if (fs.existsSync(location)) {
    const json = fs.readFileSync(location);

    return JSON.parse(json);
  }
};

/**
 * Reads a file from the local disk and returns the HTML contents.
 *
 * @param {string} location the file location on disk to read from
 */
export const readHtml = location => {
  if (fs.existsSync(location)) {
    const html = fs.readFileSync(location);

    return html.toString();
  }
};

/**
 * Lists the files contained in the current directory with
 * an optional extension filter.
 *
 * @param {string} location the file location on disk to read from
 * @param {boolean} traverse whether or not to traverse any directories found
 * @param {string} extension optional file extension filter
 */
export const listFiles = (location, traverse, extension) => {
  const result = [];

  if (fs.existsSync(location)) {
    const fileList = fs.readdirSync(location, {encoding: `utf-8`, withFileTypes: true});

    for (const file in fileList) {
      if (traverse && fileList[file].isDirectory()) {
        const directoryName = fileList[file].name;

        // recursive call
        const directoryResult = listFiles(path.join(location, directoryName), traverse, extension);

        // need to pre-pend directory name to name of files found in it
        for (const directoryFile in directoryResult) {
          result.push(path.join(directoryName, directoryResult[directoryFile]));
        }
      } else if (!extension || fileList[file].name.endsWith(extension)) {
        result.push(fileList[file].name);
      }
    }
  }

  return result;
};

export const ASSETS_ROOT = 'assets';
export const COMPONENT_ASSETS = 'components';
export const PAGE_ASSETS = 'pages';
export const SLOT_ASSETS = 'slots';
export const LOCALES_ROOT = 'locales';
export const STYLES_ROOT = 'styles';
export const STATIC_ASSETS_ROOT = 'occ-assets';
