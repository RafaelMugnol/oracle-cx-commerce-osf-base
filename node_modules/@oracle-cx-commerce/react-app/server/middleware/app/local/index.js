/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import fs from 'fs';
import path from 'path';
import {ASSETS_ROOT, PAGE_ASSETS, readJson} from './assets';
import {lookupRegions} from './regions';
import {
  getLocalOverrides,
  getResourceOverrides,
  getSiteStyleOverrides,
  LAYOUT_OVERRIDE,
  SITE_OVERRIDE
} from './overrides';

const ERROR_PAGE = '404';

const readLocalPage = (req, res, localOverrides) => {
  const {options} = req.app.locals;
  const {appDir} = options;
  const location = path.join(appDir, ASSETS_ROOT, PAGE_ASSETS);

  let {pageType} = res.locals.page.context;

  let page,
    status = 200;

  if (localOverrides[LAYOUT_OVERRIDE]) {
    const overrideLayout = localOverrides[LAYOUT_OVERRIDE];
    const fileWithExtension = /\.json$/.test(overrideLayout) ? overrideLayout : `${overrideLayout}.json`;

    // If we specify a local layout override via a query parameter, but it doesn't
    // exist, then try and return the 404 layout instead
    page = readJson(path.join(location, fileWithExtension));

    if (page) {
      page.status = status;

      return page;
    }

    pageType = ERROR_PAGE;
    status = 404;
  }

  if (fs.existsSync(location)) {
    fs.readdirSync(location)
      .map(file => path.join(location, file))
      .filter(file => !fs.statSync(file).isDirectory())
      .forEach(file => {
        const pageJson = readJson(file);
        if (pageType === pageJson.shortName && pageJson.defaultPage !== false) {
          page = pageJson;
        }
      });
  } else {
    page = readJson(path.join(appDir, PAGE_ASSETS, `${pageType}.json`));
  }

  if (page) {
    page.status = status;
  }

  return page;
};

/*
 * Returns the "best" available locale for the requested language.
 *
 * A locale included in the url overrides everything.  Otherwise,
 * use the first locale in the "accept-language" request header that
 * is also included in the occ.locales array in the app package.json.
 * If there is no header or no match, use package.json's occ.defaultLocale,
 * or the first entry in occ.locales, or "en" as a last resort.
 */
const getLocale = (req, res) => {
  const {packageJson} = req.app.locals;

  let {locale} = res.locals;

  if (!locale) {
    const {occ = {}} = packageJson;

    const {locales} = occ;

    if (locales) {
      const acceptLanguage = req.headers['accept-language'];

      if (acceptLanguage) {
        // Language codes are comma-separated, with an optional semicolon
        // followed by a "quality" value (which we ignore).
        // e.g.: en-US,en;q=0.9,de;q=0.8,pt-BR;q=0.7,pt;q=0.6,fr;q=0.5
        const langs = acceptLanguage.split(',').map(lang => lang.split(';')[0]);

        locale = langs.find(lang => locales.includes(lang));
      }
    }
    if (!locale) {
      locale = occ.defaultLocale || (locales && locales[0]) || 'en';
    }
  }

  return locale;
};

/*
 * Retrieve a value either from a single string or a map of locale resources
 */
const getLocaleValue = (source, sourceProperty, locale, defaultValue) => {
  let result = defaultValue;

  if (source) {
    if (typeof source === 'string') {
      result = source;
    } else if (typeof source === 'object') {
      if (source[locale] && source[locale][sourceProperty]) {
        result = source[locale][sourceProperty];
      }
    }
  }

  return result;
};

/*
 * Get page from local filesystem assets--Return undefined if local page not found.
 */
export const getLocalPage = (req, res) => {
  const {meta, options} = req.app.locals;

  const {appDir} = options;

  const localOverrides = getLocalOverrides(req);

  const siteId = localOverrides[SITE_OVERRIDE] || 'siteUS';

  const rawPage = readLocalPage(req, res, localOverrides);

  if (rawPage) {
    const context = {
      ...res.locals.page.context,
      siteId,
      route: rawPage.shortName,
      locale: getLocale(req, res),
      currentPriceGroupId: 'defaultPriceGroup'
    };

    const {settings = {}} = rawPage;

    let pageDisplayName = rawPage.title;

    // Allow fallback to displayName if pageDisplayName not set
    if (settings.pageDisplayName) {
      pageDisplayName = getLocaleValue(settings.pageDisplayName, 'pageDisplayName', context.locale, rawPage.title);
    } else if (settings.displayName) {
      pageDisplayName = getLocaleValue(settings.displayName, 'displayName', context.locale, rawPage.title);
    }

    const metadata = {
      ...res.locals.page.metadata,
      title: `${getLocaleValue(settings.pageTitle, 'pageTitle', context.locale, rawPage.title)} (Local override)`,
      displayName: pageDisplayName,
      description: getLocaleValue(settings.seoMetaDescription, 'seoMetaDescription', context.locale, rawPage.title),
      metaTags: settings.metaTags || [],
      layoutName: rawPage.title
    };

    const layout = {
      regions: rawPage.layout.map((region, regionIndex) => {
        return lookupRegions(res.locals.page.context.pageType, region, regionIndex, appDir, context.locale, meta);
      })
    };

    const resources = {
      custom: getResourceOverrides(appDir, context.locale)
    };

    const stylesheetURIs = getSiteStyleOverrides(appDir, siteId);

    const status = {status: rawPage.status || 200};

    return {
      context,
      metadata,
      layout,
      resources,
      stylesheetURIs,
      status
    };
  }
};
