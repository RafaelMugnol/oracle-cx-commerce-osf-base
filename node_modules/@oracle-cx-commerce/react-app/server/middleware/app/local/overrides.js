/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import path from 'path';
import {ASSETS_ROOT, LOCALES_ROOT, STYLES_ROOT, STATIC_ASSETS_ROOT, readJson, listFiles} from './assets';

export const LAYOUT_OVERRIDE = 'cx-layout';
export const SITE_OVERRIDE = 'cx-site';

const OVERRIDE_QUERY_PARAMS = [LAYOUT_OVERRIDE, SITE_OVERRIDE];

/**
 * Parses query parameters for local overrides.
 * eg: http://localhost/home?cx-layout=home-alt.json
 *
 * @param {Object} req Current request
 */
export const getLocalOverrides = req => {
  return OVERRIDE_QUERY_PARAMS.reduce(
    (overrides, queryParam) => ({...overrides, [queryParam]: req.query ? req.query[queryParam] || '' : ''}),
    {}
  );
};

/**
 * Retrieves common resource overrides (i.e. Global Text Snippets)
 *
 * @param {*} appDir the root directory of the application.
 * @param {*} locale the locale specified in the current request
 */
export const getResourceOverrides = (appDir, locale) => {
  let resourceContents;

  if (appDir && locale) {
    const resourceFile = path.join(appDir, ASSETS_ROOT, LOCALES_ROOT, `${locale}.json`);
    resourceContents = readJson(resourceFile);
  }

  return resourceContents || {};
};

/**
 * Sorts style files by ranking value (ascending)
 *
 * @param {*} a first entry
 * @param {*} b second entry
 */
const sortByRanking = (a, b) => {
  return a.ranking - b.ranking;
};

/**
 * Retrieves site style overrides
 *
 * @param {*} appDir the root directory of the application.
 * @param {*} site the site specified in the current request (if any)
 */
export const getSiteStyleOverrides = (appDir, site) => {
  const styleFiles = [];

  if (appDir && site) {
    const styleDirectory = path.join(appDir, ASSETS_ROOT, STYLES_ROOT);
    const fileList = listFiles(styleDirectory, true, '.css');

    const styleConfigFile = path.join(appDir, ASSETS_ROOT, STYLES_ROOT, 'config.json');

    const styleConfig = readJson(styleConfigFile);

    let siteStyleFiles = [];

    for (const file in fileList) {
      const fileName = fileList[file];

      if (styleConfig && styleConfig[fileName]) {
        styleConfig[fileName].url = `/${STATIC_ASSETS_ROOT}/${STYLES_ROOT}/${fileName}`;
        styleConfig[fileName].ranking = styleConfig[fileName].ranking || 0;

        if (!styleConfig[fileName].sites || styleConfig[fileName].sites.length === 0) {
          // no sites listed -> applies to all sites
          siteStyleFiles.push(styleConfig[fileName]);
        } else {
          for (const styleSite in styleConfig[fileName].sites) {
            if (styleConfig[fileName].sites[styleSite] === site) {
              // applies to current site
              siteStyleFiles.push(styleConfig[fileName]);
            }
          }
        }
      } else {
        // Not all files may have a config.json entry
        // These files apply to all sites, with default ranking
        const fileConfig = {};
        fileConfig.ranking = 0;
        fileConfig.url = `/${STATIC_ASSETS_ROOT}/${STYLES_ROOT}/${fileName}`;

        siteStyleFiles.push(fileConfig);
      }
    }

    siteStyleFiles = siteStyleFiles.sort(sortByRanking);

    for (const siteStyleFile in siteStyleFiles) {
      styleFiles.push(siteStyleFiles[siteStyleFile].url);
    }
  }

  return styleFiles;
};
