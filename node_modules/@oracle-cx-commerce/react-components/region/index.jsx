/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import Stack from '@oracle-cx-commerce/react-components/stack';
import Widget from '@oracle-cx-commerce/react-components/widget';
import {connect} from '@oracle-cx-commerce/react-components/provider';
import {getRegion} from '@oracle-cx-commerce/commerce-utils/selector';
import PropTypes from 'prop-types';

/**
 * Displays the region component
 */

const Region = props => {
  const {regions = [], widgets = [], width = 12, structure, id, cssClass} = props;
  const additionalCss = cssClass ? ` ${cssClass}` : '';

  return structure === 'stack' ? (
    <Stack key={id} stackId={id} />
  ) : (
    <section className={`Region col-${width}${additionalCss}`}>
      {regions.map((regionId, index) => (
        /*
          Using region ids as keys causes unnecessary DOM reconciliation.
              
          https://reactjs.org/docs/reconciliation.html#keys
        */
        <Region key={index} regionId={regionId} /> // eslint-disable-line react/no-array-index-key
      ))}
      {widgets.map(widgetId => (
        <Widget key={widgetId} widgetId={widgetId} />
      ))}
    </section>
  );
};

Region.propTypes = {
  /**
   * Array of region IDs
   */
  regions: PropTypes.arrayOf(PropTypes.string),

  /**
   * Array of the widgets in the region
   */
  widgets: PropTypes.arrayOf(PropTypes.string),

  /**
   * Width (on screen) taken by the region
   */
  width: PropTypes.number,

  /**
   * ID of the element
   */
  id: PropTypes.string,

  /**
   * Class name for any additional css
   */
  cssClass: PropTypes.string
};

Region.defaultProps = {
  regions: [],
  widgets: [],
  width: 12,
  cssClass: undefined,
  id: undefined
};

Region.Connected = connect(getRegion)(Region);

export default Region.Connected;
