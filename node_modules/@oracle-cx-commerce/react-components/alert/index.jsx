/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import CheckIcon from '@oracle-cx-commerce/react-components/icons/check';
import InfoIcon from '@oracle-cx-commerce/react-components/icons/info';
import React from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import WarningIcon from '@oracle-cx-commerce/react-components/icons/warning';
import css from '@oracle-cx-commerce/react-components/alert/styles.css';
import PropTypes from 'prop-types';

/**
 * Displays alerts/warnings based on the message type
 * Includes alert icon type and style based on the message type.
 */

const Alert = props => {
  /* Props Data */
  const {type, message, children} = props;

  /* Local Variables */
  let className = '';
  let iconTag = null;

  /* Based on the message type, generate the Class Name and Icon Tag. */
  if (type === 'success') {
    className = 'Alert__Message--Success';
    iconTag = <CheckIcon className="Alert__Icon" />;
  } else if (type === 'error') {
    className = 'Alert__Message--Error';
    iconTag = <WarningIcon className="Alert__Icon" />;
  } else if (type === 'warning') {
    className = 'Alert__Message--Warning';
    iconTag = <WarningIcon className="Alert__Icon" />;
  } else if (type === 'info') {
    className = 'Alert__Message--Info';
    iconTag = <InfoIcon className="Alert__Icon" />;
  }

  return (
    <Styled id="Alert" css={css}>
      <div className={`Alert ${className}`}>
        <div className="Alert__IconWrapper">{iconTag}</div>
        {message && (
          <div className="Alert__MessageWrapper" role="alert" aria-live="polite">
            {message}
          </div>
        )}
        {children && (
          <div className="Alert__MessageWrapper" role="alert" aria-live="polite">
            {children}
          </div>
        )}
      </div>
    </Styled>
  );
};

Alert.propTypes = {
  /**
   * Type of the alert [success, error, warning, info ]
   */
  type: PropTypes.string.isRequired,

  /**
   * Alert message to be shown
   */
  message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Child nodes to by displayed
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
};

Alert.defaultProps = {
  children: undefined,
  message: undefined
};

export default Alert;
