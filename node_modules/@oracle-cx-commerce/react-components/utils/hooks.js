/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {getCurrencyCode, getCurrentPriceListGroup, getGlobalContext} from '@oracle-cx-commerce/commerce-utils/selector';
import {useCallback, useContext, useMemo, useState} from 'react';

import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {isEmptyObject} from '@oracle-cx-commerce/utils/generic';

const useSimpleSelector = (selector, props) => {
  const store = useContext(StoreContext);

  return selector(store.getState(), props);
};

const useLocaleInfo = priceListGroup => {
  // order of preference for deriving currencyCode
  // input priceListGroup > defaultPriceListGroup > currencyRepository > global context (for SSR)

  const defaultPriceListGroup = useSimpleSelector(getCurrentPriceListGroup);

  if (isEmptyObject(priceListGroup)) {
    priceListGroup = defaultPriceListGroup;
  }

  const {currency = {}} = priceListGroup;
  let {currencyCode} = currency;

  //for server side rendered code.
  const currentCurrencyCode = useSimpleSelector(getCurrencyCode);
  if (!currencyCode) currencyCode = currentCurrencyCode;

  const {locale} = useSimpleSelector(getGlobalContext);

  return {
    locale,
    currencyCode
  };
};

export const useDateFormatter = (options, priceListGroup) => {
  const {locale} = useLocaleInfo(priceListGroup);

  return useMemo(() => {
    const dateFormatter = new Intl.DateTimeFormat(locale, options);

    return value => dateFormatter.format(value);
  }, [locale, options]);
};

export const useNumberFormatter = (options, priceListGroup) => {
  const {locale, currencyCode} = useLocaleInfo(priceListGroup);

  return useMemo(() => {
    const numberFormatter = new Intl.NumberFormat(locale, {
      currency: currencyCode,
      ...options
    });

    return value => numberFormatter.format(value);
  }, [locale, currencyCode, options]);
};

export const useToggle = (initialState = false) => {
  const [state, setState] = useState(initialState);

  const toggle = useCallback(() => setState(state => !state), []);

  return [state, toggle];
};
