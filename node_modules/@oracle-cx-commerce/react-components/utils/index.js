/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

const ABSOLUTE_URL = /^(http[s]?:\/\/|\/)/i;

const areEmptyObjects = (a, b) => {
  return a && b && typeof a === 'object' && typeof b === 'object' && isEmptyObject(a) && isEmptyObject(b);
};

export const arraysEqual = (a, b) => {
  if (Object.is(a, b)) {
    return true;
  }

  if (!Array.isArray(a) || !Array.isArray(b)) {
    return false;
  }

  if (a.length !== b.length) {
    return false;
  }

  for (let i = 0; i < a.length; i++) {
    if (!Object.is(a[i], b[i])) {
      return false;
    }
  }

  return true;
};

const {hasOwnProperty} = Object.prototype;

export const shallowEqual = (a, b) => {
  if (areEmptyObjects(a, b)) {
    return true;
  }
  if (arraysEqual(a, b)) {
    return true;
  }

  if (typeof a !== 'object' || a === null || typeof b !== 'object' || b === null) {
    return false;
  }

  const keysA = Object.keys(a);
  const keysB = Object.keys(b);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (let i = 0; i < keysA.length; i++) {
    if (areEmptyObjects(a[keysA[i]], b[keysA[i]])) {
      continue;
    }
    if (!hasOwnProperty.call(b, keysA[i]) || !arraysEqual(a[keysA[i]], b[keysA[i]])) {
      return false;
    }
  }

  return true;
};

/**
 * Process a form key.  This will call itself in order to build up the object passed in.
 * @param {Object} obj - the object holding the JSON
 * @param {Object} props the properties, this will be destructured to keys and value
 */
const processKey = (obj, props) => {
  const {keys, value} = props;

  const currentKey = keys[0];

  // if there's only one key process and return
  if (keys.length === 1) {
    if (currentKey === '') {
      // if blank then it's an array so push value into it
      obj.push(value);
    } else {
      // assign value to object property or array position
      obj[currentKey] = value;
    }
  } else {
    const currentKeyNotDefined = obj[currentKey] === undefined;
    const currentKeyNotDefinedOrNotArray = currentKeyNotDefined || !Array.isArray(obj[currentKey]);
    const currentKeyNotDefinedOrNotObject = currentKeyNotDefined || !isObject(obj[currentKey]);
    const nextKey = keys[1];

    if (nextKey === '') {
      if (currentKeyNotDefinedOrNotArray) {
        // create an array for array values
        obj[currentKey] = [];
      }
    } else if (Number.isInteger(parseFloat(nextKey))) {
      // is a digit i.e. array index
      if (currentKeyNotDefinedOrNotArray) {
        // create an array for array values
        obj[currentKey] = [];
      }
    } else if (currentKeyNotDefinedOrNotObject) {
      // create an object
      obj[currentKey] = {};
    }

    // call process key again
    const lastKey = keys.slice(1);
    processKey(obj[currentKey], {keys: lastKey, value});
  }
};

/**
 * Serialize a HTML form
 *
 * @param {Object} form - the HTML form object
 */
export const formToJson = form => {
  const json = {};

  new FormData(form).forEach((value, key) => {
    // split the key out into an array of keys, a new key for each value wrapped
    // in squared brackets arrays should return an empty key then the value
    const keys = key.split('[').map(key => key.replace(/\]/g, ''));
    // pass the keys and the form field value to the function
    processKey(json, {keys, value});
  });

  return json;
};

export const formToUrl = form => {
  const url = new URL(form.action);

  new FormData(form).forEach((value, key) => {
    url.searchParams.append(key, value);
  });

  return url;
};

export const formToHref = form => {
  const url = formToUrl(form);
  if (!ABSOLUTE_URL.test(form.getAttribute('action'))) {
    return url.href.replace(document.baseURI, '');
  }

  return url.href;
};

export * from '@oracle-cx-commerce/react-components/utils/password-helper';
