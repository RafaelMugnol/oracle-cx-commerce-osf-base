/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {t} from '@oracle-cx-commerce/utils/generic';

/**
 * Validates password based on the policies.
 * @param {*} policies
 * @param {*} userDetails object
 */
const validatePassword = (policies, {login, password}) => {
  // Empty policies check to ensure that it passes in case there is no policies
  if (!policies) {
    return true;
  }

  // Initial check to make sure that when password is empty
  // to give no password policies error and only show the
  // embedded assistance. Let the require clause handle it.
  if (!password) {
    return true;
  }

  // Minimum Password Length check
  if (policies.useMinPasswordLength) {
    if (password.length < policies.minPasswordLength) {
      return false;
    }
  }

  // Cannot use username check
  if (policies.cannotUseUsername) {
    const cannotUseUsernameRegex = new RegExp(login, 'ig');
    if (cannotUseUsernameRegex.test(password)) {
      return false;
    }
  }

  // Use Number
  if (policies.useNumber) {
    const numPattern = new RegExp('[0-9]+', 'g');
    if (!numPattern.test(password)) {
      return false;
    }
  }

  // Use Symbol
  // Get the symbols from the data
  if (policies.useSymbol) {
    // escape the symbols which are need to be escaped
    // eslint-disable-next-line no-useless-escape
    const allowedSymbolsEscaped = policies.allowedSymbols.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    const allowedSymbolsRegex = new RegExp(`[${allowedSymbolsEscaped}]+`, 'u');
    if (!allowedSymbolsRegex.test(password)) {
      return false;
    }
  }

  // Use Mixed Case
  if (policies.useMixedCase) {
    const lowerCaseRegex = new RegExp('[a-z]+');
    const upperCaseRegex = new RegExp('[A-Z]+');
    if (!(lowerCaseRegex.test(password) && upperCaseRegex.test(password))) {
      return false;
    }
  }

  return true;
};

/**
 * Gives all the enabled embedded assistance
 * @param {*} policies
 * @param {*} resources
 */
const getEmbeddedAssistence = (policies, resources) => {
  if (!policies) {
    return '';
  }

  const {embeddedAssistancePreText} = resources;

  let embeddedAssistance;

  // TODO- need a translation utility to replace the values dynamically
  // Minimum Password Length check
  if (policies.useMinPasswordLength) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += t(resources.embeddedAssistanceMinPasswordLengthText, {min: policies.minPasswordLength});
  }
  // Cannot use username check
  if (policies.cannotUseUsername) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += resources.embeddedAssistanceCannotUseUsernameText;
  }
  // Use Number
  if (policies.useNumber) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += resources.embeddedAssistanceUseNumber;
  }
  // Use Symbol
  if (policies.useSymbol) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += t(resources.embeddedAssistanceUseSymbol, {chars: policies.allowedSymbols});
  }
  // Use Mixed Case
  if (policies.useMixedCase) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += resources.embeddedAssistanceUseMixedCase;
  }
  // Previous N passwords
  if (policies.cannotUsePreviousPasswords) {
    embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}, ` : '';
    embeddedAssistance += resources.embeddedAssistanceNotInPreviousNPasswords;
  }

  embeddedAssistance = embeddedAssistance ? `${embeddedAssistance}.` : '';

  return `${embeddedAssistancePreText} ${embeddedAssistance}`;
};

export const passwordHelpers = {validatePassword, getEmbeddedAssistence};
