/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useEffect, useRef, useState} from 'react';

import Alert from '@oracle-cx-commerce/react-components/alert';
import Modal from '@oracle-cx-commerce/react-components/modal';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-components/confirmation-dialog/styles.css';
import {noop} from '@oracle-cx-commerce/utils/generic';
import PropTypes from 'prop-types';

/**
 * This component provides a confirmation pop-up dialog UI with two buttons one for confirmation and
 * other for cancellation of the operation. On button click, it invokes callback method
 */
const ConfirmationDialog = props => {
  const {
    id,
    title,
    closeIconTitle,
    closeAriaLabel,
    alertType = 'warning',
    alertMessage,
    confirmMessage,
    labelConfirm,
    labelCancel,
    confirmCallback = noop,
    cancelCallback = noop,
    closeCallback = noop,
    show = false,
    cssOverride
  } = props;
  const [isInProgress, setIsInProgress] = useState(false);
  //cancel button ref
  const cancelButtonRef = useRef(null);
  //close button ref
  const [closeButtonRef, setCloseButtonRef] = useState(null);
  //reset isInProgress on dialog close
  !show && isInProgress && setIsInProgress(false);

  //  useEffect to make keyboard navigation (tabbing) focus cycle within the dialog
  useEffect(() => {
    if (closeButtonRef && closeButtonRef.current && cancelButtonRef && cancelButtonRef.current) {
      closeButtonRef.current.addEventListener('keydown', function (e) {
        if (e.key === 'Tab' && e.shiftKey) {
          cancelButtonRef.current.focus();
          e.preventDefault();
        }
      });
      cancelButtonRef.current.addEventListener('keydown', function (e) {
        if (e.key === 'Tab' && !e.shiftKey) {
          closeButtonRef.current.focus();
          e.preventDefault();
        }
      });
    }
  }, [cancelButtonRef, closeButtonRef]);

  /**
   * Confirmation button handler, calls confirm call back method
   */
  const confirmClickHandler = async () => {
    setIsInProgress(true);
    confirmCallback();
  };

  /**
   * Cancel button handler, calls cancel call back method
   */
  const cancelClickHandler = () => {
    if (isInProgress) return;
    cancelCallback();
  };

  // confirmation dialog UI
  return (
    <Styled id="ConfirmationDialog" css={css}>
      <Modal
        id={id}
        title={title}
        show={show}
        className="ConfirmationDialog"
        onClose={closeCallback}
        setCloseRef={closeButtonRef && closeButtonRef.current ? null : setCloseButtonRef}
        closeIconTitle={closeIconTitle}
        closeArialLabel={closeAriaLabel}
        cssOverride={cssOverride}
      >
        <Alert
          id={`ConfirmDialog__Alert-${id}`}
          type={alertType}
          message={
            <div className="ConfirmationDialog__Message">
              <span>{alertMessage}</span>
              {confirmMessage && <span className="ConfirmationDialog__MarginTop">{confirmMessage} </span>}
            </div>
          }
        ></Alert>
        <div className="ConfirmationDialog__ButtonContainer">
          <button
            type="button"
            disabled={isInProgress}
            className="ConfirmationDialog__MarginTop"
            onClick={confirmClickHandler}
          >
            {labelConfirm}
          </button>
          <button
            type="button"
            ref={cancelButtonRef}
            disabled={isInProgress}
            className="secondary ConfirmationDialog__MarginTop"
            onClick={cancelClickHandler}
          >
            {labelCancel}
          </button>
        </div>
      </Modal>
    </Styled>
  );
};

ConfirmationDialog.propTypes = {
  /**
   * Widget id
   */
  id: PropTypes.string,

  /**
   * Title of dialog
   */
  title: PropTypes.string,

  /**
   * Close icon title
   */
  closeIconTitle: PropTypes.string,

  /**
   * Close icon aria label
   */
  closeAriaLabel: PropTypes.string,

  /**
   * Type of alert (warning, error, success, info,).
   * Default value is warning
   */
  alertType: PropTypes.string,

  /**
   * Alert message to be shown
   */
  alertMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Confirmation message to be shown
   */
  confirmMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
  /**
   * Confirm button label
   */
  labelConfirm: PropTypes.string.isRequired,

  /**
   * Cancel button label
   */
  labelCancel: PropTypes.string.isRequired,

  /**
   * Callback method to be call on confirm button click
   */
  confirmCallback: PropTypes.func,

  /**
   * Callback method to be call on cancel button click
   */
  cancelCallback: PropTypes.func,

  /**
   * Callback method to call on close icon click
   */
  closeCallback: PropTypes.func,

  /**
   * Flag whether to show or not the dialog, default value false
   */
  show: PropTypes.bool,

  /**
   *  css class name to override styles (pass this only if you want to override default css style)
   */
  cssOverride: PropTypes.string
};

/**
 * Default values for props
 */
ConfirmationDialog.defaultProps = {
  id: undefined,
  title: undefined,
  closeAriaLabel: undefined,
  closeIconTitle: undefined,
  cssOverride: undefined,
  confirmMessage: undefined,
  cancelCallback: noop,
  confirmCallback: noop,
  closeCallback: noop,
  show: false,
  alertType: 'warning',
  alertMessage: undefined
};

export default React.memo(ConfirmationDialog);
