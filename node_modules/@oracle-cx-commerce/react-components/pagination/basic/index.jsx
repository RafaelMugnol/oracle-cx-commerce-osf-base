/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import {noop} from '@oracle-cx-commerce/utils/generic';
import {PAGINATION_PARAM_OFFSET} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import PageIndicator from '@oracle-cx-commerce/react-components/pagination/page-indicator';
import StandardPagination from '@oracle-cx-commerce/react-components/pagination/standard';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-components/pagination/basic/styles.css';

/**
 * A React component to display "basic" pagination UI. Includes first, previous
 * buttons at left end, numeric pagination at the center, next, last buttons at
 * right end.
 *
 * @param {Object} props Pagination props
 */
const BasicPagination = props => {
  const {
    currentOffset = 0,
    limit = 16,
    totalRecords = 0,
    pageId = '',
    offsetParam = PAGINATION_PARAM_OFFSET,
    pageParam,
    onPageChange = noop,
    className = '',
    labelPreviousPage = '',
    labelNextPage = '',
    labelFirstPage = '',
    labelLastPage = ''
  } = props;

  const currentPage = Math.ceil(currentOffset / limit) + 1,
    totalPages = Math.ceil(totalRecords / limit);

  const firstPage =
    currentPage !== 1 ? (
      <PageIndicator
        label={
          <span hidden className="BasicPagination__PageIndicatorPrevPage--srOnly">
            {labelFirstPage}
          </span>
        }
        className="BasicPagination__PageIndicator BasicPagination__PageIndicatorFirstPage"
        pageNumber={1}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : null;

  const prevPage =
    currentPage !== 1 ? (
      <PageIndicator
        label={
          <span hidden className="BasicPagination__PageIndicatorPrevPage--srOnly">
            {labelPreviousPage}
          </span>
        }
        className="BasicPagination__PageIndicator BasicPagination__PageIndicatorPrevPage"
        pageNumber={currentPage - 1}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : null;

  const nextPage =
    currentPage !== totalPages ? (
      <PageIndicator
        label={
          <span hidden className="BasicPagination__PageIndicatorPrevPage--srOnly">
            {labelNextPage}
          </span>
        }
        className="BasicPagination__PageIndicator BasicPagination__PageIndicatorNextPage"
        pageNumber={currentPage + 1}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : null;

  const lastPage =
    currentPage !== totalPages ? (
      <PageIndicator
        label={
          <span hidden className="BasicPagination__PageIndicatorPrevPage--srOnly">
            {labelLastPage}
          </span>
        }
        className="BasicPagination__PageIndicator BasicPagination__PageIndicatorLastPage"
        pageNumber={totalPages}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : null;

  return (
    <Styled id="BasicPagination" css={css}>
      <div className={`BasicPagination ${className}`}>
        {firstPage}
        {prevPage}
        <StandardPagination {...props} />
        {nextPage}
        {lastPage}
      </div>
    </Styled>
  );
};

export default BasicPagination;
