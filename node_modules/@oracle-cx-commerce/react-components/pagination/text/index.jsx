/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React from 'react';
import {noop, t} from '@oracle-cx-commerce/utils/generic';
import {PAGINATION_PARAM_OFFSET} from '@oracle-cx-commerce/commerce-utils/constants/page-links';
import PageIndicator from '@oracle-cx-commerce/react-components/pagination/page-indicator';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-components/pagination/text/styles.css';

/**
 * A React component to display "text" pagination UI. Displays a previous button to the
 * left, next button to the right, and the current page information at the center.
 *
 * @param {Object} props Pagination props
 */
const TextPagination = props => {
  const {
    currentOffset = 0,
    limit = 16,
    totalRecords = 0,
    pageId = '',
    offsetParam = PAGINATION_PARAM_OFFSET,
    pageParam,
    onPageChange = noop,
    className = '',
    labelPageOfPages,
    labelNextPage = '>',
    labelPreviousPage = '<'
  } = props;

  const currentPage = Math.ceil(currentOffset / limit) + 1,
    totalPages = Math.ceil(totalRecords / limit);

  const prevPage =
    currentPage !== 1 ? (
      <PageIndicator
        label={labelPreviousPage}
        className="TextPagination__PageIndicator TextPagination__PageIndicatorPrev"
        pageNumber={currentPage - 1}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : (
      <span aria-hidden={true} className="TextPagination__PageIndicatorPrev"></span>
    );

  const nextPage =
    currentPage !== totalPages ? (
      <PageIndicator
        label={labelNextPage}
        className="TextPagination__PageIndicator TextPagination__PageIndicatorNext"
        pageNumber={currentPage + 1}
        totalPages={totalPages}
        limit={limit}
        pageId={pageId}
        offsetParam={offsetParam}
        pageParam={pageParam}
        onPageChange={onPageChange}
      />
    ) : (
      <span aria-hidden={true} className="TextPagination__PageIndicatorNext"></span>
    );

  return (
    <Styled id="TextPagination" css={css}>
      <div className={`TextPagination ${className}`}>
        {prevPage}
        <div className="TextPagination__PageIndicatorText">{t(labelPageOfPages, {currentPage, totalPages})}</div>
        {nextPage}
      </div>
    </Styled>
  );
};

export default TextPagination;
