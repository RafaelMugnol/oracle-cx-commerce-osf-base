/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useEffect, useState} from 'react';
import ExpandIcon from '@oracle-cx-commerce/react-components/icons/expand';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-components/collapsible/styles.css';
import {useToggle} from '@oracle-cx-commerce/react-components/utils/hooks';
import {t} from '@oracle-cx-commerce/utils/generic';
import PropTypes from 'prop-types';

/**
 * Displays the collapsible component
 */

const Collapsible = props => {
  const [openClassName, setOpenClassName] = useState('');
  const {title, children, expanded = false, labelCollapse = 'Collapse', labelExpand = 'Expand'} = props;

  // use custom toggle hook
  const [open, toggle] = useToggle(false);

  useEffect(() => {
    if (expanded) {
      toggle();
    }
  }, [expanded, toggle]);

  useEffect(() => {
    setOpenClassName(open ? 'open' : '');
  }, [open]);

  return (
    <Styled id="Collapsible" css={css}>
      <div className="Collapsible__Wrapper">
        <span
          role="button"
          tabIndex="0"
          className={`Collapsible__ExpandItem ${openClassName}`}
          onClick={toggle}
          onKeyDown={toggle}
        >
          <span>{title}</span>
          <span role="button" aria-label={open ? t(labelCollapse) : t(labelExpand)}>
            {<ExpandIcon className={openClassName} />}
          </span>
        </span>
        <span className={`Collapsible__ExpandDescription ${openClassName}`}>{children}</span>
      </div>
    </Styled>
  );
};

Collapsible.propTypes = {
  /**
   * Title of the collapsible component
   */
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,

  /**
   * Whether the collapsible component is expanded or not
   */
  expanded: PropTypes.bool.isRequired,

  /**
   * Child nodes to by displayed
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),

  /**
   * Label to be shown if component is expanded
   */
  labelCollapse: PropTypes.string,

  /**
   * Label to be shown if component is collapsed
   */
  labelExpand: PropTypes.string
};

Collapsible.defaultProps = {
  labelCollapse: 'Collapse',
  labelExpand: 'Expand',
  children: undefined
};

export default Collapsible;
