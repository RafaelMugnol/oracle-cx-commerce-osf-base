/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {useEffect, useRef} from 'react';

import Styled from '@oracle-cx-commerce/react-components/styled';
import TimesIcon from '@oracle-cx-commerce/react-components/icons/times';
import css from '@oracle-cx-commerce/react-components/popover/styles.css';
import {noop} from '@oracle-cx-commerce/utils/generic';
import PropTypes from 'prop-types';

/**
 * Displays the popover component
 */
const Popover = ({
  onClose = noop,
  show,
  children,
  title,
  closeIconTitle = '',
  closeAriaLabel = '',
  displayBackdrop = false
}) => {
  const closeRef = useRef(null);
  useEffect(() => {
    if (closeRef.current && show) closeRef.current.focus();
  }, [closeRef, show]);

  return (
    <Styled id="Popover" css={css}>
      {show && (
        <>
          {displayBackdrop && (
            <div
              className="Popover__Backdrop"
              data-testid="popoverBackdrop"
              onClick={onClose}
              onKeyDown={event => {
                if (event.key === 'Enter' || event.key === 'Esc' || event.key === 'Escape') {
                  onClose();
                }
              }}
              role="button"
              tabIndex="-1"
              aria-label={closeAriaLabel}
            ></div>
          )}
          <div className="Popover">
            <div className="Popover__Wrapper">
              <div className="Popover__Header">
                <span className="Popover__HeaderTitle">{title}</span>
                <span
                  role="button"
                  tabIndex="0"
                  className="Popover__Close"
                  onClick={onClose}
                  onKeyDown={event => {
                    if (event.key === 'Enter' || event.key === 'Esc' || event.key === 'Escape') {
                      onClose();
                    }
                  }}
                  ref={closeRef}
                  data-testid="closeButton"
                  aria-label={closeAriaLabel}
                >
                  <TimesIcon title={closeIconTitle} />
                </span>
              </div>
              {children}
            </div>
          </div>
        </>
      )}
    </Styled>
  );
};

Popover.propTypes = {
  /**
   * Function to be called on close
   */
  onClose: PropTypes.func,

  /**
   * Whether to show popover or not
   */
  show: PropTypes.bool,

  /**
   * Child nodes to by displayed
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /**
   * Popover header title
   */
  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),

  /**
   * Title of the close icon component
   */
  closeIconTitle: PropTypes.string,

  /**
   * Whether to display backdrop or not
   */
  displayBackdrop: PropTypes.bool
};

Popover.defaultProps = {
  onClose: noop,
  closeIconTitle: '',
  displayBackdrop: false,
  title: undefined,
  show: undefined
};

export default Popover;
