/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {useEffect, useContext} from 'react';
import {buildSocialTagsForClient} from '@oracle-cx-commerce/commerce-utils/social';
import {buildCanonicalTagForClient} from '@oracle-cx-commerce/commerce-utils/canonical';
import {observeLayoutShift, flushAndLogCLS} from '@oracle-cx-commerce/utils/perf';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {FOOTER_CONF} from '@oracle-cx-commerce/react-components/config';
import {getPage} from '@oracle-cx-commerce/commerce-utils/selector';
import {PRODUCT_LISTING_PAGE_TYPES} from '@oracle-cx-commerce/commerce-utils/constants/page-links';

export const useHeadUpdater = ({title, description}) => {
  useEffect(() => {
    // Update document title.
    if (document.title !== title) {
      document.title = title;
    }

    // Update description meta data.
    const descriptionEl = document.querySelector('meta[name=description]');
    if (descriptionEl != null && descriptionEl.getAttribute('content') !== description) {
      descriptionEl.setAttribute('content', description);
    }
  }, [title, description]);
};

export const useSocialMetaUpdater = () => {
  const store = useContext(StoreContext);
  const state = store.getState();
  useEffect(() => {
    if (window) {
      buildSocialTagsForClient(window, state);
    }
  }, [state]);
};

/**
 * In dev mode, initializes CLS listener once during page lifecycle.
 * Flushes and logs CLS scores on every page navigation.
 */
export const useLayoutShiftObserver = () => {
  useEffect(() => {
    __OCC_DEV__ && observeLayoutShift();
  }, []);

  __OCC_DEV__ && flushAndLogCLS();
};

export const useLazyFooter = (visitedPageTypesRef = {}, lazyFooterRef = {}, pageType) => {
  useEffect(() => {
    const visitedPageTypes = visitedPageTypesRef.current || [];
    const lazyFooter = lazyFooterRef.current;
    let lazyTime = FOOTER_CONF.DELAY;

    if (lazyFooter && FOOTER_CONF.LAZY_FOOTER_ENABLED) {
      if (visitedPageTypes.length > 0) {
        lazyFooter.style.visibility = 'hidden';
        if (!visitedPageTypes.includes(pageType)) {
          lazyTime = FOOTER_CONF.FIRST_TIME_PAGE_LOAD_DELAY;
          visitedPageTypes.push(pageType);
        }
        setTimeout(() => {
          lazyFooter.style.visibility = 'visible';
        }, lazyTime);
      } else {
        visitedPageTypes.push(pageType);
      }
    }
  }, [lazyFooterRef, pageType, visitedPageTypesRef]);
};

/**
 * Updates link tags according to page data
 */
export const useCanonicalTagUpdater = () => {
  const store = useContext(StoreContext);
  const page = getPage(store.getState());
  const {path = '', pageType = ''} = page;
  useEffect(() => {
    // Link tags for plp pages will be updated from dynamic product listing widget
    if (!PRODUCT_LISTING_PAGE_TYPES.includes(pageType)) {
      buildCanonicalTagForClient(window, page, store.getState());
    }
  }, [path, pageType, page, store]);
};
