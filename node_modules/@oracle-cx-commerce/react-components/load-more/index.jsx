/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import React, {useEffect, useRef, useState} from 'react';
import Styled from '@oracle-cx-commerce/react-components/styled';
import css from '@oracle-cx-commerce/react-components/load-more/styles.css';
import PropTypes from 'prop-types';

export const LOAD_MORE = 'LoadMore';

/**
 * Displays the load more component
 */
const LoadMore = props => {
  const [totalNumberOfItems, setTotalNumberOfItems] = useState(0);
  const [currentListedItems, setCurrentListedItems] = useState(0);
  const [loadingItems, setLoadingItems] = useState(false);
  const offset = useRef(0);
  const {
    numberOfItemsToLoad = 12,
    loadMoreLabel = `Show the next ${numberOfItemsToLoad} Items`,
    loadMoreLoadingLabel = '',
    className = ''
  } = props;

  useEffect(() => {
    if (props.resetPage && props.resetPage === true) {
      offset.current = 0;
    }

    if (offset.current === 0) {
      offset.current = numberOfItemsToLoad;
      props
        .handleLoadMore(0)
        .then(listResponse => {
          if (listResponse) {
            setTotalNumberOfItems(listResponse.totalNumberOfItems);
            setCurrentListedItems(listResponse.currentItemsCount);
          }
        })
        .catch(error => {
          console.error(error);
        });
    }
  }, [numberOfItemsToLoad, props]);

  const handleLoadMoreClick = () => {
    offset.current = currentListedItems;
    props.handleLoadMore(offset.current).then(listResponse => {
      if (listResponse && listResponse.currentItemsCount > 0) {
        setCurrentListedItems(currentListedItems + listResponse.currentItemsCount);
        setLoadingItems(false);
      }
    });
  };

  const DisplayLoadMoreButton = () => {
    return (
      <Styled css={css} id="LoadMore">
        <div className={`Pagination__LoadMore ${className}`}>
          <button
            type="button"
            className="secondary"
            onClick={() => {
              handleLoadMoreClick();
              setLoadingItems(true);
            }}
            disabled={loadingItems}
          >
            {loadingItems ? `${loadMoreLoadingLabel}` : `${loadMoreLabel}`}
          </button>
        </div>
      </Styled>
    );
  };

  return <>{totalNumberOfItems > currentListedItems && <DisplayLoadMoreButton />}</>;
};

LoadMore.propTypes = {
  /**
   * Number of items to load
   */
  numberOfItemsToLoad: PropTypes.number,

  /**
   * Text label for 'load more' button
   */
  loadMoreLabel: PropTypes.string,

  /**
   * Loading label
   */
  loadMoreLoadingLabel: PropTypes.string,

  /**
   * Class name to be applied to the HTML element.
   */
  className: PropTypes.string
};

LoadMore.defaultProps = {
  numberOfItemsToLoad: 12,
  loadMoreLabel: 'Show the next 12 Items',
  loadMoreLoadingLabel: '',
  className: ''
};

export default React.memo(LoadMore);
