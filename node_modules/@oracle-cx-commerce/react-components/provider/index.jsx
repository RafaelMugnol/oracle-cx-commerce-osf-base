/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import React, {createContext, useContext, useEffect, useState} from 'react';
import {StoreContext} from '@oracle-cx-commerce/react-ui/contexts';
import {shallowEqual} from '@oracle-cx-commerce/react-components/utils';

const StateContext = createContext();

/**
 * The connect HOC (Higher Order Components) create an instance of a Connect component that will be connected to the
 * state via the given selector function.
 *
 * Usage:
 *
 * import {connect} from '@oracle-cx-commerce/react-ui'
 *
 * // Create selector function that returns a product entity by id
 * const getProduct = (state, {productId}) => state.catalogRepository.products[productId];
 *
 * // Presentation component
 * // Component to display product name
 * const ProductPresentation = connect(getProduct)(product => <div>{product.displayName}</div>);
 *
 * // Container component
 * // Connect the presentation component to the state via th selector
 * const ProductContainer = connect(getProduct)(ProductPresentation);
 *
 * // The container component needs a product id, which is passed to the selector--product id can a literal or a
 * // variable.
 * const Product = () => <ProductContainer productId="prod0001">;
 *
 * export default Product;
 */
export function connect(selector) {
  console.assert(typeof selector === 'function', 'Invalid argument "selector"--expected a function');

  return WrappedComponent => {
    /**
     * The Connect component re-render itself (and children) when the state changes. The selector function determines
     * what part of the state the Connect component will respond to, i.e. only changes in state, as returned by the
     * selector function, will cause the Connect component to re-render--all other state changes are ignored. All
     * components are connect to the state in this way.
     */
    return class Connect extends React.Component {
      static contextType = StateContext;
      static displayName = `Connect(${WrappedComponent.displayName || WrappedComponent.name})`;

      render() {
        const nextState = selector(this.context, this.props);

        if (!shallowEqual(this.prevProps, this.props) || !shallowEqual(this.prevState, nextState)) {
          this.renderedComponent = <WrappedComponent {...this.props} {...nextState} />;
          this.prevProps = this.props;
          this.prevState = nextState;
        }

        return this.renderedComponent;
      }
    };
  };
}

export const useSelector = (selector, props) => {
  console.assert(typeof selector === 'function', 'Invalid argument "selector"--expected a function');

  const store = useContext(StoreContext);

  const [selectedState, setSelectedState] = useState(selector(store.getState(), props));

  useEffect(() => {
    let isSubscribed = true;

    const updateSelected = () => {
      if (isSubscribed) {
        setSelectedState(selectedState => {
          const newSelectedState = selector(store.getState(), props);

          if (shallowEqual(selectedState, newSelectedState)) {
            return selectedState;
          }

          return newSelectedState;
        });
      }
    };

    updateSelected();

    const unsubscribe = store.subscribe(updateSelected);

    return () => {
      unsubscribe();

      isSubscribed = false;
    };
  }, [selector, store, props]);

  return selectedState;
};

/**
 * The Provider component notifies (re-renders) all Connect(ed) components of store state changes, providing them with
 * the new state.The is only one instance of a Provider which serves all Connect components.
 *
 * Usage:
 *
 * import Page from '@oracle-cx-commerce/react-components/page';
 * import Provider from '@oracle-cx-commerce/react-components/provider';
 * import React from 'react';
 *
 * const Root = ({store}) =>
 *   <Provider store={store}>
 *     // All children of Provider can connect to the state
 *     <Page/>
 *   </Provider>;
 *
 * export default Root;
 */
export default class Provider extends React.Component {
  constructor(props) {
    super(props);

    this.state = props.store.getState();
  }

  componentDidMount() {
    const {store} = this.props;

    this.unsubscribe = store.subscribe(() => {
      this.setState(store.getState());
    });
  }

  componentWillUnmount() {
    this.unsubscribe();
  }

  render() {
    return (
      <StoreContext.Provider value={this.props.store}>
        <StateContext.Provider value={this.state}>{React.Children.only(this.props.children)}</StateContext.Provider>
      </StoreContext.Provider>
    );
  }
}
