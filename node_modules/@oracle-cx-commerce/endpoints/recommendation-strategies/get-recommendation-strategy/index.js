/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {createEndpoint, getBodyAsJson} from '@oracle-cx-commerce/endpoints/factory';
import {populateError} from '@oracle-cx-commerce/endpoints/utils';
import {isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * This method transforms a recommendations strategy response into
 * the recommendationsRepository.preview.strategies object.
 *
 * @param {Object} recommendationStrategy - recommendationStrategy response
 * @returns {Object} - recommendationsRepository with strategy mapped into it
 */
export const transformRecommendationStrategyResponse = recommendationStrategy => {
  if (!isObject(recommendationStrategy) || !recommendationStrategy.repositoryId) {
    return {};
  }

  return {
    recommendationsRepository: {
      preview: {
        strategies: {
          [recommendationStrategy.repositoryId]: recommendationStrategy
        }
      }
    }
  };
};

/**
 * Adapter for the getRecommendationStrategy endpoint.
 */
export default createEndpoint('getRecommendationStrategy', {
  /**
   * Perform any necessary modification of the payload parameter that is
   * specified when dispatching an action that invokes this endpoint.
   *
   * @param {object} payload The original payload
   *
   * @return {object} The modified payload
   */
  processInput(payload) {
    const {strategyId} = payload;

    console.assert(strategyId, 'Missing argument "strategyId" for endpoint "getRecommendationStrategy"');

    // Including a "params" property in the returned payload will cause the given "repositoryId" property
    // to be substituted for the first occurrence of the string "{}" in the REST resource URL.
    return {
      ...payload,
      params: [strategyId]
    };
  },

  /**
   * Convert the response from the endpoint invocation into an object
   * to be merged into the application state.
   *
   * @param {object} response The response from the endpoint call
   *
   * @return {object} An object to be merged into the application state
   */
  async processOutput(response) {
    const recommendationStrategy = await getBodyAsJson(response);

    return response.ok
      ? {...transformRecommendationStrategyResponse(recommendationStrategy)}
      : populateError(response, recommendationStrategy);
  }
});
