/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {arrayToMap, isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Transform return request details from the response and populate return object in CSR Repository structure.
 * New attribute returnRequests is add to order object in order repository which hold the reference to the return request
 * in CSR Repository.
 * @param {Object} order
 * @param {String} orderId
 * @returns {Object} Order included in the order repository and Returns from CSR Repository
 */
export const populateReturnRequest = returnResponse => {
  if (!isObject(returnResponse) || isEmptyObject(returnResponse)) {
    return {};
  }

  return {
    csrRepository: {
      returns: {
        [returnResponse.returnRequestId]: returnResponse
      }
    }
  };
};

/**
 * Transform return reasons from the response and populate reasons object in Merchant Repository structure.
 *
 * @returns {Object} returnReasons included in the merchant repository.
 */
export const populateReturnReasons = returnReasonsResponse => {
  if (!isObject(returnReasonsResponse) || isEmptyObject(returnReasonsResponse)) {
    return {};
  }

  return {
    merchantRepository: {
      settings: {
        returnReasons: returnReasonsResponse.items
      }
    }
  };
};
/**
 * Adds return requests summary to the csrRepository
 * list of returnRequest Ids will be added to SCIMQueries object
 * with key as query like 'returnsForOrderId=o123345' and
 * value as list of ids like [r100001, r200001]
 * @param {Object} returnRequests of the order
 * @param {Object} orderId of passed in returnRequests
 * @returns {Object}  returns and SCIMQueries updated in the csr repository
 */
export const addReturnsSummary = (returnRequests, orderId) => {
  if (!isObject(returnRequests) || isEmptyObject(returnRequests)) {
    return {};
  }

  if (orderId === null || orderId === undefined || typeof orderId !== 'string') {
    return {};
  }

  const returnRequestsObj = arrayToMap(returnRequests.items, 'returnRequestId');
  const returnRequestIds = Object.keys(returnRequestsObj);

  return {
    clientRepository: {context: {request: {returnRequestIds}}},
    csrRepository: {returns: returnRequestsObj}
  };
};

/**
 * Adds return requests details to the csrRepository
 * existing details (added by summary action) will be honored
 * @param {Object} returnRequest details
 * @param {Object} returnRequestId of passed in returnRequest
 * @returns {Object}  returns updated in the csr repository
 */
export const addReturnRequestDetails = (returnRequest, id) => {
  if (!isObject(returnRequest) || isEmptyObject(returnRequest)) {
    return {};
  }

  if (id === null || id === undefined || typeof id !== 'string') {
    return {};
  }

  if (id !== returnRequest.returnRequestId) {
    return {};
  }
  if (isObject(returnRequest.state)) {
    returnRequest.stateKey = returnRequest.state.displayKey;
    returnRequest.state = returnRequest.state.displayName;
  }

  return {
    csrRepository: {returns: {[id]: returnRequest}}
  };
};
