/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {arrayToMap, isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Transform a single shareSetting response to corresponding state structure
 * @param {Object} shareSetting The share-setting repository item
 * @returns {Object} The shareSetting item transformed into state structure
 */
export const transformShareSetting = shareSetting => {
  if (!isObject(shareSetting) || isEmptyObject(shareSetting)) {
    return {};
  }

  const {account, owner, sharedEmailConfigs, ...restShareSetting} = shareSetting;
  const baseState = {
    purchaseListRepository: {
      shareSettings: {},
      emailConfigs: {}
    },
    profileRepository: {
      organizations: {},
      profiles: {}
    }
  };

  baseState.purchaseListRepository.shareSettings = {
    [restShareSetting.id]: restShareSetting
  };

  if (sharedEmailConfigs && sharedEmailConfigs.length > 0) {
    const shareSettingEmailConfigs = arrayToMap(sharedEmailConfigs, 'id');
    const emailConfigIds = Object.keys(shareSettingEmailConfigs);
    restShareSetting.sharedEmailConfigs = emailConfigIds;

    baseState.purchaseListRepository.emailConfigs = shareSettingEmailConfigs;
  }

  if (typeof owner === 'object') {
    baseState.profileRepository.profiles = {
      [owner.id]: owner
    };
    restShareSetting.owner = owner.id;
  }

  if (account && typeof account === 'object') {
    baseState.profileRepository.organizations = {
      [account.id]: account
    };
    restShareSetting.account = account.id;
  }

  return baseState;
};

/**
 * Transform a list of shareSetting response items to corresponding state structure
 * @param {Object} shareSetting The share-setting list response
 * @returns {Object} The shareSetting items transformed into state structure
 */
export const transformShareSettings = shareSettings => {
  if (!isObject(shareSettings) || isEmptyObject(shareSettings)) {
    return {};
  }

  const baseState = {
    purchaseListRepository: {
      shareSettings: {},
      emailConfigs: {}
    },
    profileRepository: {
      organizations: {},
      profiles: {}
    }
  };

  for (const pSettings of shareSettings.items) {
    const transformedSS = transformShareSetting(pSettings);

    baseState.purchaseListRepository.shareSettings = {
      ...baseState.purchaseListRepository.shareSettings,
      ...transformedSS.purchaseListRepository.shareSettings
    };

    baseState.purchaseListRepository.emailConfigs = {
      ...baseState.purchaseListRepository.emailConfigs,
      ...transformedSS.purchaseListRepository.emailConfigs
    };

    baseState.profileRepository.profiles = {
      ...baseState.profileRepository.profiles,
      ...transformedSS.profileRepository.profiles
    };

    baseState.profileRepository.organizations = {
      ...baseState.profileRepository.organizations,
      ...transformedSS.profileRepository.organizations
    };
  }

  return baseState;
};

/**
 * Transform a list of emailConfig response items to corresponding state structure
 * @param {Object} json The emailConfig list response
 * @returns {Object} The emailConfig items transformed into state structure
 */
export const transformEmailConfigs = json => {
  if (isObject(json) && !isEmptyObject(json)) {
    const emailConfigs = arrayToMap(json.emailConfigs, 'id');

    return {
      purchaseListRepository: {
        emailConfigs
      }
    };
  }

  return {};
};
