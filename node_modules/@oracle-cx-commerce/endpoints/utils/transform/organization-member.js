/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';
import {transformOrganization} from '@oracle-cx-commerce/endpoints/utils/transform/organization';
import {transformAccessRights} from '@oracle-cx-commerce/endpoints/utils/transform/role';

/**
 * Merges state structure into one single state object
 *
 * @param {*} result
 * @param {*} transformedResult
 */
const mergeResult = (result, transformedResult) => {
  result.profileRepository.organizations = {
    ...result.profileRepository.organizations,
    ...transformedResult.profileRepository.organizations
  };

  result.profileRepository.roles = {
    ...result.profileRepository.roles,
    ...transformedResult.profileRepository.roles
  };

  result.profileRepository.profiles = {
    ...result.profileRepository.profiles,
    ...transformedResult.profileRepository.profiles
  };

  result.profileRepository.accessRights = {
    ...result.profileRepository.accessRights,
    ...transformedResult.profileRepository.accessRights
  };

  return result;
};

/**
 * Normalizes roles and stores them in a global object inside profile repository
 *
 * @param {*} result
 * @param {*} transformedResult
 */
const normalizeRoles = member => {
  const allRoles = {},
    {roles} = member;

  if (roles) {
    roles.forEach(role => {
      if (role.relativeTo) {
        role.relativeTo = role.relativeTo.id ? role.relativeTo.id : role.relativeTo.repositoryId;
      }

      allRoles[role.repositoryId] = role;
    });
  }

  return allRoles;
};

/**
 * Transforms the information of an organization member
 * @param {Object} json JSON response returned from getOrganizationMember / updateOrganizationMember endpoint
 * @returns {Object} The member information made part of state structure
 */
export const transformMember = member => {
  if (!isObject(member) || isEmptyObject(member)) {
    return {};
  }
  delete member.links;
  const {parentOrganization, secondaryOrganizations, ...restMember} = member;
  if (restMember.currentOrganization) {
    restMember.currentOrganization = restMember.currentOrganization.repositoryId;
  }
  const result = {
      profileRepository: {organizations: {}, roles: {}, profiles: {}, accessRights: {}}
    },
    secondaryOrganizationIds = [];
  if (Array.isArray(secondaryOrganizations) && secondaryOrganizations.length > 0) {
    for (const organization of secondaryOrganizations) {
      const transformedResult = transformOrganization(organization);
      mergeResult(result, transformedResult);
      secondaryOrganizationIds.push(organization.repositoryId);
    }
    restMember.secondaryOrganizations = secondaryOrganizationIds;
  }

  if (parentOrganization) {
    const transformedResult = transformOrganization(parentOrganization);
    mergeResult(result, transformedResult);
    restMember.parentOrganization = parentOrganization.repositoryId;
  }

  const roles = normalizeRoles(restMember);
  const roleIds = Object.keys(roles);
  if (roleIds.length) {
    restMember.roles = roleIds;
  }
  const {accessRights} = restMember;
  const accessRightsMap = accessRights ? transformAccessRights(accessRights) : {};
  if (accessRights && !isEmptyObject(accessRightsMap)) {
    restMember['accessRights'] = accessRights.map(rights => rights.repositoryId) || [];
    result.profileRepository.accessRights = {
      ...result.profileRepository.accessRights,
      ...accessRightsMap.profileRepository.accessRights
    };
  }
  result.profileRepository.roles = {...result.profileRepository.roles, ...roles};
  result.profileRepository.profiles[restMember.id] = restMember;

  return result;
};

/**
 * Transforms the list of organization members.
 * Transforms items array to Object with id as key
 * @param {Object} json JSON response returned from listOrganizationMembers endpoint
 * @returns {Object} Listed members as part of the state structure
 */
export const transformMembers = json => {
  if (!json || !Array.isArray(json.items)) {
    return {};
  }

  const members = json.items;
  const finalResult = {
    profileRepository: {organizations: {}, roles: {}, profiles: {}, accessRights: {}}
  };

  for (const member of members) {
    const result = transformMember(member);
    mergeResult(finalResult, result);
  }

  return finalResult;
};
