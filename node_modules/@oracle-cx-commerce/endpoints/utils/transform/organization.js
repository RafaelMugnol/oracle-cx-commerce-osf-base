/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Merges state structure into one single state object
 *
 * @param {*} result final merged result
 * @param {*} transformedResult state to be merged in final resultant state
 *  after organization transform result.
 */
const mergeResult = (result, transformedResult) => {
  result.profileRepository.organizations = {
    ...result.profileRepository.organizations,
    ...transformedResult.profileRepository.organizations
  };

  result.profileRepository.roles = {
    ...result.profileRepository.roles,
    ...transformedResult.profileRepository.roles
  };

  return result;
};

/**
 * Transform relative roles property of organization. The relative role is list of roles
 * which relativeTo an organization. This transformer converts them into flat structure
 *
 * @param {*} organization organization object
 */
export const transformRelativeRoles = organization => {
  if (!isObject(organization) || isEmptyObject(organization)) {
    return {};
  }

  const result = {
    profileRepository: {organizations: {}, roles: {}}
  };
  const relativeRoles = [];

  if (Array.isArray(organization.relativeRoles)) {
    for (const role of organization.relativeRoles) {
      if (role.relativeTo) {
        const normalizedOrganization = role.relativeTo;
        result.profileRepository.organizations[normalizedOrganization.repositoryId] = normalizedOrganization;
        role.relativeTo = normalizedOrganization.repositoryId;

        const nestedResult = transformRelativeRoles(normalizedOrganization);

        result.profileRepository.roles = {
          ...result.profileRepository.roles,
          ...nestedResult.profileRepository.roles
        };
        result.profileRepository.organizations = {
          ...result.profileRepository.organizations,
          ...nestedResult.profileRepository.organizations
        };
      }
      result.profileRepository.roles[role.repositoryId] = role;
      relativeRoles.push(role.repositoryId);
    }
    organization.relativeRoles = relativeRoles;
  }

  // TODO: Enable both id and repositoryId properties from the server
  const id = organization.id ? organization.id : organization.repositoryId;
  result.profileRepository.organizations[id] = organization;

  return result;
};

/**
 * This method normalize organization and removes properties from organization
 * which are not required and can be accessed through other endpoints.
 *
 * @param {*} organization organization object
 */
export const normalizeOrganization = organization => {
  if (!isObject(organization) || isEmptyObject(organization)) {
    return {};
  }

  const {
    derivedShippingMethods,
    shippingMethods,
    paymentMethods,
    derivedPaymentMethods,
    secondaryAddresses,
    derivedBillingAddress,
    allContracts,
    contract,
    derivedShippingAddress,
    shippingAddress,
    billingAddress,
    members,
    derivedContract,
    siteOrganizationProperties,
    ancestorOrganizations,
    ...restOrganization
  } = organization;

  //We are taking out address and contract and members property from
  //organization for now in future if needed we can include them again
  const result = {
    profileRepository: {organizations: {}, roles: {}}
  };

  // TODO: Enable both id and repositoryId properties from the server
  const id = restOrganization.id ? restOrganization.id : restOrganization.repositoryId;
  result.profileRepository.organizations[id] = restOrganization;

  return result;
};

/**
 * Transform organization into state structure.
 *
 * @param {*} organization organization object
 */
export const transformOrganization = organization => {
  if (!isObject(organization) || isEmptyObject(organization)) {
    return {};
  }

  const finalResult = {
    profileRepository: {organizations: {}, roles: {}}
  };
  const result = transformRelativeRoles(organization);
  const normalizedResult = normalizeOrganization(organization);
  mergeResult(finalResult, normalizedResult);
  finalResult.profileRepository.roles = {...finalResult.profileRepository.roles, ...result.profileRepository.roles};

  const transformedOrganizations = result.profileRepository.organizations;
  for (const key of Object.keys(transformedOrganizations)) {
    const transformed = transformedOrganizations[key];
    const transformedResult = normalizeOrganization(transformed);
    mergeResult(finalResult, transformedResult);
  }

  return finalResult;
};

/**
 * Transforms a list of organizations into an object structured for placement in the
 * profileRepository repository.
 *
 * @param {Object} organizations contains the array of organization data.
 * @returns {Object} An object containing a properties that have a key of the organizationId and a value containing the organization info.
 */
export const transformOrganizations = organizations => {
  if (!Array.isArray(organizations)) {
    return {};
  }

  const result = {
    profileRepository: {organizations: {}, roles: {}}
  };

  for (const organization of organizations) {
    const transformedResult = transformOrganization(organization);
    mergeResult(result, transformedResult);
  }

  return result;
};
