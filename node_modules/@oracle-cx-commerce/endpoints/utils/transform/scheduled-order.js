/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {isEmptyObject, isObject, arrayToMap} from '@oracle-cx-commerce/utils/generic';
import {transformGetOrder} from '@oracle-cx-commerce/endpoints/utils/transform/order';

/**
 * Transforms ScheduledOrder properties
 * scheduledOrder object is stored in orderRepository.scheduledOrder with scheduledOrderId as key.
 * executionStatusList array is transformed and stored in orderRepository.
 * executionStatus with executionStatusId as key.
 * executionStatusList of scheduledOrder object will keep only executionStatus Ids.
 * TemplateOrder object is removed from scheduledOrder Object.
 * *
 * @param {Object} scheduledOrder
 * @returns {Object} orderRepository object with scheduledOrders and executionStatus objects
 */
export const transformScheduledOrder = scheduledOrder => {
  if (!isObject(scheduledOrder) || isEmptyObject(scheduledOrder)) {
    return {};
  }
  const {templateOrder, executionStatusList, ...restScheduledOrder} = scheduledOrder;
  const orderRepo = transformGetOrder(scheduledOrder.templateOrder);
  orderRepo.orderRepository.scheduledOrders = {};
  orderRepo.orderRepository.scheduledOrders[restScheduledOrder.id] = restScheduledOrder;

  if (Array.isArray(executionStatusList) && executionStatusList.length > 0) {
    restScheduledOrder.executionStatusList = [];
    orderRepo.orderRepository.executionStatus = {};
    for (const executionStatus of executionStatusList) {
      orderRepo.orderRepository.executionStatus[executionStatus.id] = executionStatus;
      restScheduledOrder.executionStatusList.push(executionStatus.id);
    }
  }

  return orderRepo;
};

/**
 * To transform response from convertCartToScheduledOrder Endpoint
 * Added  to handle convert scheduled order endpoint response
 * As endpoint will not return templateOrder->shipping groups,order as a result these are over-ridden
 * To avoid it, templateOrder check is included
 * @param {Object} scheduledOrder
 * @returns {Object} orderRepository object with scheduledOrder object
 */
export const transformCurrentOrderToScheduledOrder = scheduledOrder => {
  if (!isObject(scheduledOrder) || isEmptyObject(scheduledOrder)) {
    return {};
  }
  const {executionStatusList, ...restScheduledOrder} = scheduledOrder;
  let orderRepo = {};
  /**
   * Added check to handle convert scheduled order endpoint response
   * As endpoint will not return templateOrder->shipping groups,order as a result these are over-ridden
   * To avoid it, templateOrder check is included
   */
  if (
    scheduledOrder.templateOrder &&
    scheduledOrder.templateOrder.order &&
    scheduledOrder.templateOrder.shippingGroups
  ) {
    orderRepo = transformGetOrder(scheduledOrder.templateOrder);
  } else {
    orderRepo = {
      orderRepository: {
        orders: {}
      }
    };
  }
  orderRepo.orderRepository.scheduledOrders = {};
  orderRepo.orderRepository.scheduledOrders[restScheduledOrder.id] = restScheduledOrder;

  if (Array.isArray(executionStatusList) && executionStatusList.length > 0) {
    restScheduledOrder.executionStatusList = [];
    orderRepo.orderRepository.executionStatus = {};
    for (const executionStatus of executionStatusList) {
      orderRepo.orderRepository.executionStatus[executionStatus.id] = executionStatus;
      restScheduledOrder.executionStatusList.push(executionStatus.id);
    }
  }

  return orderRepo;
};

/**
 * Transforms ScheduleOrders properties
 *  * Transforms scheduledOrders Array with scheduledOrderId as key
 * @param {Object} scheduledOrder
 * @returns {Object} orderRepository object
 */
export const transformScheduledOrders = items => {
  if (!items || !Array.isArray(items)) {
    return {};
  }
  const result = {orderRepository: {scheduledOrders: {}, executionStatus: {}}};
  for (const scheduledOrder of items) {
    const transformed = transformScheduledOrder(scheduledOrder);
    result.orderRepository.scheduledOrders = {
      ...result.orderRepository.scheduledOrders,
      ...transformed.orderRepository.scheduledOrders
    };
    result.orderRepository.executionStatus = {
      ...result.orderRepository.executionStatus,
      ...transformed.orderRepository.executionStatus
    };
  }

  return result;
};

/**
 * Transforms ExecutionStatus properties
 *  * Transforms ExecutionStatus Array with ExecutionStatusId as key
 * @param {Object} array of executionStatus items
 * @returns {Object} orderRepository object
 */
export const transformExecutionStatus = items => {
  if (!items || !Array.isArray(items)) {
    return {};
  }
  const result = {orderRepository: {}};
  result.orderRepository.executionStatus = arrayToMap(items, 'id');

  return result;
};
