/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {getCurrentOrganizationId, getOrganizations} from '@oracle-cx-commerce/commerce-utils/selector';
import {transformOrganization} from '@oracle-cx-commerce/endpoints/utils/transform/organization';

/**
 * Transform address object from rest endpoint to state structure
 *
 * @param {Object} json The response of rest endpoint
 * @returns {Object} The address made part of state
 */
export const transformAddress = json => {
  if (json) {
    const {addressType, address} = json;

    return {
      [address.repositoryId]: {
        addressType,
        ...address
      }
    };
  }

  return {};
};

/**
 * Transform multiple address objects from rest endpoint to state structure
 *
 * @param {Object} json The response of rest endpoint
 * @returns {Object} The addresses made part of state
 */
export const transformAddresses = json => {
  if (json) {
    const {items} = json,
      addresses = {};

    items.forEach(item => {
      Object.assign(addresses, transformAddress(item));
    });

    return addresses;
  }

  return {};
};

/**
 * Transform address and default address information from rest endpoint to
 * state structure
 *
 * @param {Object} json The response of rest endpoint
 * @param {Object} state The previous state
 * @param {Object} inputPayload The payload passed to input of the endpoint
 * @returns {Object} The address and default address info made part of state
 */
export const transformOrganizationDefaultAddress = (json, state, inputPayload) => {
  if (json) {
    const {address} = json;
    const delta = {
      profileRepository: {
        contactInfos: transformAddress(json)
      }
    };
    const currentOrganizationId = getCurrentOrganizationId(state);
    const currentOrganization = getOrganizations(state)[currentOrganizationId];
    if (inputPayload.isDefaultBillingAddress || inputPayload.isDefaultShippingAddress) {
      delta.profileRepository.organizations = {
        [currentOrganizationId]: {}
      };
      if (currentOrganization && inputPayload.isDefaultBillingAddress) {
        delta.profileRepository.organizations[currentOrganizationId].billingAddress = json.address.repositoryId;
      } else if (
        currentOrganization &&
        inputPayload.isDefaultBillingAddress === false &&
        currentOrganization.billingAddress === address.repositoryId
      ) {
        delta.profileRepository.organizations[currentOrganizationId].billingAddress = undefined;
      }

      if (currentOrganization && inputPayload.isDefaultShippingAddress) {
        delta.profileRepository.organizations[currentOrganizationId].shippingAddress = json.address.repositoryId;
      } else if (
        currentOrganization &&
        inputPayload.isDefaultShippingAddress === false &&
        currentOrganization.shippingAddress === address.repositoryId
      ) {
        delta.profileRepository.organizations[currentOrganizationId].shippingAddress = undefined;
      }
    } else {
      if (
        currentOrganization &&
        inputPayload.isDefaultBillingAddress === false &&
        currentOrganization.billingAddress === address.repositoryId
      ) {
        delta.profileRepository.organizations = {
          [currentOrganizationId]: {}
        };
        delta.profileRepository.organizations[currentOrganizationId].billingAddress = undefined;
        if (
          currentOrganization &&
          inputPayload.isDefaultShippingAddress === true &&
          currentOrganization.shippingAddress === address.repositoryId
        ) {
          delta.profileRepository.organizations[currentOrganizationId].shippingAddress = json.address.repositoryId;
        }
      }
      if (
        currentOrganization &&
        inputPayload.isDefaultShippingAddress === false &&
        currentOrganization.shippingAddress === address.repositoryId
      ) {
        if (!delta.profileRepository.organizations) {
          delta.profileRepository.organizations = {
            [currentOrganizationId]: {}
          };
        }
        delta.profileRepository.organizations[currentOrganizationId].shippingAddress = undefined;
        if (
          currentOrganization &&
          inputPayload.isDefaultShippingAddress === true &&
          currentOrganization.billingAddress === address.repositoryId
        ) {
          delta.profileRepository.organizations[currentOrganizationId].billingAddress = json.address.repositoryId;
        }
      }
    }

    return delta;
  }

  return {};
};

/**
 * Transform default address objects from rest endpoint to state structure
 *
 * @param {Object} json The response of rest endpoint
 * @returns {Object} The address and organization made part of state
 */
export const transformOrganizationDefaultAddresses = json => {
  if (json) {
    const {billingAddress, shippingAddress, ...organization} = json;

    const result = transformOrganization(organization);

    result.profileRepository.contactInfos = {};

    if (billingAddress) {
      const id = billingAddress.repositoryId;
      result.profileRepository.organizations[organization.id].billingAddress = id;
      result.profileRepository.contactInfos[id] = billingAddress;
    }

    if (shippingAddress) {
      const id = shippingAddress.repositoryId;
      result.profileRepository.organizations[organization.id].shippingAddress = id;
      result.profileRepository.contactInfos[id] = shippingAddress;
    }

    return result;
  }

  return {};
};
