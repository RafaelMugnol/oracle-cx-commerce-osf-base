/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {arrayToMap, isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Normalizes purchase list items array into map with id as key
 * @param {Array} purchaseList
 * @returns {Object} Purchase list items map
 */
const normalizePurchaseListItems = purchaseListItemsArray => {
  if (!Array.isArray(purchaseListItemsArray)) return {};

  const purchaseListItems = arrayToMap(purchaseListItemsArray, 'id');

  return {purchaseListItems};
};

/**
 * Transforms purchase list from endpoint response to the appropriate format and constructs delta state.
 * @param {Object} purchaseList
 * @returns {Object} The delta state containing the given purchase list
 */
export const transformPurchaseList = purchaseList => {
  if (!isObject(purchaseList) || isEmptyObject(purchaseList)) {
    return {};
  }
  const purchaseListItems = normalizePurchaseListItems(purchaseList.items);
  delete purchaseList.items;
  const id = purchaseList.id || purchaseList.repositoryId;

  return {
    purchaseListRepository: {
      purchaseLists: {
        [id]: {...purchaseList, ...purchaseListItems}
      }
    }
  };
};

/**
 * Iterates over purchase lists array and calls transformPurchaseList to normalize each of the item.
 * @param {Array} purchaseLists
 * @returns {Object} The delta state containing all the purchase lists
 */
export const transformPurchaseLists = purchaseLists => {
  if (!Array.isArray(purchaseLists)) {
    return {};
  }

  let transformedLists = {};
  for (const pList of purchaseLists) {
    const transformedPL = transformPurchaseList(pList);
    if (!isEmptyObject(transformedPL)) {
      transformedLists = {
        ...transformedLists,
        ...transformedPL.purchaseListRepository.purchaseLists
      };
    }
  }

  return {
    purchaseListRepository: {
      purchaseLists: {
        ...transformedLists
      }
    }
  };
};
