/*
 ** Copyright (c) 2021 Oracle and/or its affiliates.
 */

import {isEmptyObject, isObject} from '@oracle-cx-commerce/utils/generic';

/**
 * Returns merged response with all accessRights and roles populated in state.
 * @returns {Object} profile repository structure in state
 */
const mergeResult = (result, transformedResult) => {
  result.profileRepository.roles = {
    ...result.profileRepository.roles,
    ...transformedResult.profileRepository.roles
  };

  result.profileRepository.accessRights = {
    ...result.profileRepository.accessRights,
    ...transformedResult.profileRepository.accessRights
  };

  return result;
};

/**
 * Returns accessRights with all accessRights details.
 * @returns {Object} profile repository structure in state
 */
export const transformAccessRights = accessRights => {
  if (!Array.isArray(accessRights)) {
    return {};
  }
  const result = {profileRepository: {accessRights: {}}};
  for (const accessRight of accessRights) {
    const {repositoryId} = accessRight;
    result.profileRepository.accessRights[repositoryId] = accessRight;
  }

  return result;
};

/**
 * Returns role and accessRights details for the role..
 * @returns {Object} profile repository structure in state
 */
export const transformRole = role => {
  if (!isObject(role) || isEmptyObject(role)) {
    return {};
  }
  delete role.links;
  const result = {profileRepository: {roles: {}, accessRights: {}}};
  const {repositoryId, accessRights = []} = role;
  if (role.relativeTo) {
    role.relativeTo = role.relativeTo.id ? role.relativeTo.id : role.relativeTo.repositoryId;
  }
  const accessRightMap = (accessRights || []).map(accessRight => accessRight.repositoryId);
  const roleDetails = {...role, accessRights: accessRightMap || []};
  result.profileRepository.roles = {[repositoryId]: roleDetails};
  const transformAccessRightsMap = transformAccessRights(accessRights);
  if (!isEmptyObject(transformAccessRightsMap)) {
    result.profileRepository.accessRights = {...transformAccessRights(accessRights).profileRepository.accessRights};
  }

  return result;
};

/**
 * Returns roles and accessRights details for the role.
 * @returns {Object} profile repository structure in state
 */
export const transformRoles = roles => {
  if (!Array.isArray(roles)) {
    return {};
  }
  const result = {profileRepository: {roles: {}, accessRights: {}}};
  for (const role of roles) {
    const transformedRole = transformRole(role);
    if (!isEmptyObject(transformedRole)) {
      mergeResult(result, transformedRole);
    }
  }

  return result;
};
