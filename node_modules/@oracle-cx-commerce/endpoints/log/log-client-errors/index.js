/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createEndpoint} from '@oracle-cx-commerce/endpoints/factory';

/*
 * Fetch the corresponding client error code for the exception
 */
const getClientErrorCode = error => {
  let errorCode = '15007';

  if (error instanceof RangeError) {
    errorCode = '15004';
  } else if (error instanceof TypeError) {
    errorCode = '15002';
  } else if (error instanceof SyntaxError) {
    errorCode = '15000';
  } else if (error instanceof ReferenceError) {
    errorCode = '15001';
  } else if (error instanceof EvalError) {
    errorCode = '15003';
  } else if (error instanceof URIError) {
    errorCode = '15005';
  } else if (error instanceof Error) {
    errorCode = '15006';
  }

  return errorCode;
};

let browserVersion;

/*
 * Returns an array with browser name - M[0] and version M[1].
 */
const getBrowserVersion = () => {
  if (!browserVersion) {
    const {appName, userAgent} = navigator;
    let M, tem;
    M = userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
    if (M && (tem = userAgent.match(/version\/([.\d]+)/i)) !== null) {
      [, M[2]] = tem;
    }
    M = M ? [M[1], M[2]] : [appName, navigator.appVersion, '-?'];

    browserVersion = `${M[0]} ${M[1]}`;
  }

  return browserVersion;
};

export const processInput = (payload, state) => {
  // TODO update to extract the required properties when the info is in the state
  // const {visitorId, visitId} = getVisitorSession(state);
  const {visitorId = '', visitId = ''} = state;
  // const siteId = getSiteSession(state).id;
  const {siteId = ''} = state;

  payload = payload || {};
  payload = Array.isArray(payload) ? payload : [payload];

  const clientSideErrors = payload.map(error => ({
    message: error.message,
    url: error.url,
    line: error.line,
    column: error.column,
    clientErrorCode: getClientErrorCode(error.error),
    errorStack: error.errorStack,
    osVersion: navigator.platform,
    locale: navigator.language,
    browserVersion: getBrowserVersion(),
    browserURL: location.href,
    siteId,
    visitorId,
    visitId,
    time: new Date().toISOString()
  }));

  return {
    body: {clientSideErrors}
  };
};

export default createEndpoint('logClientErrors', {
  processInput
});
