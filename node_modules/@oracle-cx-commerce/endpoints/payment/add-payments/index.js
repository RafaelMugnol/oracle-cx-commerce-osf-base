/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createEndpoint, getBodyAsJson} from '@oracle-cx-commerce/endpoints/factory';
import {
  includeDerivedPropertiesToBillingAddress,
  mergeExcludeParams,
  transformPaymentResponse
} from '@oracle-cx-commerce/endpoints/utils/transform';
import {populateError} from '@oracle-cx-commerce/endpoints/utils';

/**
 * Endpoint adapter for the 'addPayments' action.
 * This maps the action to an 'addPayments' endpoint invocation.
 */
export default createEndpoint('addPayments', {
  processInput(payload) {
    // Include selectedCountry,selectedState and state_ISOCode fields to billingAddress
    // Required to maintain consistency, since checkout cart endpoint does not mandate to include selectedState,selectedCountry and state_ISO
    // code as part of billingAddress but the payment endpoint fails without these fields.
    const {payments} = payload;
    if (payments && payments.length > 0) {
      for (const payment of payments) {
        const {billingAddress} = payment;
        if (billingAddress) {
          payment.billingAddress = includeDerivedPropertiesToBillingAddress(billingAddress);
        }
      }
    }

    const {queryParams, ...payloadBody} = payload;
    const excludeParams = mergeExcludeParams(queryParams, 'subResourceEndpoint');

    return {
      body: payloadBody,
      query: {...queryParams, includeOrder: true, exclude: excludeParams}
    };
  },

  /**
   * Convert the response from the endpoint invocation into an object
   * to be merged into the application state.
   */
  async processOutput(response) {
    const json = await getBodyAsJson(response);

    return response.ok ? transformPaymentResponse(json) : populateError(response, json);
  }
});
