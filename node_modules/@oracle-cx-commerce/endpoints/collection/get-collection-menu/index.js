/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createEndpoint, getBodyAsJson} from '@oracle-cx-commerce/endpoints/factory';
import {getAssetLanguageHeader, populateError, populateFieldParams} from '@oracle-cx-commerce/endpoints/utils';

/**
 * Transform nested category data to normalized (flattened) category data.
 *
 * @param {Object} nestedCategories Nested categories
 * @returns {Object} Normalized categories
 */
const normalizeCategories = (nestedCategories = []) => {
  const normalizedCategories = {};

  for (const nestedCategory of nestedCategories) {
    const {id, route = '', childCategories = []} = nestedCategory;

    normalizedCategories[id] = {
      ...nestedCategory,
      // Remove leading '/' from route so it resolves relative to document baseURI.
      route: route.replace(/^\//, ''),
      childCategories: childCategories.map(({id, route = '', displayName}) => ({
        id,
        route: route.replace(/^\//, ''),
        displayName
      }))
    };

    Object.assign(normalizedCategories, normalizeCategories(childCategories));
  }

  return normalizedCategories;
};

export const processInput = ({
  categoryId,
  filterKey,
  expandChildren,
  includeCollectionsWithNoActiveProducts,
  ...rest
}) => {
  console.assert(categoryId, 'getCollectionMenu requires a categoryId.');
  console.assert(filterKey, 'getCollectionMenu requires a filterKey.');

  return {
    headers: getAssetLanguageHeader(rest),
    params: [categoryId],
    query: {
      filterKey,
      expand: expandChildren ? 'childCategories' : undefined,
      disableActiveProdCheck: includeCollectionsWithNoActiveProducts,
      ...rest,
      ...populateFieldParams(rest)
    }
  };
};

export const processOutput = async response => {
  const json = await getBodyAsJson(response);
  const {items = []} = json;

  return response.ok
    ? {
        catalogRepository: {categories: normalizeCategories(items)},
        clientRepository: {context: {global: {categories: items.map(({id}) => id)}}}
      }
    : {
        ...populateError(response, json)
      };
};

export default createEndpoint('getCollection', {
  processInput,
  processOutput
});
