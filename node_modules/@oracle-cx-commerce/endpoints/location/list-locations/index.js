/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {createEndpoint, getBodyAsJson} from '@oracle-cx-commerce/endpoints/factory';
import {populateError} from '@oracle-cx-commerce/endpoints/utils';
import {transformLocations} from '@oracle-cx-commerce/endpoints/utils/transform';

let qParam;

/**
 * Normalizes the listLocations endpoint response format into the locationRepository format.
 *
 * @param locations the locations format as returned by the endpoint.
 * @returns the normalized locations.
 */
const normalizeOutput = json => {
  const locations = json.items;
  const locationIdsForQuery = locations.map(item => item.locationId);

  return qParam
    ? {
        ...transformLocations(locations),
        clientRepository: {transient: {locationIdsForQuery: {[qParam]: locationIdsForQuery}}}
      }
    : {...transformLocations(locations)};
};

export const processInput = payload => {
  qParam = payload.q;

  return {query: payload};
};

export const processOutput = async response => {
  const json = await getBodyAsJson(response);

  return response.ok ? normalizeOutput(json) : populateError(response, json);
};

export default createEndpoint('listLocations', {
  processInput,
  processOutput
});
