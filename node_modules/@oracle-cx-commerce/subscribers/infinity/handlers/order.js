/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {
  getOrder,
  getCurrentPriceListGroup,
  getCurrentOrderId,
  getCurrentProfileId,
  getCurrentSiteId
} from '@oracle-cx-commerce/commerce-utils/selector';
import {postToInfinity} from '@oracle-cx-commerce/subscribers/infinity/utils';

let orderId = '';

export default (action, state) => {
  const {type} = action;
  if (type === 'checkoutCart') {
    orderId = getCurrentOrderId(state);
  } else if (type === 'checkoutCartResolved') {
    const order = getOrder(state, {id: orderId});
    const inputMap = {};

    if (order.state === 'SUBMITTED') {
      const skuIds = [],
        subTotals = [],
        quantities = [],
        productIds = [],
        searchKeyWordCanonical = [],
        searchKeyWordRaw = [];

      for (const commerceItemId in order.commerceItems) {
        const commerceItem = order.commerceItems[commerceItemId];
        skuIds.push(commerceItem.catRefId);
        subTotals.push(commerceItem.price);
        quantities.push(commerceItem.quantity);
        productIds.push(commerceItem.productId);

        if (
          state.clientRepository.context.session.searchProdRel &&
          state.clientRepository.context.session.searchProdRel.length > 0
        ) {
          const filtered = state.clientRepository.context.session.searchProdRel.filter(
            searchProdR => searchProdR.catRefId === commerceItem.catRefId
          );
          if (filtered.length > 0) {
            if (filtered[0].searchTermsCanonical) {
              searchKeyWordCanonical.push(filtered[0].searchTermsCanonical);
              searchKeyWordRaw.push(filtered[0].searchTermsRaw);
            }
          }
        }
      }

      const dt = new Date();
      const day = `0${dt.getDate()}`.slice(-2);
      const month = `0${dt.getMonth() + 1}`.slice(-2);
      const dateStr = `${month}/${day}/${dt.getFullYear()}`;
      const hour = `0${dt.getHours()}`.slice(-2);
      const minutes = `0${dt.getMinutes()}`.slice(-2);
      const seconds = `0${dt.getSeconds()}`.slice(-2);
      const timeStr = `${hour}:${minutes}:${seconds}`;
      [inputMap['page-uri']] = encodeURI(window.location).split('?');
      inputMap['wt.dcsvid'] = getCurrentProfileId(state);
      inputMap['wt.z_occsite'] = getCurrentSiteId(state);
      inputMap['wt.pn_id'] = productIds.join(';');
      inputMap['wt.pn_sku'] = skuIds.join(';');
      inputMap['wt.tx_u'] = quantities.join(';');
      inputMap['wt.tx_s'] = subTotals.join(';');

      // search key word size
      if (searchKeyWordCanonical.length > 0) {
        inputMap['wt.oss'] = searchKeyWordCanonical.join(';');
      }

      if (searchKeyWordRaw.length > 0) {
        inputMap['wt.z_searchTermsRaw'] = searchKeyWordRaw.join(';');
      }

      inputMap['wt.tx_e'] = 'p';
      inputMap['wt.tx_id'] = dateStr;
      inputMap['wt.tx_it'] = timeStr;
      inputMap['wt.tx_i'] = order.uuid;
      inputMap['wt.tx_cartid'] = order.id;
      inputMap['wt.conv'] = 'Purchase';
      inputMap['wt.cg_n'] = 'Order';
      inputMap['wt.si_p'] = 'Order Submission Success';
      inputMap['wt.z_currency'] = getCurrentPriceListGroup(state).currency.currencyCode;
    } else if (order.state === 'INCOMPLETE') {
      [inputMap['page-uri']] = encodeURI(window.location).split('?');
      inputMap['wt.dcsvid'] = getCurrentProfileId(state);
      inputMap['wt.cg_n'] = 'Order';
      inputMap['wt.si_p'] = 'Order Submission Fail';
    }
    postToInfinity(inputMap);
    orderId = '';
  }
};
