/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */

import {
  getOrders,
  getCurrentPageId,
  getCurrentPriceListGroup,
  getCurrentProduct,
  getCurrentProfileId,
  getPage,
  getUUID,
  getCurrentSiteId,
  getProfile,
  getSessionContext
} from '@oracle-cx-commerce/commerce-utils/selector';
import {postToInfinity} from '@oracle-cx-commerce/subscribers/infinity/utils';

export default (action, state) => {
  const {type, endpointId} = action;
  if (
    type === 'getApplicationPageResolved' ||
    type === 'initResolved' ||
    (type === 'endpointResolved' && endpointId === 'getProduct')
  ) {
    const {originalAction = {}} = action;
    let {url} = originalAction.payload || {};
    if (!url) {
      url = window.location;
    }
    const currentPageId = getCurrentPageId(state);
    const currentPage = getPage(state, currentPageId);

    if (currentPage.pageType === 'product') {
      const product = getCurrentProduct(state);
      if (product && product.id) {
        const {searchEventSummary} = getSessionContext(state);
        const productViewedMap = {};
        productViewedMap['page-uri'] = url.host + url.pathname;
        productViewedMap['wt.dcsvid'] = getCurrentProfileId(state);
        if (getProfile(state).email) {
          productViewedMap['wt.z_email'] = getProfile(state).email;
          productViewedMap['wt.pn_name_url'] = `${product.displayName} - ${url.host}${url.pathname}`;
          productViewedMap['wt.pn_name'] = product.displayName;
          [productViewedMap['wt.page-url']] = encodeURI(`${url.protocol}//${url.host}${url.pathname}`).split('?');
          productViewedMap['wt.image-url'] = encodeURI(`${url.protocol}//${url.host}${product.primaryMediumImageURL}`);
        }
        productViewedMap['wt.pn_id'] = product.id;
        productViewedMap['wt.pn_sku'] = product.childSKUs ? product.childSKUs[0] : '';
        productViewedMap['wt.pn_fa'] = product.type;
        productViewedMap['wt.pn_ma'] = product.brand;
        productViewedMap['wt.tx_e'] = 'v';
        productViewedMap['wt.si_p'] = 'Product Viewed';
        productViewedMap['wt.cg_n'] = 'Product';
        productViewedMap['wt.z_currency'] = getCurrentPriceListGroup(state).currency.currencyCode;
        if (searchEventSummary) {
          productViewedMap['wt.z_searchTermsRaw'] = searchEventSummary.searchTermsRaw;
          productViewedMap['wt.oss'] = searchEventSummary.searchTermsCanonical;
        }
        postToInfinity(productViewedMap);
      }
    }

    const inputMap = {};
    inputMap['page-uri'] = url.host + url.pathname;
    inputMap['wt.dcsvid'] = getCurrentProfileId(state);
    inputMap['wt.cg_n'] = currentPage.pageType;

    if (currentPage.pageType === 'checkout-order-confirmation') {
      const orders = getOrders(state);
      const uuid = getUUID(state);
      const [orderResult] = Object.values(orders).filter(val => val.uuid === uuid);
      const shippingResults = Object.values(orderResult.shippingGroups).reduce(
        (target, val) => {
          target['shippingMethod'].push(val.shippingMethod.value);
          target['shippingCost'].push(val.shippingMethod.cost);

          return target;
        },
        {shippingMethod: [], shippingCost: []}
      );
      const paymentResults = Object.values(orderResult.paymentGroups).reduce(
        (target, val) => {
          target['gatewayName'].push(val.gatewayName);
          target['transactionAmount'].push(val.amount);

          return target;
        },
        {gatewayName: [], transactionAmount: []}
      );
      inputMap['wt.tx_cartid'] = orderResult.id;
      inputMap['wt.z_shippingMethod'] = shippingResults.shippingMethod.join(';');
      inputMap['wt.z_shippingCharges'] = shippingResults.shippingCost.join(';');
      inputMap['wt.z_gatewayName'] = paymentResults.gatewayName.join(';');
      inputMap['wt.z_gatewayTransactionAmount'] = paymentResults.transactionAmount.join(';');
      inputMap['wt.z_currency'] = getCurrentPriceListGroup(state).currency.currencyCode;
      inputMap['wt.z_occsite'] = getCurrentSiteId(state);

      // section for product and search key word relations
      const {searchProdRel} = state.clientRepository.context.session;
      const searchKeyWords = Object.values(searchProdRel).reduce(
        (target, value) => {
          const pIds = Object.values(orderResult.commerceItems).filter(
            searchProdR => searchProdR.catRefId === value.catRefId
          );

          if (pIds.length > 0) {
            if (value.searchTermsCanonical) {
              target['productId'].push(pIds[0].productId);
              target['searchTermsCanonical'].push(value.searchTermsCanonical);
              target['searchTermsRaw'].push(value.searchTermsRaw);
            }
          }

          return target;
        },
        {searchTermsCanonical: [], searchTermsRaw: [], productId: []}
      );

      inputMap['wt.z_searchTermsRaw'] = searchKeyWords.searchTermsRaw.join(';');
      inputMap['wt.oss'] = searchKeyWords.searchTermsCanonical.join(';');
      inputMap['wt.pn_id'] = searchKeyWords.productId.join(';');

      if (searchProdRel) {
        state.clientRepository.context.session.searchProdRel = [];
        state.clientRepository.context.session.searchEventSummary = {};
      }
    }
    postToInfinity(inputMap);
  }
};
