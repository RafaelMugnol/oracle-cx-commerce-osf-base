/*
 ** Copyright (c) 2020 Oracle and/or its affiliates.
 */
import {
  getCurrentProduct,
  getCurrentPriceListGroup,
  getCurrentProfileId,
  getSku,
  getCurrentOrder
} from '@oracle-cx-commerce/commerce-utils/selector';
import {postToInfinity, addEloquaCampaign} from '@oracle-cx-commerce/subscribers/infinity/utils';

export default (action, state) => {
  const {type} = action;
  if (type === 'addItemsToCartResolved') {
    const {searchEventSummary} = state.clientRepository.context.session;
    const {originalAction} = action;
    const {items} = originalAction.payload;
    const inputMap = {};
    const {brand, type: productType} = getCurrentProduct(state);
    const sku = getSku(state, items[0].catRefId);
    let price;
    if (sku.salePrice) {
      price = sku.salePrice;
    } else if (sku.listPrice) {
      price = sku.listPrice;
    }
    [inputMap['page-uri']] = encodeURI(window.location).split('?');
    inputMap['wt.dcsvid'] = getCurrentProfileId(state);
    inputMap['wt.pn_id'] = items[0].productId;
    inputMap['wt.pn_sku'] = items[0].catRefId;
    inputMap['wt.tx_u'] = items[0].quantity;
    inputMap['wt.tx_s'] = price;
    inputMap['wt.pn_fa'] = productType;
    inputMap['wt.pn_ma'] = brand;
    inputMap['wt.tx_e'] = 'a';
    inputMap['wt.cg_n'] = 'Cart';
    inputMap['wt.si_p'] = 'Add to Cart';
    inputMap['wt.z_currency'] = getCurrentPriceListGroup(state).currency.currencyCode;

    // eloqua changes
    const order = getCurrentOrder(state);
    // changes for marketing integration to pass campaign id
    addEloquaCampaign(order, inputMap);

    if (searchEventSummary) {
      inputMap['wt.z_searchTermsRaw'] = searchEventSummary.searchTermsRaw;
      inputMap['wt.oss'] = searchEventSummary.searchTermsCanonical;
      const searchAddToCartRel = {};
      searchAddToCartRel.searchTermsCanonical = searchEventSummary.searchTermsCanonical;
      searchAddToCartRel.searchTermsRaw = searchEventSummary.searchTermsRaw;
      searchAddToCartRel.productId = items[0].productId;
      searchAddToCartRel.catRefId = items[0].catRefId;

      if (
        !(
          state.clientRepository.context.session.searchProdRel &&
          state.clientRepository.context.session.searchProdRel.length > 0
        )
      ) {
        state.clientRepository.context.session.searchProdRel = [];
      }
      state.clientRepository.context.session.searchProdRel.push(searchAddToCartRel);
    }

    postToInfinity(inputMap);
  }
};
